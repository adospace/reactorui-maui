// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IShadow : IElement
{
}

public partial class Shadow<T> : Element<T>, IShadow where T : Microsoft.Maui.Controls.Shadow, new()
{
    public Shadow(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ShadowStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ShadowStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Shadow : Shadow<Microsoft.Maui.Controls.Shadow>
{
    public Shadow(Action<Microsoft.Maui.Controls.Shadow?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Shadow(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class ShadowExtensions
{
    public static T Radius<T>(this T shadow, float radius)
        where T : IShadow
    {
        //shadow.Radius = radius;
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.RadiusProperty, radius);
        return shadow;
    }

    public static T Radius<T>(this T shadow, Func<float> radiusFunc, IComponentWithState? componentWithState = null)
        where T : IShadow
    {
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.RadiusProperty, new PropertyValue<float>(radiusFunc, componentWithState));
        return shadow;
    }

    public static T Opacity<T>(this T shadow, float opacity)
        where T : IShadow
    {
        //shadow.Opacity = opacity;
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.OpacityProperty, opacity);
        return shadow;
    }

    public static T Opacity<T>(this T shadow, Func<float> opacityFunc, IComponentWithState? componentWithState = null)
        where T : IShadow
    {
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.OpacityProperty, new PropertyValue<float>(opacityFunc, componentWithState));
        return shadow;
    }

    public static T Brush<T>(this T shadow, Microsoft.Maui.Controls.Brush brush)
        where T : IShadow
    {
        //shadow.Brush = brush;
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.BrushProperty, brush);
        return shadow;
    }

    public static T Brush<T>(this T shadow, Func<Microsoft.Maui.Controls.Brush> brushFunc, IComponentWithState? componentWithState = null)
        where T : IShadow
    {
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.BrushProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(brushFunc, componentWithState));
        return shadow;
    }

    public static T Offset<T>(this T shadow, Microsoft.Maui.Graphics.Point offset, RxPointAnimation? customAnimation = null)
        where T : IShadow
    {
        //shadow.Offset = offset;
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.OffsetProperty, offset);
        shadow.AppendAnimatable(Microsoft.Maui.Controls.Shadow.OffsetProperty, customAnimation ?? new RxSimplePointAnimation(offset));
        return shadow;
    }

    public static T Offset<T>(this T shadow, Func<Microsoft.Maui.Graphics.Point> offsetFunc, IComponentWithState? componentWithState = null)
        where T : IShadow
    {
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.OffsetProperty, new PropertyValue<Microsoft.Maui.Graphics.Point>(offsetFunc, componentWithState));
        return shadow;
    }

    public static T Offset<T>(this T shadow, double x, double y)
        where T : IShadow
    {
        //shadow.Offset = new Microsoft.Maui.Graphics.Point(x, y);
        shadow.SetProperty(Microsoft.Maui.Controls.Shadow.OffsetProperty, new Microsoft.Maui.Graphics.Point(x, y));
        return shadow;
    }
}

public static partial class ShadowStyles
{
    public static Action<IShadow>? Default { get; set; }
    public static Dictionary<string, Action<IShadow>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISwitch : IView
{
    EventCommand<ToggledEventArgs>? ToggledEvent { get; set; }
}

public partial class Switch<T> : View<T>, ISwitch where T : Microsoft.Maui.Controls.Switch, new()
{
    public Switch(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SwitchStyles.Default?.Invoke(this);
    }

    EventCommand<ToggledEventArgs>? ISwitch.ToggledEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SwitchStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<ToggledEventArgs>? _executingToggledEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsISwitch = (ISwitch)this;
        if (thisAsISwitch.ToggledEvent != null)
        {
            NativeControl.Toggled += NativeControl_Toggled;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Toggled(object? sender, ToggledEventArgs e)
    {
        var thisAsISwitch = (ISwitch)this;
        if (_executingToggledEvent == null || _executingToggledEvent.IsCompleted)
        {
            _executingToggledEvent = thisAsISwitch.ToggledEvent;
            _executingToggledEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Toggled -= NativeControl_Toggled;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Switch<T> @switch)
        {
            if (_executingToggledEvent != null && !_executingToggledEvent.IsCompleted)
            {
                @switch._executingToggledEvent = _executingToggledEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Switch : Switch<Microsoft.Maui.Controls.Switch>
{
    public Switch(Action<Microsoft.Maui.Controls.Switch?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Switch(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SwitchExtensions
{
    public static T IsToggled<T>(this T @switch, bool isToggled)
        where T : ISwitch
    {
        //@switch.IsToggled = isToggled;
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.IsToggledProperty, isToggled);
        return @switch;
    }

    public static T IsToggled<T>(this T @switch, Func<bool> isToggledFunc, IComponentWithState? componentWithState = null)
        where T : ISwitch
    {
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.IsToggledProperty, new PropertyValue<bool>(isToggledFunc, componentWithState));
        return @switch;
    }

    public static T OnColor<T>(this T @switch, Microsoft.Maui.Graphics.Color onColor)
        where T : ISwitch
    {
        //@switch.OnColor = onColor;
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.OnColorProperty, onColor);
        return @switch;
    }

    public static T OnColor<T>(this T @switch, Func<Microsoft.Maui.Graphics.Color> onColorFunc, IComponentWithState? componentWithState = null)
        where T : ISwitch
    {
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.OnColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(onColorFunc, componentWithState));
        return @switch;
    }

    public static T ThumbColor<T>(this T @switch, Microsoft.Maui.Graphics.Color thumbColor)
        where T : ISwitch
    {
        //@switch.ThumbColor = thumbColor;
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.ThumbColorProperty, thumbColor);
        return @switch;
    }

    public static T ThumbColor<T>(this T @switch, Func<Microsoft.Maui.Graphics.Color> thumbColorFunc, IComponentWithState? componentWithState = null)
        where T : ISwitch
    {
        @switch.SetProperty(Microsoft.Maui.Controls.Switch.ThumbColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(thumbColorFunc, componentWithState));
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Action? toggledAction)
        where T : ISwitch
    {
        @switch.ToggledEvent = new SyncEventCommand<ToggledEventArgs>(execute: toggledAction);
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Action<ToggledEventArgs>? toggledAction)
        where T : ISwitch
    {
        @switch.ToggledEvent = new SyncEventCommand<ToggledEventArgs>(executeWithArgs: toggledAction);
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Action<object?, ToggledEventArgs>? toggledAction)
        where T : ISwitch
    {
        @switch.ToggledEvent = new SyncEventCommand<ToggledEventArgs>(executeWithFullArgs: toggledAction);
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Func<Task>? toggledAction, bool runInBackground = false)
        where T : ISwitch
    {
        @switch.ToggledEvent = new AsyncEventCommand<ToggledEventArgs>(execute: toggledAction, runInBackground);
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Func<ToggledEventArgs, Task>? toggledAction, bool runInBackground = false)
        where T : ISwitch
    {
        @switch.ToggledEvent = new AsyncEventCommand<ToggledEventArgs>(executeWithArgs: toggledAction, runInBackground);
        return @switch;
    }

    public static T OnToggled<T>(this T @switch, Func<object?, ToggledEventArgs, Task>? toggledAction, bool runInBackground = false)
        where T : ISwitch
    {
        @switch.ToggledEvent = new AsyncEventCommand<ToggledEventArgs>(executeWithFullArgs: toggledAction, runInBackground);
        return @switch;
    }
}

public static partial class SwitchStyles
{
    public static Action<ISwitch>? Default { get; set; }
    public static Dictionary<string, Action<ISwitch>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IDropGestureRecognizer : IGestureRecognizer
{
    EventCommand<DragEventArgs>? DragLeaveEvent { get; set; }

    EventCommand<DragEventArgs>? DragOverEvent { get; set; }

    EventCommand<DropEventArgs>? DropEvent { get; set; }
}

public partial class DropGestureRecognizer<T> : GestureRecognizer<T>, IDropGestureRecognizer where T : Microsoft.Maui.Controls.DropGestureRecognizer, new()
{
    public DropGestureRecognizer(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        DropGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<DragEventArgs>? IDropGestureRecognizer.DragLeaveEvent { get; set; }

    EventCommand<DragEventArgs>? IDropGestureRecognizer.DragOverEvent { get; set; }

    EventCommand<DropEventArgs>? IDropGestureRecognizer.DropEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && DropGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<DragEventArgs>? _executingDragLeaveEvent;
    private EventCommand<DragEventArgs>? _executingDragOverEvent;
    private EventCommand<DropEventArgs>? _executingDropEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIDropGestureRecognizer = (IDropGestureRecognizer)this;
        if (thisAsIDropGestureRecognizer.DragLeaveEvent != null)
        {
            NativeControl.DragLeave += NativeControl_DragLeave;
        }

        if (thisAsIDropGestureRecognizer.DragOverEvent != null)
        {
            NativeControl.DragOver += NativeControl_DragOver;
        }

        if (thisAsIDropGestureRecognizer.DropEvent != null)
        {
            NativeControl.Drop += NativeControl_Drop;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_DragLeave(object? sender, DragEventArgs e)
    {
        var thisAsIDropGestureRecognizer = (IDropGestureRecognizer)this;
        if (_executingDragLeaveEvent == null || _executingDragLeaveEvent.IsCompleted)
        {
            _executingDragLeaveEvent = thisAsIDropGestureRecognizer.DragLeaveEvent;
            _executingDragLeaveEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_DragOver(object? sender, DragEventArgs e)
    {
        var thisAsIDropGestureRecognizer = (IDropGestureRecognizer)this;
        if (_executingDragOverEvent == null || _executingDragOverEvent.IsCompleted)
        {
            _executingDragOverEvent = thisAsIDropGestureRecognizer.DragOverEvent;
            _executingDragOverEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Drop(object? sender, DropEventArgs e)
    {
        var thisAsIDropGestureRecognizer = (IDropGestureRecognizer)this;
        if (_executingDropEvent == null || _executingDropEvent.IsCompleted)
        {
            _executingDropEvent = thisAsIDropGestureRecognizer.DropEvent;
            _executingDropEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.DragLeave -= NativeControl_DragLeave;
            NativeControl.DragOver -= NativeControl_DragOver;
            NativeControl.Drop -= NativeControl_Drop;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is DropGestureRecognizer<T> @dropgesturerecognizer)
        {
            if (_executingDragLeaveEvent != null && !_executingDragLeaveEvent.IsCompleted)
            {
                @dropgesturerecognizer._executingDragLeaveEvent = _executingDragLeaveEvent;
            }

            if (_executingDragOverEvent != null && !_executingDragOverEvent.IsCompleted)
            {
                @dropgesturerecognizer._executingDragOverEvent = _executingDragOverEvent;
            }

            if (_executingDropEvent != null && !_executingDropEvent.IsCompleted)
            {
                @dropgesturerecognizer._executingDropEvent = _executingDropEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class DropGestureRecognizer : DropGestureRecognizer<Microsoft.Maui.Controls.DropGestureRecognizer>
{
    public DropGestureRecognizer(Action<Microsoft.Maui.Controls.DropGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public DropGestureRecognizer(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class DropGestureRecognizerExtensions
{
    public static T AllowDrop<T>(this T dropGestureRecognizer, bool allowDrop)
        where T : IDropGestureRecognizer
    {
        //dropGestureRecognizer.AllowDrop = allowDrop;
        dropGestureRecognizer.SetProperty(Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty, allowDrop);
        return dropGestureRecognizer;
    }

    public static T AllowDrop<T>(this T dropGestureRecognizer, Func<bool> allowDropFunc, IComponentWithState? componentWithState = null)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.SetProperty(Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty, new PropertyValue<bool>(allowDropFunc, componentWithState));
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Action? dragLeaveAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new SyncEventCommand<DragEventArgs>(execute: dragLeaveAction);
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Action<DragEventArgs>? dragLeaveAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new SyncEventCommand<DragEventArgs>(executeWithArgs: dragLeaveAction);
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Action<object?, DragEventArgs>? dragLeaveAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new SyncEventCommand<DragEventArgs>(executeWithFullArgs: dragLeaveAction);
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Func<Task>? dragLeaveAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new AsyncEventCommand<DragEventArgs>(execute: dragLeaveAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Func<DragEventArgs, Task>? dragLeaveAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new AsyncEventCommand<DragEventArgs>(executeWithArgs: dragLeaveAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDragLeave<T>(this T dropGestureRecognizer, Func<object?, DragEventArgs, Task>? dragLeaveAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragLeaveEvent = new AsyncEventCommand<DragEventArgs>(executeWithFullArgs: dragLeaveAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Action? dragOverAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new SyncEventCommand<DragEventArgs>(execute: dragOverAction);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Action<DragEventArgs>? dragOverAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new SyncEventCommand<DragEventArgs>(executeWithArgs: dragOverAction);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Action<object?, DragEventArgs>? dragOverAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new SyncEventCommand<DragEventArgs>(executeWithFullArgs: dragOverAction);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Func<Task>? dragOverAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new AsyncEventCommand<DragEventArgs>(execute: dragOverAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Func<DragEventArgs, Task>? dragOverAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new AsyncEventCommand<DragEventArgs>(executeWithArgs: dragOverAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDragOver<T>(this T dropGestureRecognizer, Func<object?, DragEventArgs, Task>? dragOverAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DragOverEvent = new AsyncEventCommand<DragEventArgs>(executeWithFullArgs: dragOverAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Action? dropAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new SyncEventCommand<DropEventArgs>(execute: dropAction);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Action<DropEventArgs>? dropAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new SyncEventCommand<DropEventArgs>(executeWithArgs: dropAction);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Action<object?, DropEventArgs>? dropAction)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new SyncEventCommand<DropEventArgs>(executeWithFullArgs: dropAction);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Func<Task>? dropAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new AsyncEventCommand<DropEventArgs>(execute: dropAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Func<DropEventArgs, Task>? dropAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new AsyncEventCommand<DropEventArgs>(executeWithArgs: dropAction, runInBackground);
        return dropGestureRecognizer;
    }

    public static T OnDrop<T>(this T dropGestureRecognizer, Func<object?, DropEventArgs, Task>? dropAction, bool runInBackground = false)
        where T : IDropGestureRecognizer
    {
        dropGestureRecognizer.DropEvent = new AsyncEventCommand<DropEventArgs>(executeWithFullArgs: dropAction, runInBackground);
        return dropGestureRecognizer;
    }
}

public static partial class DropGestureRecognizerStyles
{
    public static Action<IDropGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<IDropGestureRecognizer>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISpan : IGestureElement
{
}

public partial class Span<T> : GestureElement<T>, ISpan where T : Microsoft.Maui.Controls.Span, new()
{
    public Span(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SpanStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SpanStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Span : Span<Microsoft.Maui.Controls.Span>
{
    public Span(Action<Microsoft.Maui.Controls.Span?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Span(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SpanExtensions
{
    public static T Style<T>(this T span, Microsoft.Maui.Controls.Style style)
        where T : ISpan
    {
        //span.Style = style;
        span.SetProperty(Microsoft.Maui.Controls.Span.StyleProperty, style);
        return span;
    }

    public static T Style<T>(this T span, Func<Microsoft.Maui.Controls.Style> styleFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.StyleProperty, new PropertyValue<Microsoft.Maui.Controls.Style>(styleFunc, componentWithState));
        return span;
    }

    public static T TextDecorations<T>(this T span, Microsoft.Maui.TextDecorations textDecorations)
        where T : ISpan
    {
        //span.TextDecorations = textDecorations;
        span.SetProperty(Microsoft.Maui.Controls.Span.TextDecorationsProperty, textDecorations);
        return span;
    }

    public static T TextDecorations<T>(this T span, Func<Microsoft.Maui.TextDecorations> textDecorationsFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.TextDecorationsProperty, new PropertyValue<Microsoft.Maui.TextDecorations>(textDecorationsFunc, componentWithState));
        return span;
    }

    public static T TextTransform<T>(this T span, Microsoft.Maui.TextTransform textTransform)
        where T : ISpan
    {
        //span.TextTransform = textTransform;
        span.SetProperty(Microsoft.Maui.Controls.Span.TextTransformProperty, textTransform);
        return span;
    }

    public static T TextTransform<T>(this T span, Func<Microsoft.Maui.TextTransform> textTransformFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.TextTransformProperty, new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc, componentWithState));
        return span;
    }

    public static T BackgroundColor<T>(this T span, Microsoft.Maui.Graphics.Color backgroundColor)
        where T : ISpan
    {
        //span.BackgroundColor = backgroundColor;
        span.SetProperty(Microsoft.Maui.Controls.Span.BackgroundColorProperty, backgroundColor);
        return span;
    }

    public static T BackgroundColor<T>(this T span, Func<Microsoft.Maui.Graphics.Color> backgroundColorFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.BackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(backgroundColorFunc, componentWithState));
        return span;
    }

    public static T TextColor<T>(this T span, Microsoft.Maui.Graphics.Color textColor)
        where T : ISpan
    {
        //span.TextColor = textColor;
        span.SetProperty(Microsoft.Maui.Controls.Span.TextColorProperty, textColor);
        return span;
    }

    public static T TextColor<T>(this T span, Func<Microsoft.Maui.Graphics.Color> textColorFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc, componentWithState));
        return span;
    }

    public static T CharacterSpacing<T>(this T span, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : ISpan
    {
        //span.CharacterSpacing = characterSpacing;
        span.SetProperty(Microsoft.Maui.Controls.Span.CharacterSpacingProperty, characterSpacing);
        span.AppendAnimatable(Microsoft.Maui.Controls.Span.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return span;
    }

    public static T CharacterSpacing<T>(this T span, Func<double> characterSpacingFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc, componentWithState));
        return span;
    }

    public static T Text<T>(this T span, string text)
        where T : ISpan
    {
        //span.Text = text;
        span.SetProperty(Microsoft.Maui.Controls.Span.TextProperty, text);
        return span;
    }

    public static T Text<T>(this T span, Func<string> textFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.TextProperty, new PropertyValue<string>(textFunc, componentWithState));
        return span;
    }

    public static T FontFamily<T>(this T span, string fontFamily)
        where T : ISpan
    {
        //span.FontFamily = fontFamily;
        span.SetProperty(Microsoft.Maui.Controls.Span.FontFamilyProperty, fontFamily);
        return span;
    }

    public static T FontFamily<T>(this T span, Func<string> fontFamilyFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc, componentWithState));
        return span;
    }

    public static T FontSize<T>(this T span, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : ISpan
    {
        //span.FontSize = fontSize;
        span.SetProperty(Microsoft.Maui.Controls.Span.FontSizeProperty, fontSize);
        span.AppendAnimatable(Microsoft.Maui.Controls.Span.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return span;
    }

    public static T FontSize<T>(this T span, Func<double> fontSizeFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.FontSizeProperty, new PropertyValue<double>(fontSizeFunc, componentWithState));
        return span;
    }

    public static T FontAttributes<T>(this T span, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : ISpan
    {
        //span.FontAttributes = fontAttributes;
        span.SetProperty(Microsoft.Maui.Controls.Span.FontAttributesProperty, fontAttributes);
        return span;
    }

    public static T FontAttributes<T>(this T span, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc, componentWithState));
        return span;
    }

    public static T FontAutoScalingEnabled<T>(this T span, bool fontAutoScalingEnabled)
        where T : ISpan
    {
        //span.FontAutoScalingEnabled = fontAutoScalingEnabled;
        span.SetProperty(Microsoft.Maui.Controls.Span.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return span;
    }

    public static T FontAutoScalingEnabled<T>(this T span, Func<bool> fontAutoScalingEnabledFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc, componentWithState));
        return span;
    }

    public static T LineHeight<T>(this T span, double lineHeight, RxDoubleAnimation? customAnimation = null)
        where T : ISpan
    {
        //span.LineHeight = lineHeight;
        span.SetProperty(Microsoft.Maui.Controls.Span.LineHeightProperty, lineHeight);
        span.AppendAnimatable(Microsoft.Maui.Controls.Span.LineHeightProperty, customAnimation ?? new RxDoubleAnimation(lineHeight));
        return span;
    }

    public static T LineHeight<T>(this T span, Func<double> lineHeightFunc, IComponentWithState? componentWithState = null)
        where T : ISpan
    {
        span.SetProperty(Microsoft.Maui.Controls.Span.LineHeightProperty, new PropertyValue<double>(lineHeightFunc, componentWithState));
        return span;
    }
}

public static partial class SpanStyles
{
    public static Action<ISpan>? Default { get; set; }
    public static Dictionary<string, Action<ISpan>> Themes { get; } = [];
}
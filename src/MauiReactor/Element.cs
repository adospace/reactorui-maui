// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IElement : IVisualNodeWithNativeControl
{
    EventCommand<ElementEventArgs>? ChildAddedEvent { get; set; }

    EventCommand<ElementEventArgs>? ChildRemovedEvent { get; set; }

    EventCommand<ElementEventArgs>? DescendantAddedEvent { get; set; }

    EventCommand<ElementEventArgs>? DescendantRemovedEvent { get; set; }

    EventCommand<ParentChangingEventArgs>? ParentChangingEvent { get; set; }

    EventCommand<EventArgs>? ParentChangedEvent { get; set; }

    EventCommand<HandlerChangingEventArgs>? HandlerChangingEvent { get; set; }

    EventCommand<EventArgs>? HandlerChangedEvent { get; set; }
}

public abstract partial class Element<T> : VisualNode<T>, IElement where T : Microsoft.Maui.Controls.Element, new()
{
    protected Element(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ElementStyles.Default?.Invoke(this);
    }

    EventCommand<ElementEventArgs>? IElement.ChildAddedEvent { get; set; }

    EventCommand<ElementEventArgs>? IElement.ChildRemovedEvent { get; set; }

    EventCommand<ElementEventArgs>? IElement.DescendantAddedEvent { get; set; }

    EventCommand<ElementEventArgs>? IElement.DescendantRemovedEvent { get; set; }

    EventCommand<ParentChangingEventArgs>? IElement.ParentChangingEvent { get; set; }

    EventCommand<EventArgs>? IElement.ParentChangedEvent { get; set; }

    EventCommand<HandlerChangingEventArgs>? IElement.HandlerChangingEvent { get; set; }

    EventCommand<EventArgs>? IElement.HandlerChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ElementStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<ElementEventArgs>? _executingChildAddedEvent;
    private EventCommand<ElementEventArgs>? _executingChildRemovedEvent;
    private EventCommand<ElementEventArgs>? _executingDescendantAddedEvent;
    private EventCommand<ElementEventArgs>? _executingDescendantRemovedEvent;
    private EventCommand<ParentChangingEventArgs>? _executingParentChangingEvent;
    private EventCommand<EventArgs>? _executingParentChangedEvent;
    private EventCommand<HandlerChangingEventArgs>? _executingHandlerChangingEvent;
    private EventCommand<EventArgs>? _executingHandlerChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIElement = (IElement)this;
        if (thisAsIElement.ChildAddedEvent != null)
        {
            nativeControl.ChildAdded += NativeControl_ChildAdded;
        }

        if (thisAsIElement.ChildRemovedEvent != null)
        {
            nativeControl.ChildRemoved += NativeControl_ChildRemoved;
        }

        if (thisAsIElement.DescendantAddedEvent != null)
        {
            nativeControl.DescendantAdded += NativeControl_DescendantAdded;
        }

        if (thisAsIElement.DescendantRemovedEvent != null)
        {
            nativeControl.DescendantRemoved += NativeControl_DescendantRemoved;
        }

        if (thisAsIElement.ParentChangingEvent != null)
        {
            nativeControl.ParentChanging += NativeControl_ParentChanging;
        }

        if (thisAsIElement.ParentChangedEvent != null)
        {
            nativeControl.ParentChanged += NativeControl_ParentChanged;
        }

        if (thisAsIElement.HandlerChangingEvent != null)
        {
            nativeControl.HandlerChanging += NativeControl_HandlerChanging;
        }

        if (thisAsIElement.HandlerChangedEvent != null)
        {
            nativeControl.HandlerChanged += NativeControl_HandlerChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_ChildAdded(object? sender, ElementEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingChildAddedEvent == null || _executingChildAddedEvent.IsCompleted)
        {
            _executingChildAddedEvent = thisAsIElement.ChildAddedEvent;
            _executingChildAddedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ChildRemoved(object? sender, ElementEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingChildRemovedEvent == null || _executingChildRemovedEvent.IsCompleted)
        {
            _executingChildRemovedEvent = thisAsIElement.ChildRemovedEvent;
            _executingChildRemovedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_DescendantAdded(object? sender, ElementEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingDescendantAddedEvent == null || _executingDescendantAddedEvent.IsCompleted)
        {
            _executingDescendantAddedEvent = thisAsIElement.DescendantAddedEvent;
            _executingDescendantAddedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_DescendantRemoved(object? sender, ElementEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingDescendantRemovedEvent == null || _executingDescendantRemovedEvent.IsCompleted)
        {
            _executingDescendantRemovedEvent = thisAsIElement.DescendantRemovedEvent;
            _executingDescendantRemovedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ParentChanging(object? sender, ParentChangingEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingParentChangingEvent == null || _executingParentChangingEvent.IsCompleted)
        {
            _executingParentChangingEvent = thisAsIElement.ParentChangingEvent;
            _executingParentChangingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ParentChanged(object? sender, EventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingParentChangedEvent == null || _executingParentChangedEvent.IsCompleted)
        {
            _executingParentChangedEvent = thisAsIElement.ParentChangedEvent;
            _executingParentChangedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_HandlerChanging(object? sender, HandlerChangingEventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingHandlerChangingEvent == null || _executingHandlerChangingEvent.IsCompleted)
        {
            _executingHandlerChangingEvent = thisAsIElement.HandlerChangingEvent;
            _executingHandlerChangingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_HandlerChanged(object? sender, EventArgs e)
    {
        var thisAsIElement = (IElement)this;
        if (_executingHandlerChangedEvent == null || _executingHandlerChangedEvent.IsCompleted)
        {
            _executingHandlerChangedEvent = thisAsIElement.HandlerChangedEvent;
            _executingHandlerChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.ChildAdded -= NativeControl_ChildAdded;
            nativeControl.ChildRemoved -= NativeControl_ChildRemoved;
            nativeControl.DescendantAdded -= NativeControl_DescendantAdded;
            nativeControl.DescendantRemoved -= NativeControl_DescendantRemoved;
            nativeControl.ParentChanging -= NativeControl_ParentChanging;
            nativeControl.ParentChanged -= NativeControl_ParentChanged;
            nativeControl.HandlerChanging -= NativeControl_HandlerChanging;
            nativeControl.HandlerChanged -= NativeControl_HandlerChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Element<T> @element)
        {
            if (_executingChildAddedEvent != null && !_executingChildAddedEvent.IsCompleted)
            {
                @element._executingChildAddedEvent = _executingChildAddedEvent;
            }

            if (_executingChildRemovedEvent != null && !_executingChildRemovedEvent.IsCompleted)
            {
                @element._executingChildRemovedEvent = _executingChildRemovedEvent;
            }

            if (_executingDescendantAddedEvent != null && !_executingDescendantAddedEvent.IsCompleted)
            {
                @element._executingDescendantAddedEvent = _executingDescendantAddedEvent;
            }

            if (_executingDescendantRemovedEvent != null && !_executingDescendantRemovedEvent.IsCompleted)
            {
                @element._executingDescendantRemovedEvent = _executingDescendantRemovedEvent;
            }

            if (_executingParentChangingEvent != null && !_executingParentChangingEvent.IsCompleted)
            {
                @element._executingParentChangingEvent = _executingParentChangingEvent;
            }

            if (_executingParentChangedEvent != null && !_executingParentChangedEvent.IsCompleted)
            {
                @element._executingParentChangedEvent = _executingParentChangedEvent;
            }

            if (_executingHandlerChangingEvent != null && !_executingHandlerChangingEvent.IsCompleted)
            {
                @element._executingHandlerChangingEvent = _executingHandlerChangingEvent;
            }

            if (_executingHandlerChangedEvent != null && !_executingHandlerChangedEvent.IsCompleted)
            {
                @element._executingHandlerChangedEvent = _executingHandlerChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class ElementExtensions
{
    public static T AutomationId<T>(this T element, string automationId)
        where T : IElement
    {
        //element.AutomationId = automationId;
        element.SetProperty(Microsoft.Maui.Controls.Element.AutomationIdProperty, automationId);
        return element;
    }

    public static T AutomationId<T>(this T element, Func<string> automationIdFunc, IComponentWithState? componentWithState = null)
        where T : IElement
    {
        element.SetProperty(Microsoft.Maui.Controls.Element.AutomationIdProperty, new PropertyValue<string>(automationIdFunc, componentWithState));
        return element;
    }

    public static T ClassId<T>(this T element, string classId)
        where T : IElement
    {
        //element.ClassId = classId;
        element.SetProperty(Microsoft.Maui.Controls.Element.ClassIdProperty, classId);
        return element;
    }

    public static T ClassId<T>(this T element, Func<string> classIdFunc, IComponentWithState? componentWithState = null)
        where T : IElement
    {
        element.SetProperty(Microsoft.Maui.Controls.Element.ClassIdProperty, new PropertyValue<string>(classIdFunc, componentWithState));
        return element;
    }

    public static T OnChildAdded<T>(this T element, Action? childAddedAction)
        where T : IElement
    {
        element.ChildAddedEvent = new SyncEventCommand<ElementEventArgs>(execute: childAddedAction);
        return element;
    }

    public static T OnChildAdded<T>(this T element, Action<ElementEventArgs>? childAddedAction)
        where T : IElement
    {
        element.ChildAddedEvent = new SyncEventCommand<ElementEventArgs>(executeWithArgs: childAddedAction);
        return element;
    }

    public static T OnChildAdded<T>(this T element, Action<object?, ElementEventArgs>? childAddedAction)
        where T : IElement
    {
        element.ChildAddedEvent = new SyncEventCommand<ElementEventArgs>(executeWithFullArgs: childAddedAction);
        return element;
    }

    public static T OnChildAdded<T>(this T element, Func<Task>? childAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildAddedEvent = new AsyncEventCommand<ElementEventArgs>(execute: childAddedAction, runInBackground);
        return element;
    }

    public static T OnChildAdded<T>(this T element, Func<ElementEventArgs, Task>? childAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildAddedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithArgs: childAddedAction, runInBackground);
        return element;
    }

    public static T OnChildAdded<T>(this T element, Func<object?, ElementEventArgs, Task>? childAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildAddedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithFullArgs: childAddedAction, runInBackground);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Action? childRemovedAction)
        where T : IElement
    {
        element.ChildRemovedEvent = new SyncEventCommand<ElementEventArgs>(execute: childRemovedAction);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Action<ElementEventArgs>? childRemovedAction)
        where T : IElement
    {
        element.ChildRemovedEvent = new SyncEventCommand<ElementEventArgs>(executeWithArgs: childRemovedAction);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Action<object?, ElementEventArgs>? childRemovedAction)
        where T : IElement
    {
        element.ChildRemovedEvent = new SyncEventCommand<ElementEventArgs>(executeWithFullArgs: childRemovedAction);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Func<Task>? childRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildRemovedEvent = new AsyncEventCommand<ElementEventArgs>(execute: childRemovedAction, runInBackground);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Func<ElementEventArgs, Task>? childRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildRemovedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithArgs: childRemovedAction, runInBackground);
        return element;
    }

    public static T OnChildRemoved<T>(this T element, Func<object?, ElementEventArgs, Task>? childRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ChildRemovedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithFullArgs: childRemovedAction, runInBackground);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Action? descendantAddedAction)
        where T : IElement
    {
        element.DescendantAddedEvent = new SyncEventCommand<ElementEventArgs>(execute: descendantAddedAction);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Action<ElementEventArgs>? descendantAddedAction)
        where T : IElement
    {
        element.DescendantAddedEvent = new SyncEventCommand<ElementEventArgs>(executeWithArgs: descendantAddedAction);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Action<object?, ElementEventArgs>? descendantAddedAction)
        where T : IElement
    {
        element.DescendantAddedEvent = new SyncEventCommand<ElementEventArgs>(executeWithFullArgs: descendantAddedAction);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Func<Task>? descendantAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantAddedEvent = new AsyncEventCommand<ElementEventArgs>(execute: descendantAddedAction, runInBackground);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Func<ElementEventArgs, Task>? descendantAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantAddedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithArgs: descendantAddedAction, runInBackground);
        return element;
    }

    public static T OnDescendantAdded<T>(this T element, Func<object?, ElementEventArgs, Task>? descendantAddedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantAddedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithFullArgs: descendantAddedAction, runInBackground);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Action? descendantRemovedAction)
        where T : IElement
    {
        element.DescendantRemovedEvent = new SyncEventCommand<ElementEventArgs>(execute: descendantRemovedAction);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Action<ElementEventArgs>? descendantRemovedAction)
        where T : IElement
    {
        element.DescendantRemovedEvent = new SyncEventCommand<ElementEventArgs>(executeWithArgs: descendantRemovedAction);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Action<object?, ElementEventArgs>? descendantRemovedAction)
        where T : IElement
    {
        element.DescendantRemovedEvent = new SyncEventCommand<ElementEventArgs>(executeWithFullArgs: descendantRemovedAction);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Func<Task>? descendantRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantRemovedEvent = new AsyncEventCommand<ElementEventArgs>(execute: descendantRemovedAction, runInBackground);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Func<ElementEventArgs, Task>? descendantRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantRemovedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithArgs: descendantRemovedAction, runInBackground);
        return element;
    }

    public static T OnDescendantRemoved<T>(this T element, Func<object?, ElementEventArgs, Task>? descendantRemovedAction, bool runInBackground = false)
        where T : IElement
    {
        element.DescendantRemovedEvent = new AsyncEventCommand<ElementEventArgs>(executeWithFullArgs: descendantRemovedAction, runInBackground);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Action? parentChangingAction)
        where T : IElement
    {
        element.ParentChangingEvent = new SyncEventCommand<ParentChangingEventArgs>(execute: parentChangingAction);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Action<ParentChangingEventArgs>? parentChangingAction)
        where T : IElement
    {
        element.ParentChangingEvent = new SyncEventCommand<ParentChangingEventArgs>(executeWithArgs: parentChangingAction);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Action<object?, ParentChangingEventArgs>? parentChangingAction)
        where T : IElement
    {
        element.ParentChangingEvent = new SyncEventCommand<ParentChangingEventArgs>(executeWithFullArgs: parentChangingAction);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Func<Task>? parentChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangingEvent = new AsyncEventCommand<ParentChangingEventArgs>(execute: parentChangingAction, runInBackground);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Func<ParentChangingEventArgs, Task>? parentChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangingEvent = new AsyncEventCommand<ParentChangingEventArgs>(executeWithArgs: parentChangingAction, runInBackground);
        return element;
    }

    public static T OnParentChanging<T>(this T element, Func<object?, ParentChangingEventArgs, Task>? parentChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangingEvent = new AsyncEventCommand<ParentChangingEventArgs>(executeWithFullArgs: parentChangingAction, runInBackground);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Action? parentChangedAction)
        where T : IElement
    {
        element.ParentChangedEvent = new SyncEventCommand<EventArgs>(execute: parentChangedAction);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Action<EventArgs>? parentChangedAction)
        where T : IElement
    {
        element.ParentChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: parentChangedAction);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Action<object?, EventArgs>? parentChangedAction)
        where T : IElement
    {
        element.ParentChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: parentChangedAction);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Func<Task>? parentChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangedEvent = new AsyncEventCommand<EventArgs>(execute: parentChangedAction, runInBackground);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Func<EventArgs, Task>? parentChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: parentChangedAction, runInBackground);
        return element;
    }

    public static T OnParentChanged<T>(this T element, Func<object?, EventArgs, Task>? parentChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.ParentChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: parentChangedAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Action? handlerChangingAction)
        where T : IElement
    {
        element.HandlerChangingEvent = new SyncEventCommand<HandlerChangingEventArgs>(execute: handlerChangingAction);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Action<HandlerChangingEventArgs>? handlerChangingAction)
        where T : IElement
    {
        element.HandlerChangingEvent = new SyncEventCommand<HandlerChangingEventArgs>(executeWithArgs: handlerChangingAction);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Action<object?, HandlerChangingEventArgs>? handlerChangingAction)
        where T : IElement
    {
        element.HandlerChangingEvent = new SyncEventCommand<HandlerChangingEventArgs>(executeWithFullArgs: handlerChangingAction);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Func<Task>? handlerChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangingEvent = new AsyncEventCommand<HandlerChangingEventArgs>(execute: handlerChangingAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Func<HandlerChangingEventArgs, Task>? handlerChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangingEvent = new AsyncEventCommand<HandlerChangingEventArgs>(executeWithArgs: handlerChangingAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanging<T>(this T element, Func<object?, HandlerChangingEventArgs, Task>? handlerChangingAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangingEvent = new AsyncEventCommand<HandlerChangingEventArgs>(executeWithFullArgs: handlerChangingAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Action? handlerChangedAction)
        where T : IElement
    {
        element.HandlerChangedEvent = new SyncEventCommand<EventArgs>(execute: handlerChangedAction);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Action<EventArgs>? handlerChangedAction)
        where T : IElement
    {
        element.HandlerChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: handlerChangedAction);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Action<object?, EventArgs>? handlerChangedAction)
        where T : IElement
    {
        element.HandlerChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: handlerChangedAction);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Func<Task>? handlerChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangedEvent = new AsyncEventCommand<EventArgs>(execute: handlerChangedAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Func<EventArgs, Task>? handlerChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: handlerChangedAction, runInBackground);
        return element;
    }

    public static T OnHandlerChanged<T>(this T element, Func<object?, EventArgs, Task>? handlerChangedAction, bool runInBackground = false)
        where T : IElement
    {
        element.HandlerChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: handlerChangedAction, runInBackground);
        return element;
    }
}

public static partial class ElementStyles
{
    public static Action<IElement>? Default { get; set; }
    public static Dictionary<string, Action<IElement>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IHybridWebView : IView
{
    EventCommand<HybridWebViewRawMessageReceivedEventArgs>? RawMessageReceivedEvent { get; set; }
}

public partial class HybridWebView<T> : View<T>, IHybridWebView where T : Microsoft.Maui.Controls.HybridWebView, new()
{
    public HybridWebView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        HybridWebViewStyles.Default?.Invoke(this);
    }

    EventCommand<HybridWebViewRawMessageReceivedEventArgs>? IHybridWebView.RawMessageReceivedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && HybridWebViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<HybridWebViewRawMessageReceivedEventArgs>? _executingRawMessageReceivedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIHybridWebView = (IHybridWebView)this;
        if (thisAsIHybridWebView.RawMessageReceivedEvent != null)
        {
            nativeControl.RawMessageReceived += NativeControl_RawMessageReceived;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_RawMessageReceived(object? sender, HybridWebViewRawMessageReceivedEventArgs e)
    {
        var thisAsIHybridWebView = (IHybridWebView)this;
        if (_executingRawMessageReceivedEvent == null || _executingRawMessageReceivedEvent.IsCompleted)
        {
            _executingRawMessageReceivedEvent = thisAsIHybridWebView.RawMessageReceivedEvent;
            _executingRawMessageReceivedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.RawMessageReceived -= NativeControl_RawMessageReceived;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is HybridWebView<T> @hybridwebview)
        {
            if (_executingRawMessageReceivedEvent != null && !_executingRawMessageReceivedEvent.IsCompleted)
            {
                @hybridwebview._executingRawMessageReceivedEvent = _executingRawMessageReceivedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class HybridWebView : HybridWebView<Microsoft.Maui.Controls.HybridWebView>
{
    public HybridWebView(Action<Microsoft.Maui.Controls.HybridWebView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public HybridWebView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class HybridWebViewExtensions
{
    public static T DefaultFile<T>(this T hybridWebView, string defaultFile)
        where T : IHybridWebView
    {
        //hybridWebView.DefaultFile = defaultFile;
        hybridWebView.SetProperty(Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty, defaultFile);
        return hybridWebView;
    }

    public static T DefaultFile<T>(this T hybridWebView, Func<string> defaultFileFunc, IComponentWithState? componentWithState = null)
        where T : IHybridWebView
    {
        hybridWebView.SetProperty(Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty, new PropertyValue<string>(defaultFileFunc, componentWithState));
        return hybridWebView;
    }

    public static T HybridRoot<T>(this T hybridWebView, string hybridRoot)
        where T : IHybridWebView
    {
        //hybridWebView.HybridRoot = hybridRoot;
        hybridWebView.SetProperty(Microsoft.Maui.Controls.HybridWebView.HybridRootProperty, hybridRoot);
        return hybridWebView;
    }

    public static T HybridRoot<T>(this T hybridWebView, Func<string> hybridRootFunc, IComponentWithState? componentWithState = null)
        where T : IHybridWebView
    {
        hybridWebView.SetProperty(Microsoft.Maui.Controls.HybridWebView.HybridRootProperty, new PropertyValue<string>(hybridRootFunc, componentWithState));
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Action? rawMessageReceivedAction)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new SyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(execute: rawMessageReceivedAction);
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Action<HybridWebViewRawMessageReceivedEventArgs>? rawMessageReceivedAction)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new SyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(executeWithArgs: rawMessageReceivedAction);
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Action<object?, HybridWebViewRawMessageReceivedEventArgs>? rawMessageReceivedAction)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new SyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(executeWithFullArgs: rawMessageReceivedAction);
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Func<Task>? rawMessageReceivedAction, bool runInBackground = false)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new AsyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(execute: rawMessageReceivedAction, runInBackground);
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Func<HybridWebViewRawMessageReceivedEventArgs, Task>? rawMessageReceivedAction, bool runInBackground = false)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new AsyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(executeWithArgs: rawMessageReceivedAction, runInBackground);
        return hybridWebView;
    }

    public static T OnRawMessageReceived<T>(this T hybridWebView, Func<object?, HybridWebViewRawMessageReceivedEventArgs, Task>? rawMessageReceivedAction, bool runInBackground = false)
        where T : IHybridWebView
    {
        hybridWebView.RawMessageReceivedEvent = new AsyncEventCommand<HybridWebViewRawMessageReceivedEventArgs>(executeWithFullArgs: rawMessageReceivedAction, runInBackground);
        return hybridWebView;
    }
}

public static partial class HybridWebViewStyles
{
    public static Action<IHybridWebView>? Default { get; set; }
    public static Dictionary<string, Action<IHybridWebView>> Themes { get; } = [];
}
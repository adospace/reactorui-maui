// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISwipeItem : IMenuItem
{
    EventCommand<EventArgs>? InvokedEvent { get; set; }
}

public partial class SwipeItem<T> : MenuItem<T>, ISwipeItem where T : Microsoft.Maui.Controls.SwipeItem, new()
{
    public SwipeItem(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SwipeItemStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? ISwipeItem.InvokedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SwipeItemStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingInvokedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsISwipeItem = (ISwipeItem)this;
        if (thisAsISwipeItem.InvokedEvent != null)
        {
            nativeControl.Invoked += NativeControl_Invoked;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Invoked(object? sender, EventArgs e)
    {
        var thisAsISwipeItem = (ISwipeItem)this;
        if (_executingInvokedEvent == null || _executingInvokedEvent.IsCompleted)
        {
            _executingInvokedEvent = thisAsISwipeItem.InvokedEvent;
            _executingInvokedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.Invoked -= NativeControl_Invoked;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SwipeItem<T> @swipeitem)
        {
            if (_executingInvokedEvent != null && !_executingInvokedEvent.IsCompleted)
            {
                @swipeitem._executingInvokedEvent = _executingInvokedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SwipeItem : SwipeItem<Microsoft.Maui.Controls.SwipeItem>
{
    public SwipeItem(Action<Microsoft.Maui.Controls.SwipeItem?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public SwipeItem(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SwipeItemExtensions
{
    public static T BackgroundColor<T>(this T swipeItem, Microsoft.Maui.Graphics.Color backgroundColor)
        where T : ISwipeItem
    {
        //swipeItem.BackgroundColor = backgroundColor;
        swipeItem.SetProperty(Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty, backgroundColor);
        return swipeItem;
    }

    public static T BackgroundColor<T>(this T swipeItem, Func<Microsoft.Maui.Graphics.Color> backgroundColorFunc, IComponentWithState? componentWithState = null)
        where T : ISwipeItem
    {
        swipeItem.SetProperty(Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(backgroundColorFunc, componentWithState));
        return swipeItem;
    }

    public static T IsVisible<T>(this T swipeItem, bool isVisible)
        where T : ISwipeItem
    {
        //swipeItem.IsVisible = isVisible;
        swipeItem.SetProperty(Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty, isVisible);
        return swipeItem;
    }

    public static T IsVisible<T>(this T swipeItem, Func<bool> isVisibleFunc, IComponentWithState? componentWithState = null)
        where T : ISwipeItem
    {
        swipeItem.SetProperty(Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty, new PropertyValue<bool>(isVisibleFunc, componentWithState));
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Action? invokedAction)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new SyncEventCommand<EventArgs>(execute: invokedAction);
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Action<EventArgs>? invokedAction)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: invokedAction);
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Action<object?, EventArgs>? invokedAction)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: invokedAction);
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Func<Task>? invokedAction, bool runInBackground = false)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new AsyncEventCommand<EventArgs>(execute: invokedAction, runInBackground);
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Func<EventArgs, Task>? invokedAction, bool runInBackground = false)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: invokedAction, runInBackground);
        return swipeItem;
    }

    public static T OnInvoked<T>(this T swipeItem, Func<object?, EventArgs, Task>? invokedAction, bool runInBackground = false)
        where T : ISwipeItem
    {
        swipeItem.InvokedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: invokedAction, runInBackground);
        return swipeItem;
    }
}

public static partial class SwipeItemStyles
{
    public static Action<ISwipeItem>? Default { get; set; }
    public static Dictionary<string, Action<ISwipeItem>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IRefreshView : IContentView
{
    EventCommand<EventArgs>? RefreshingEvent { get; set; }
}

public partial class RefreshView<T> : ContentView<T>, IRefreshView where T : Microsoft.Maui.Controls.RefreshView, new()
{
    public RefreshView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        RefreshViewStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IRefreshView.RefreshingEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && RefreshViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingRefreshingEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIRefreshView = (IRefreshView)this;
        if (thisAsIRefreshView.RefreshingEvent != null)
        {
            NativeControl.Refreshing += NativeControl_Refreshing;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Refreshing(object? sender, EventArgs e)
    {
        var thisAsIRefreshView = (IRefreshView)this;
        if (_executingRefreshingEvent == null || _executingRefreshingEvent.IsCompleted)
        {
            _executingRefreshingEvent = thisAsIRefreshView.RefreshingEvent;
            _executingRefreshingEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Refreshing -= NativeControl_Refreshing;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is RefreshView<T> @refreshview)
        {
            if (_executingRefreshingEvent != null && !_executingRefreshingEvent.IsCompleted)
            {
                @refreshview._executingRefreshingEvent = _executingRefreshingEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class RefreshView : RefreshView<Microsoft.Maui.Controls.RefreshView>
{
    public RefreshView(Action<Microsoft.Maui.Controls.RefreshView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public RefreshView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class RefreshViewExtensions
{
    public static T IsRefreshing<T>(this T refreshView, bool isRefreshing)
        where T : IRefreshView
    {
        //refreshView.IsRefreshing = isRefreshing;
        refreshView.SetProperty(Microsoft.Maui.Controls.RefreshView.IsRefreshingProperty, isRefreshing);
        return refreshView;
    }

    public static T IsRefreshing<T>(this T refreshView, Func<bool> isRefreshingFunc, IComponentWithState? componentWithState = null)
        where T : IRefreshView
    {
        refreshView.SetProperty(Microsoft.Maui.Controls.RefreshView.IsRefreshingProperty, new PropertyValue<bool>(isRefreshingFunc, componentWithState));
        return refreshView;
    }

    public static T RefreshColor<T>(this T refreshView, Microsoft.Maui.Graphics.Color refreshColor)
        where T : IRefreshView
    {
        //refreshView.RefreshColor = refreshColor;
        refreshView.SetProperty(Microsoft.Maui.Controls.RefreshView.RefreshColorProperty, refreshColor);
        return refreshView;
    }

    public static T RefreshColor<T>(this T refreshView, Func<Microsoft.Maui.Graphics.Color> refreshColorFunc, IComponentWithState? componentWithState = null)
        where T : IRefreshView
    {
        refreshView.SetProperty(Microsoft.Maui.Controls.RefreshView.RefreshColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(refreshColorFunc, componentWithState));
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Action? refreshingAction)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new SyncEventCommand<EventArgs>(execute: refreshingAction);
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Action<EventArgs>? refreshingAction)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new SyncEventCommand<EventArgs>(executeWithArgs: refreshingAction);
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Action<object?, EventArgs>? refreshingAction)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: refreshingAction);
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Func<Task>? refreshingAction, bool runInBackground = false)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new AsyncEventCommand<EventArgs>(execute: refreshingAction, runInBackground);
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Func<EventArgs, Task>? refreshingAction, bool runInBackground = false)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: refreshingAction, runInBackground);
        return refreshView;
    }

    public static T OnRefreshing<T>(this T refreshView, Func<object?, EventArgs, Task>? refreshingAction, bool runInBackground = false)
        where T : IRefreshView
    {
        refreshView.RefreshingEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: refreshingAction, runInBackground);
        return refreshView;
    }
}

public static partial class RefreshViewStyles
{
    public static Action<IRefreshView>? Default { get; set; }
    public static Dictionary<string, Action<IRefreshView>> Themes { get; } = [];
}
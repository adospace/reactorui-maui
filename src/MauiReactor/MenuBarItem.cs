// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IMenuBarItem : IBaseMenuItem
{
}

public partial class MenuBarItem<T> : BaseMenuItem<T>, IMenuBarItem where T : Microsoft.Maui.Controls.MenuBarItem, new()
{
    public MenuBarItem(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        MenuBarItemStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && MenuBarItemStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class MenuBarItem : MenuBarItem<Microsoft.Maui.Controls.MenuBarItem>
{
    public MenuBarItem(Action<Microsoft.Maui.Controls.MenuBarItem?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public MenuBarItem(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class MenuBarItemExtensions
{
    public static T Text<T>(this T menuBarItem, string text)
        where T : IMenuBarItem
    {
        //menuBarItem.Text = text;
        menuBarItem.SetProperty(Microsoft.Maui.Controls.MenuBarItem.TextProperty, text);
        return menuBarItem;
    }

    public static T Text<T>(this T menuBarItem, Func<string> textFunc, IComponentWithState? componentWithState = null)
        where T : IMenuBarItem
    {
        menuBarItem.SetProperty(Microsoft.Maui.Controls.MenuBarItem.TextProperty, new PropertyValue<string>(textFunc, componentWithState));
        return menuBarItem;
    }

    public static T IsEnabled<T>(this T menuBarItem, bool isEnabled)
        where T : IMenuBarItem
    {
        //menuBarItem.IsEnabled = isEnabled;
        menuBarItem.SetProperty(Microsoft.Maui.Controls.MenuBarItem.IsEnabledProperty, isEnabled);
        return menuBarItem;
    }

    public static T IsEnabled<T>(this T menuBarItem, Func<bool> isEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IMenuBarItem
    {
        menuBarItem.SetProperty(Microsoft.Maui.Controls.MenuBarItem.IsEnabledProperty, new PropertyValue<bool>(isEnabledFunc, componentWithState));
        return menuBarItem;
    }
}

public static partial class MenuBarItemStyles
{
    public static Action<IMenuBarItem>? Default { get; set; }
    public static Dictionary<string, Action<IMenuBarItem>> Themes { get; } = [];
}
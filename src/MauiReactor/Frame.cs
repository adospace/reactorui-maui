// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#pragma warning disable CS0618 // Type or member is obsolete


#nullable enable
namespace MauiReactor;
public partial interface IFrame : IContentView
{
}

public partial class Frame<T> : ContentView<T>, IFrame where T : Microsoft.Maui.Controls.Frame, new()
{
    public Frame(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        FrameStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && FrameStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Frame : Frame<Microsoft.Maui.Controls.Frame>
{
    public Frame(Action<Microsoft.Maui.Controls.Frame?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Frame(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class FrameExtensions
{
    public static T BorderColor<T>(this T frame, Microsoft.Maui.Graphics.Color borderColor)
        where T : IFrame
    {
        //frame.BorderColor = borderColor;
        frame.SetProperty(Microsoft.Maui.Controls.Frame.BorderColorProperty, borderColor);
        return frame;
    }

    public static T BorderColor<T>(this T frame, Func<Microsoft.Maui.Graphics.Color> borderColorFunc, IComponentWithState? componentWithState = null)
        where T : IFrame
    {
        frame.SetProperty(Microsoft.Maui.Controls.Frame.BorderColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(borderColorFunc, componentWithState));
        return frame;
    }

    public static T HasShadow<T>(this T frame, bool hasShadow)
        where T : IFrame
    {
        //frame.HasShadow = hasShadow;
        frame.SetProperty(Microsoft.Maui.Controls.Frame.HasShadowProperty, hasShadow);
        return frame;
    }

    public static T HasShadow<T>(this T frame, Func<bool> hasShadowFunc, IComponentWithState? componentWithState = null)
        where T : IFrame
    {
        frame.SetProperty(Microsoft.Maui.Controls.Frame.HasShadowProperty, new PropertyValue<bool>(hasShadowFunc, componentWithState));
        return frame;
    }

    public static T CornerRadius<T>(this T frame, float cornerRadius)
        where T : IFrame
    {
        //frame.CornerRadius = cornerRadius;
        frame.SetProperty(Microsoft.Maui.Controls.Frame.CornerRadiusProperty, cornerRadius);
        return frame;
    }

    public static T CornerRadius<T>(this T frame, Func<float> cornerRadiusFunc, IComponentWithState? componentWithState = null)
        where T : IFrame
    {
        frame.SetProperty(Microsoft.Maui.Controls.Frame.CornerRadiusProperty, new PropertyValue<float>(cornerRadiusFunc, componentWithState));
        return frame;
    }
}

public static partial class FrameStyles
{
    public static Action<IFrame>? Default { get; set; }
    public static Dictionary<string, Action<IFrame>> Themes { get; } = [];
}

#pragma warning disable CS0618 // Type or member is obsolete

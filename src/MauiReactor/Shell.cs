// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IShell : IPage
{
    EventCommand<ShellNavigatedEventArgs>? NavigatedEvent { get; set; }

    EventCommand<ShellNavigatingEventArgs>? NavigatingEvent { get; set; }
}

public partial class Shell<T> : Page<T>, IShell where T : Microsoft.Maui.Controls.Shell, new()
{
    public Shell(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ShellStyles.Default?.Invoke(this);
    }

    EventCommand<ShellNavigatedEventArgs>? IShell.NavigatedEvent { get; set; }

    EventCommand<ShellNavigatingEventArgs>? IShell.NavigatingEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ShellStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<ShellNavigatedEventArgs>? _executingNavigatedEvent;
    private EventCommand<ShellNavigatingEventArgs>? _executingNavigatingEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIShell = (IShell)this;
        if (thisAsIShell.NavigatedEvent != null)
        {
            nativeControl.Navigated += NativeControl_Navigated;
        }

        if (thisAsIShell.NavigatingEvent != null)
        {
            nativeControl.Navigating += NativeControl_Navigating;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Navigated(object? sender, ShellNavigatedEventArgs e)
    {
        var thisAsIShell = (IShell)this;
        if (_executingNavigatedEvent == null || _executingNavigatedEvent.IsCompleted)
        {
            _executingNavigatedEvent = thisAsIShell.NavigatedEvent;
            _executingNavigatedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Navigating(object? sender, ShellNavigatingEventArgs e)
    {
        var thisAsIShell = (IShell)this;
        if (_executingNavigatingEvent == null || _executingNavigatingEvent.IsCompleted)
        {
            _executingNavigatingEvent = thisAsIShell.NavigatingEvent;
            _executingNavigatingEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.Navigated -= NativeControl_Navigated;
            nativeControl.Navigating -= NativeControl_Navigating;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Shell<T> @shell)
        {
            if (_executingNavigatedEvent != null && !_executingNavigatedEvent.IsCompleted)
            {
                @shell._executingNavigatedEvent = _executingNavigatedEvent;
            }

            if (_executingNavigatingEvent != null && !_executingNavigatingEvent.IsCompleted)
            {
                @shell._executingNavigatingEvent = _executingNavigatingEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Shell : Shell<Microsoft.Maui.Controls.Shell>
{
    public Shell(Action<Microsoft.Maui.Controls.Shell?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Shell(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class ShellExtensions
{
    public static T FlyoutBehavior<T>(this T shell, Microsoft.Maui.FlyoutBehavior flyoutBehavior)
        where T : IShell
    {
        //shell.FlyoutBehavior = flyoutBehavior;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, flyoutBehavior);
        return shell;
    }

    public static T FlyoutBehavior<T>(this T shell, Func<Microsoft.Maui.FlyoutBehavior> flyoutBehaviorFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, new PropertyValue<Microsoft.Maui.FlyoutBehavior>(flyoutBehaviorFunc, componentWithState));
        return shell;
    }

    public static T FlyoutBackdrop<T>(this T shell, Microsoft.Maui.Controls.Brush flyoutBackdrop)
        where T : IShell
    {
        //shell.FlyoutBackdrop = flyoutBackdrop;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, flyoutBackdrop);
        return shell;
    }

    public static T FlyoutBackdrop<T>(this T shell, Func<Microsoft.Maui.Controls.Brush> flyoutBackdropFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(flyoutBackdropFunc, componentWithState));
        return shell;
    }

    public static T FlyoutWidth<T>(this T shell, double flyoutWidth, RxDoubleAnimation? customAnimation = null)
        where T : IShell
    {
        //shell.FlyoutWidth = flyoutWidth;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, flyoutWidth);
        shell.AppendAnimatable(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, customAnimation ?? new RxDoubleAnimation(flyoutWidth));
        return shell;
    }

    public static T FlyoutWidth<T>(this T shell, Func<double> flyoutWidthFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, new PropertyValue<double>(flyoutWidthFunc, componentWithState));
        return shell;
    }

    public static T FlyoutHeight<T>(this T shell, double flyoutHeight, RxDoubleAnimation? customAnimation = null)
        where T : IShell
    {
        //shell.FlyoutHeight = flyoutHeight;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, flyoutHeight);
        shell.AppendAnimatable(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, customAnimation ?? new RxDoubleAnimation(flyoutHeight));
        return shell;
    }

    public static T FlyoutHeight<T>(this T shell, Func<double> flyoutHeightFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, new PropertyValue<double>(flyoutHeightFunc, componentWithState));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Microsoft.Maui.Controls.ImageSource flyoutBackgroundImage)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = flyoutBackgroundImage;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, flyoutBackgroundImage);
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Func<Microsoft.Maui.Controls.ImageSource> flyoutBackgroundImageFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(flyoutBackgroundImageFunc, componentWithState));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, string file)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Func<string> action)
        where T : IShell
    {
        /*shell.FlyoutBackgroundImage = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, string resourceName, Assembly sourceAssembly)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Uri imageUri)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, newValue);
        return shell;
    }

    public static T FlyoutBackgroundImage<T>(this T shell, Func<Stream> imageStream)
        where T : IShell
    {
        //shell.FlyoutBackgroundImage = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return shell;
    }

    public static T FlyoutBackgroundImageAspect<T>(this T shell, Microsoft.Maui.Aspect flyoutBackgroundImageAspect)
        where T : IShell
    {
        //shell.FlyoutBackgroundImageAspect = flyoutBackgroundImageAspect;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, flyoutBackgroundImageAspect);
        return shell;
    }

    public static T FlyoutBackgroundImageAspect<T>(this T shell, Func<Microsoft.Maui.Aspect> flyoutBackgroundImageAspectFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, new PropertyValue<Microsoft.Maui.Aspect>(flyoutBackgroundImageAspectFunc, componentWithState));
        return shell;
    }

    public static T FlyoutBackgroundColor<T>(this T shell, Microsoft.Maui.Graphics.Color flyoutBackgroundColor)
        where T : IShell
    {
        //shell.FlyoutBackgroundColor = flyoutBackgroundColor;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, flyoutBackgroundColor);
        return shell;
    }

    public static T FlyoutBackgroundColor<T>(this T shell, Func<Microsoft.Maui.Graphics.Color> flyoutBackgroundColorFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(flyoutBackgroundColorFunc, componentWithState));
        return shell;
    }

    public static T FlyoutBackground<T>(this T shell, Microsoft.Maui.Controls.Brush flyoutBackground)
        where T : IShell
    {
        //shell.FlyoutBackground = flyoutBackground;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, flyoutBackground);
        return shell;
    }

    public static T FlyoutBackground<T>(this T shell, Func<Microsoft.Maui.Controls.Brush> flyoutBackgroundFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(flyoutBackgroundFunc, componentWithState));
        return shell;
    }

    public static T FlyoutHeaderBehavior<T>(this T shell, Microsoft.Maui.Controls.FlyoutHeaderBehavior flyoutHeaderBehavior)
        where T : IShell
    {
        //shell.FlyoutHeaderBehavior = flyoutHeaderBehavior;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, flyoutHeaderBehavior);
        return shell;
    }

    public static T FlyoutHeaderBehavior<T>(this T shell, Func<Microsoft.Maui.Controls.FlyoutHeaderBehavior> flyoutHeaderBehaviorFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, new PropertyValue<Microsoft.Maui.Controls.FlyoutHeaderBehavior>(flyoutHeaderBehaviorFunc, componentWithState));
        return shell;
    }

    public static T FlyoutIsPresented<T>(this T shell, bool flyoutIsPresented)
        where T : IShell
    {
        //shell.FlyoutIsPresented = flyoutIsPresented;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, flyoutIsPresented);
        return shell;
    }

    public static T FlyoutIsPresented<T>(this T shell, Func<bool> flyoutIsPresentedFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, new PropertyValue<bool>(flyoutIsPresentedFunc, componentWithState));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Microsoft.Maui.Controls.ImageSource flyoutIcon)
        where T : IShell
    {
        //shell.FlyoutIcon = flyoutIcon;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, flyoutIcon);
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Func<Microsoft.Maui.Controls.ImageSource> flyoutIconFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(flyoutIconFunc, componentWithState));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, string file)
        where T : IShell
    {
        //shell.FlyoutIcon = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Func<string> action)
        where T : IShell
    {
        /*shell.FlyoutIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, string resourceName, Assembly sourceAssembly)
        where T : IShell
    {
        //shell.FlyoutIcon = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Uri imageUri)
        where T : IShell
    {
        //shell.FlyoutIcon = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IShell
    {
        //shell.FlyoutIcon = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, newValue);
        return shell;
    }

    public static T FlyoutIcon<T>(this T shell, Func<Stream> imageStream)
        where T : IShell
    {
        //shell.FlyoutIcon = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return shell;
    }

    public static T FlyoutVerticalScrollMode<T>(this T shell, Microsoft.Maui.Controls.ScrollMode flyoutVerticalScrollMode)
        where T : IShell
    {
        //shell.FlyoutVerticalScrollMode = flyoutVerticalScrollMode;
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, flyoutVerticalScrollMode);
        return shell;
    }

    public static T FlyoutVerticalScrollMode<T>(this T shell, Func<Microsoft.Maui.Controls.ScrollMode> flyoutVerticalScrollModeFunc, IComponentWithState? componentWithState = null)
        where T : IShell
    {
        shell.SetProperty(Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, new PropertyValue<Microsoft.Maui.Controls.ScrollMode>(flyoutVerticalScrollModeFunc, componentWithState));
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Action? navigatedAction)
        where T : IShell
    {
        shell.NavigatedEvent = new SyncEventCommand<ShellNavigatedEventArgs>(execute: navigatedAction);
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Action<ShellNavigatedEventArgs>? navigatedAction)
        where T : IShell
    {
        shell.NavigatedEvent = new SyncEventCommand<ShellNavigatedEventArgs>(executeWithArgs: navigatedAction);
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Action<object?, ShellNavigatedEventArgs>? navigatedAction)
        where T : IShell
    {
        shell.NavigatedEvent = new SyncEventCommand<ShellNavigatedEventArgs>(executeWithFullArgs: navigatedAction);
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Func<Task>? navigatedAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatedEvent = new AsyncEventCommand<ShellNavigatedEventArgs>(execute: navigatedAction, runInBackground);
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Func<ShellNavigatedEventArgs, Task>? navigatedAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatedEvent = new AsyncEventCommand<ShellNavigatedEventArgs>(executeWithArgs: navigatedAction, runInBackground);
        return shell;
    }

    public static T OnNavigated<T>(this T shell, Func<object?, ShellNavigatedEventArgs, Task>? navigatedAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatedEvent = new AsyncEventCommand<ShellNavigatedEventArgs>(executeWithFullArgs: navigatedAction, runInBackground);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Action? navigatingAction)
        where T : IShell
    {
        shell.NavigatingEvent = new SyncEventCommand<ShellNavigatingEventArgs>(execute: navigatingAction);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Action<ShellNavigatingEventArgs>? navigatingAction)
        where T : IShell
    {
        shell.NavigatingEvent = new SyncEventCommand<ShellNavigatingEventArgs>(executeWithArgs: navigatingAction);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Action<object?, ShellNavigatingEventArgs>? navigatingAction)
        where T : IShell
    {
        shell.NavigatingEvent = new SyncEventCommand<ShellNavigatingEventArgs>(executeWithFullArgs: navigatingAction);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Func<Task>? navigatingAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatingEvent = new AsyncEventCommand<ShellNavigatingEventArgs>(execute: navigatingAction, runInBackground);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Func<ShellNavigatingEventArgs, Task>? navigatingAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatingEvent = new AsyncEventCommand<ShellNavigatingEventArgs>(executeWithArgs: navigatingAction, runInBackground);
        return shell;
    }

    public static T OnNavigating<T>(this T shell, Func<object?, ShellNavigatingEventArgs, Task>? navigatingAction, bool runInBackground = false)
        where T : IShell
    {
        shell.NavigatingEvent = new AsyncEventCommand<ShellNavigatingEventArgs>(executeWithFullArgs: navigatingAction, runInBackground);
        return shell;
    }
}

public static partial class ShellStyles
{
    public static Action<IShell>? Default { get; set; }
    public static Dictionary<string, Action<IShell>> Themes { get; } = [];
}
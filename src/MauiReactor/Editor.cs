// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IEditor : IInputView
{
    EventCommand<EventArgs>? CompletedEvent { get; set; }
}

public partial class Editor<T> : InputView<T>, IEditor where T : Microsoft.Maui.Controls.Editor, new()
{
    public Editor(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        EditorStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IEditor.CompletedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && EditorStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingCompletedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIEditor = (IEditor)this;
        if (thisAsIEditor.CompletedEvent != null)
        {
            NativeControl.Completed += NativeControl_Completed;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Completed(object? sender, EventArgs e)
    {
        var thisAsIEditor = (IEditor)this;
        if (_executingCompletedEvent == null || _executingCompletedEvent.IsCompleted)
        {
            _executingCompletedEvent = thisAsIEditor.CompletedEvent;
            _executingCompletedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Completed -= NativeControl_Completed;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Editor<T> @editor)
        {
            if (_executingCompletedEvent != null && !_executingCompletedEvent.IsCompleted)
            {
                @editor._executingCompletedEvent = _executingCompletedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Editor : Editor<Microsoft.Maui.Controls.Editor>
{
    public Editor(Action<Microsoft.Maui.Controls.Editor?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Editor(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class EditorExtensions
{
    public static T AutoSize<T>(this T editor, Microsoft.Maui.Controls.EditorAutoSizeOption autoSize)
        where T : IEditor
    {
        //editor.AutoSize = autoSize;
        editor.SetProperty(Microsoft.Maui.Controls.Editor.AutoSizeProperty, autoSize);
        return editor;
    }

    public static T AutoSize<T>(this T editor, Func<Microsoft.Maui.Controls.EditorAutoSizeOption> autoSizeFunc, IComponentWithState? componentWithState = null)
        where T : IEditor
    {
        editor.SetProperty(Microsoft.Maui.Controls.Editor.AutoSizeProperty, new PropertyValue<Microsoft.Maui.Controls.EditorAutoSizeOption>(autoSizeFunc, componentWithState));
        return editor;
    }

    public static T HorizontalTextAlignment<T>(this T editor, Microsoft.Maui.TextAlignment horizontalTextAlignment)
        where T : IEditor
    {
        //editor.HorizontalTextAlignment = horizontalTextAlignment;
        editor.SetProperty(Microsoft.Maui.Controls.Editor.HorizontalTextAlignmentProperty, horizontalTextAlignment);
        return editor;
    }

    public static T HorizontalTextAlignment<T>(this T editor, Func<Microsoft.Maui.TextAlignment> horizontalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : IEditor
    {
        editor.SetProperty(Microsoft.Maui.Controls.Editor.HorizontalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc, componentWithState));
        return editor;
    }

    public static T VerticalTextAlignment<T>(this T editor, Microsoft.Maui.TextAlignment verticalTextAlignment)
        where T : IEditor
    {
        //editor.VerticalTextAlignment = verticalTextAlignment;
        editor.SetProperty(Microsoft.Maui.Controls.Editor.VerticalTextAlignmentProperty, verticalTextAlignment);
        return editor;
    }

    public static T VerticalTextAlignment<T>(this T editor, Func<Microsoft.Maui.TextAlignment> verticalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : IEditor
    {
        editor.SetProperty(Microsoft.Maui.Controls.Editor.VerticalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc, componentWithState));
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Action? completedAction)
        where T : IEditor
    {
        editor.CompletedEvent = new SyncEventCommand<EventArgs>(execute: completedAction);
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Action<EventArgs>? completedAction)
        where T : IEditor
    {
        editor.CompletedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: completedAction);
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Action<object?, EventArgs>? completedAction)
        where T : IEditor
    {
        editor.CompletedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: completedAction);
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Func<Task>? completedAction, bool runInBackground = false)
        where T : IEditor
    {
        editor.CompletedEvent = new AsyncEventCommand<EventArgs>(execute: completedAction, runInBackground);
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Func<EventArgs, Task>? completedAction, bool runInBackground = false)
        where T : IEditor
    {
        editor.CompletedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: completedAction, runInBackground);
        return editor;
    }

    public static T OnCompleted<T>(this T editor, Func<object?, EventArgs, Task>? completedAction, bool runInBackground = false)
        where T : IEditor
    {
        editor.CompletedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: completedAction, runInBackground);
        return editor;
    }
}

public static partial class EditorStyles
{
    public static Action<IEditor>? Default { get; set; }
    public static Dictionary<string, Action<IEditor>> Themes { get; } = [];
}
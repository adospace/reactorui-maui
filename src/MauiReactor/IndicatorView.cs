// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor
{
    public partial interface IIndicatorView : ITemplatedView
    {
        PropertyValue<Microsoft.Maui.Controls.IndicatorShape>? IndicatorsShape { get; set; }

        PropertyValue<int>? Position { get; set; }

        PropertyValue<int>? Count { get; set; }

        PropertyValue<int>? MaximumVisible { get; set; }

        PropertyValue<bool>? HideSingle { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Color>? IndicatorColor { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Color>? SelectedIndicatorColor { get; set; }

        PropertyValue<double>? IndicatorSize { get; set; }
    }

    public partial class IndicatorView<T> : TemplatedView<T>, IIndicatorView where T : Microsoft.Maui.Controls.IndicatorView, new()
    {
        public IndicatorView()
        {
        }

        public IndicatorView(Action<T?> componentRefAction) : base(componentRefAction)
        {
        }

        PropertyValue<Microsoft.Maui.Controls.IndicatorShape>? IIndicatorView.IndicatorsShape { get; set; }

        PropertyValue<int>? IIndicatorView.Position { get; set; }

        PropertyValue<int>? IIndicatorView.Count { get; set; }

        PropertyValue<int>? IIndicatorView.MaximumVisible { get; set; }

        PropertyValue<bool>? IIndicatorView.HideSingle { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Color>? IIndicatorView.IndicatorColor { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Color>? IIndicatorView.SelectedIndicatorColor { get; set; }

        PropertyValue<double>? IIndicatorView.IndicatorSize { get; set; }

        protected override void OnUpdate()
        {
            OnBeginUpdate();
            Validate.EnsureNotNull(NativeControl);
            var thisAsIIndicatorView = (IIndicatorView)this;
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, thisAsIIndicatorView.IndicatorsShape);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.PositionProperty, thisAsIIndicatorView.Position);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.CountProperty, thisAsIIndicatorView.Count);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, thisAsIIndicatorView.MaximumVisible);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, thisAsIIndicatorView.HideSingle);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, thisAsIIndicatorView.IndicatorColor);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, thisAsIIndicatorView.SelectedIndicatorColor);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, thisAsIIndicatorView.IndicatorSize);
            base.OnUpdate();
            OnEndUpdate();
        }

        protected override void OnAnimate()
        {
            //Validate.EnsureNotNull(NativeControl);
            var thisAsIIndicatorView = (IIndicatorView)this;
            AnimateProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, thisAsIIndicatorView.IndicatorSize);
            base.OnAnimate();
        }

        partial void OnBeginUpdate();
        partial void OnEndUpdate();
    }

    public partial class IndicatorView : IndicatorView<Microsoft.Maui.Controls.IndicatorView>
    {
        public IndicatorView()
        {
        }

        public IndicatorView(Action<Microsoft.Maui.Controls.IndicatorView?> componentRefAction) : base(componentRefAction)
        {
        }
    }

    public static partial class IndicatorViewExtensions
    {
        public static T IndicatorsShape<T>(this T indicatorView, Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
            where T : IIndicatorView
        {
            indicatorView.IndicatorsShape = new PropertyValue<Microsoft.Maui.Controls.IndicatorShape>(indicatorsShape);
            return indicatorView;
        }

        public static T IndicatorsShape<T>(this T indicatorView, Func<Microsoft.Maui.Controls.IndicatorShape> indicatorsShapeFunc)
            where T : IIndicatorView
        {
            indicatorView.IndicatorsShape = new PropertyValue<Microsoft.Maui.Controls.IndicatorShape>(indicatorsShapeFunc);
            return indicatorView;
        }

        public static T Position<T>(this T indicatorView, int position)
            where T : IIndicatorView
        {
            indicatorView.Position = new PropertyValue<int>(position);
            return indicatorView;
        }

        public static T Position<T>(this T indicatorView, Func<int> positionFunc)
            where T : IIndicatorView
        {
            indicatorView.Position = new PropertyValue<int>(positionFunc);
            return indicatorView;
        }

        public static T Count<T>(this T indicatorView, int count)
            where T : IIndicatorView
        {
            indicatorView.Count = new PropertyValue<int>(count);
            return indicatorView;
        }

        public static T Count<T>(this T indicatorView, Func<int> countFunc)
            where T : IIndicatorView
        {
            indicatorView.Count = new PropertyValue<int>(countFunc);
            return indicatorView;
        }

        public static T MaximumVisible<T>(this T indicatorView, int maximumVisible)
            where T : IIndicatorView
        {
            indicatorView.MaximumVisible = new PropertyValue<int>(maximumVisible);
            return indicatorView;
        }

        public static T MaximumVisible<T>(this T indicatorView, Func<int> maximumVisibleFunc)
            where T : IIndicatorView
        {
            indicatorView.MaximumVisible = new PropertyValue<int>(maximumVisibleFunc);
            return indicatorView;
        }

        public static T HideSingle<T>(this T indicatorView, bool hideSingle)
            where T : IIndicatorView
        {
            indicatorView.HideSingle = new PropertyValue<bool>(hideSingle);
            return indicatorView;
        }

        public static T HideSingle<T>(this T indicatorView, Func<bool> hideSingleFunc)
            where T : IIndicatorView
        {
            indicatorView.HideSingle = new PropertyValue<bool>(hideSingleFunc);
            return indicatorView;
        }

        public static T IndicatorColor<T>(this T indicatorView, Microsoft.Maui.Graphics.Color indicatorColor)
            where T : IIndicatorView
        {
            indicatorView.IndicatorColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(indicatorColor);
            return indicatorView;
        }

        public static T IndicatorColor<T>(this T indicatorView, Func<Microsoft.Maui.Graphics.Color> indicatorColorFunc)
            where T : IIndicatorView
        {
            indicatorView.IndicatorColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(indicatorColorFunc);
            return indicatorView;
        }

        public static T SelectedIndicatorColor<T>(this T indicatorView, Microsoft.Maui.Graphics.Color selectedIndicatorColor)
            where T : IIndicatorView
        {
            indicatorView.SelectedIndicatorColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(selectedIndicatorColor);
            return indicatorView;
        }

        public static T SelectedIndicatorColor<T>(this T indicatorView, Func<Microsoft.Maui.Graphics.Color> selectedIndicatorColorFunc)
            where T : IIndicatorView
        {
            indicatorView.SelectedIndicatorColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(selectedIndicatorColorFunc);
            return indicatorView;
        }

        public static T IndicatorSize<T>(this T indicatorView, double indicatorSize, RxDoubleAnimation? customAnimation = null)
            where T : IIndicatorView
        {
            indicatorView.IndicatorSize = new PropertyValue<double>(indicatorSize);
            indicatorView.AppendAnimatable(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, customAnimation ?? new RxDoubleAnimation(indicatorSize), v => indicatorView.IndicatorSize = new PropertyValue<double>(v.CurrentValue()));
            return indicatorView;
        }

        public static T IndicatorSize<T>(this T indicatorView, Func<double> indicatorSizeFunc)
            where T : IIndicatorView
        {
            indicatorView.IndicatorSize = new PropertyValue<double>(indicatorSizeFunc);
            return indicatorView;
        }
    }
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IIndicatorView : ITemplatedView
{
}

public partial class IndicatorView<T> : TemplatedView<T>, IIndicatorView where T : Microsoft.Maui.Controls.IndicatorView, new()
{
    public IndicatorView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        IndicatorViewStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && IndicatorViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class IndicatorView : IndicatorView<Microsoft.Maui.Controls.IndicatorView>
{
    public IndicatorView(Action<Microsoft.Maui.Controls.IndicatorView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public IndicatorView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class IndicatorViewExtensions
{
    public static T IndicatorsShape<T>(this T indicatorView, Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
        where T : IIndicatorView
    {
        //indicatorView.IndicatorsShape = indicatorsShape;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, indicatorsShape);
        return indicatorView;
    }

    public static T IndicatorsShape<T>(this T indicatorView, Func<Microsoft.Maui.Controls.IndicatorShape> indicatorsShapeFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, new PropertyValue<Microsoft.Maui.Controls.IndicatorShape>(indicatorsShapeFunc, componentWithState));
        return indicatorView;
    }

    public static T Position<T>(this T indicatorView, int position)
        where T : IIndicatorView
    {
        //indicatorView.Position = position;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.PositionProperty, position);
        return indicatorView;
    }

    public static T Position<T>(this T indicatorView, Func<int> positionFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.PositionProperty, new PropertyValue<int>(positionFunc, componentWithState));
        return indicatorView;
    }

    public static T Count<T>(this T indicatorView, int count)
        where T : IIndicatorView
    {
        //indicatorView.Count = count;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.CountProperty, count);
        return indicatorView;
    }

    public static T Count<T>(this T indicatorView, Func<int> countFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.CountProperty, new PropertyValue<int>(countFunc, componentWithState));
        return indicatorView;
    }

    public static T MaximumVisible<T>(this T indicatorView, int maximumVisible)
        where T : IIndicatorView
    {
        //indicatorView.MaximumVisible = maximumVisible;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, maximumVisible);
        return indicatorView;
    }

    public static T MaximumVisible<T>(this T indicatorView, Func<int> maximumVisibleFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, new PropertyValue<int>(maximumVisibleFunc, componentWithState));
        return indicatorView;
    }

    public static T HideSingle<T>(this T indicatorView, bool hideSingle)
        where T : IIndicatorView
    {
        //indicatorView.HideSingle = hideSingle;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, hideSingle);
        return indicatorView;
    }

    public static T HideSingle<T>(this T indicatorView, Func<bool> hideSingleFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, new PropertyValue<bool>(hideSingleFunc, componentWithState));
        return indicatorView;
    }

    public static T IndicatorColor<T>(this T indicatorView, Microsoft.Maui.Graphics.Color indicatorColor)
        where T : IIndicatorView
    {
        //indicatorView.IndicatorColor = indicatorColor;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, indicatorColor);
        return indicatorView;
    }

    public static T IndicatorColor<T>(this T indicatorView, Func<Microsoft.Maui.Graphics.Color> indicatorColorFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(indicatorColorFunc, componentWithState));
        return indicatorView;
    }

    public static T SelectedIndicatorColor<T>(this T indicatorView, Microsoft.Maui.Graphics.Color selectedIndicatorColor)
        where T : IIndicatorView
    {
        //indicatorView.SelectedIndicatorColor = selectedIndicatorColor;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, selectedIndicatorColor);
        return indicatorView;
    }

    public static T SelectedIndicatorColor<T>(this T indicatorView, Func<Microsoft.Maui.Graphics.Color> selectedIndicatorColorFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(selectedIndicatorColorFunc, componentWithState));
        return indicatorView;
    }

    public static T IndicatorSize<T>(this T indicatorView, double indicatorSize, RxDoubleAnimation? customAnimation = null)
        where T : IIndicatorView
    {
        //indicatorView.IndicatorSize = indicatorSize;
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, indicatorSize);
        indicatorView.AppendAnimatable(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, customAnimation ?? new RxDoubleAnimation(indicatorSize));
        return indicatorView;
    }

    public static T IndicatorSize<T>(this T indicatorView, Func<double> indicatorSizeFunc, IComponentWithState? componentWithState = null)
        where T : IIndicatorView
    {
        indicatorView.SetProperty(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, new PropertyValue<double>(indicatorSizeFunc, componentWithState));
        return indicatorView;
    }
}

public static partial class IndicatorViewStyles
{
    public static Action<IIndicatorView>? Default { get; set; }
    public static Dictionary<string, Action<IIndicatorView>> Themes { get; } = [];
}
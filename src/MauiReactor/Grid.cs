// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IGrid : ILayout
{
}

public partial class Grid<T> : Layout<T>, IGrid where T : Microsoft.Maui.Controls.Grid, new()
{
    public Grid(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        GridStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && GridStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Grid : Grid<Microsoft.Maui.Controls.Grid>
{
    public Grid(Action<Microsoft.Maui.Controls.Grid?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Grid(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class GridExtensions
{
    public static T RowSpacing<T>(this T grid, double rowSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGrid
    {
        //grid.RowSpacing = rowSpacing;
        grid.SetProperty(Microsoft.Maui.Controls.Grid.RowSpacingProperty, rowSpacing);
        grid.AppendAnimatable(Microsoft.Maui.Controls.Grid.RowSpacingProperty, customAnimation ?? new RxDoubleAnimation(rowSpacing));
        return grid;
    }

    public static T RowSpacing<T>(this T grid, Func<double> rowSpacingFunc, IComponentWithState? componentWithState = null)
        where T : IGrid
    {
        grid.SetProperty(Microsoft.Maui.Controls.Grid.RowSpacingProperty, new PropertyValue<double>(rowSpacingFunc, componentWithState));
        return grid;
    }

    public static T ColumnSpacing<T>(this T grid, double columnSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGrid
    {
        //grid.ColumnSpacing = columnSpacing;
        grid.SetProperty(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, columnSpacing);
        grid.AppendAnimatable(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, customAnimation ?? new RxDoubleAnimation(columnSpacing));
        return grid;
    }

    public static T ColumnSpacing<T>(this T grid, Func<double> columnSpacingFunc, IComponentWithState? componentWithState = null)
        where T : IGrid
    {
        grid.SetProperty(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, new PropertyValue<double>(columnSpacingFunc, componentWithState));
        return grid;
    }
}

public static partial class GridStyles
{
    public static Action<IGrid>? Default { get; set; }
    public static Dictionary<string, Action<IGrid>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISearchBar : IInputView
{
    EventCommand<EventArgs>? SearchButtonPressedEvent { get; set; }
}

public partial class SearchBar<T> : InputView<T>, ISearchBar where T : Microsoft.Maui.Controls.SearchBar, new()
{
    public SearchBar(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SearchBarStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? ISearchBar.SearchButtonPressedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SearchBarStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingSearchButtonPressedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsISearchBar = (ISearchBar)this;
        if (thisAsISearchBar.SearchButtonPressedEvent != null)
        {
            nativeControl.SearchButtonPressed += NativeControl_SearchButtonPressed;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_SearchButtonPressed(object? sender, EventArgs e)
    {
        var thisAsISearchBar = (ISearchBar)this;
        if (_executingSearchButtonPressedEvent == null || _executingSearchButtonPressedEvent.IsCompleted)
        {
            _executingSearchButtonPressedEvent = thisAsISearchBar.SearchButtonPressedEvent;
            _executingSearchButtonPressedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.SearchButtonPressed -= NativeControl_SearchButtonPressed;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SearchBar<T> @searchbar)
        {
            if (_executingSearchButtonPressedEvent != null && !_executingSearchButtonPressedEvent.IsCompleted)
            {
                @searchbar._executingSearchButtonPressedEvent = _executingSearchButtonPressedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SearchBar : SearchBar<Microsoft.Maui.Controls.SearchBar>
{
    public SearchBar(Action<Microsoft.Maui.Controls.SearchBar?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public SearchBar(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SearchBarExtensions
{
    public static T CancelButtonColor<T>(this T searchBar, Microsoft.Maui.Graphics.Color cancelButtonColor)
        where T : ISearchBar
    {
        //searchBar.CancelButtonColor = cancelButtonColor;
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.CancelButtonColorProperty, cancelButtonColor);
        return searchBar;
    }

    public static T CancelButtonColor<T>(this T searchBar, Func<Microsoft.Maui.Graphics.Color> cancelButtonColorFunc, IComponentWithState? componentWithState = null)
        where T : ISearchBar
    {
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.CancelButtonColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(cancelButtonColorFunc, componentWithState));
        return searchBar;
    }

    public static T HorizontalTextAlignment<T>(this T searchBar, Microsoft.Maui.TextAlignment horizontalTextAlignment)
        where T : ISearchBar
    {
        //searchBar.HorizontalTextAlignment = horizontalTextAlignment;
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.HorizontalTextAlignmentProperty, horizontalTextAlignment);
        return searchBar;
    }

    public static T HorizontalTextAlignment<T>(this T searchBar, Func<Microsoft.Maui.TextAlignment> horizontalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : ISearchBar
    {
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.HorizontalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc, componentWithState));
        return searchBar;
    }

    public static T VerticalTextAlignment<T>(this T searchBar, Microsoft.Maui.TextAlignment verticalTextAlignment)
        where T : ISearchBar
    {
        //searchBar.VerticalTextAlignment = verticalTextAlignment;
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.VerticalTextAlignmentProperty, verticalTextAlignment);
        return searchBar;
    }

    public static T VerticalTextAlignment<T>(this T searchBar, Func<Microsoft.Maui.TextAlignment> verticalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : ISearchBar
    {
        searchBar.SetProperty(Microsoft.Maui.Controls.SearchBar.VerticalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc, componentWithState));
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Action? searchButtonPressedAction)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new SyncEventCommand<EventArgs>(execute: searchButtonPressedAction);
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Action<EventArgs>? searchButtonPressedAction)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: searchButtonPressedAction);
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Action<object?, EventArgs>? searchButtonPressedAction)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: searchButtonPressedAction);
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Func<Task>? searchButtonPressedAction, bool runInBackground = false)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new AsyncEventCommand<EventArgs>(execute: searchButtonPressedAction, runInBackground);
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Func<EventArgs, Task>? searchButtonPressedAction, bool runInBackground = false)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: searchButtonPressedAction, runInBackground);
        return searchBar;
    }

    public static T OnSearchButtonPressed<T>(this T searchBar, Func<object?, EventArgs, Task>? searchButtonPressedAction, bool runInBackground = false)
        where T : ISearchBar
    {
        searchBar.SearchButtonPressedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: searchButtonPressedAction, runInBackground);
        return searchBar;
    }
}

public static partial class SearchBarStyles
{
    public static Action<ISearchBar>? Default { get; set; }
    public static Dictionary<string, Action<ISearchBar>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IButton : IView
{
    EventCommand<EventArgs>? ClickedEvent { get; set; }

    EventCommand<EventArgs>? PressedEvent { get; set; }

    EventCommand<EventArgs>? ReleasedEvent { get; set; }
}

public partial class Button<T> : View<T>, IButton where T : Microsoft.Maui.Controls.Button, new()
{
    public Button(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ButtonStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IButton.ClickedEvent { get; set; }

    EventCommand<EventArgs>? IButton.PressedEvent { get; set; }

    EventCommand<EventArgs>? IButton.ReleasedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ButtonStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingClickedEvent;
    private EventCommand<EventArgs>? _executingPressedEvent;
    private EventCommand<EventArgs>? _executingReleasedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIButton = (IButton)this;
        if (thisAsIButton.ClickedEvent != null)
        {
            nativeControl.Clicked += NativeControl_Clicked;
        }

        if (thisAsIButton.PressedEvent != null)
        {
            nativeControl.Pressed += NativeControl_Pressed;
        }

        if (thisAsIButton.ReleasedEvent != null)
        {
            nativeControl.Released += NativeControl_Released;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Clicked(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        if (_executingClickedEvent == null || _executingClickedEvent.IsCompleted)
        {
            _executingClickedEvent = thisAsIButton.ClickedEvent;
            _executingClickedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Pressed(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        if (_executingPressedEvent == null || _executingPressedEvent.IsCompleted)
        {
            _executingPressedEvent = thisAsIButton.PressedEvent;
            _executingPressedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Released(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        if (_executingReleasedEvent == null || _executingReleasedEvent.IsCompleted)
        {
            _executingReleasedEvent = thisAsIButton.ReleasedEvent;
            _executingReleasedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.Clicked -= NativeControl_Clicked;
            nativeControl.Pressed -= NativeControl_Pressed;
            nativeControl.Released -= NativeControl_Released;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Button<T> @button)
        {
            if (_executingClickedEvent != null && !_executingClickedEvent.IsCompleted)
            {
                @button._executingClickedEvent = _executingClickedEvent;
            }

            if (_executingPressedEvent != null && !_executingPressedEvent.IsCompleted)
            {
                @button._executingPressedEvent = _executingPressedEvent;
            }

            if (_executingReleasedEvent != null && !_executingReleasedEvent.IsCompleted)
            {
                @button._executingReleasedEvent = _executingReleasedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Button : Button<Microsoft.Maui.Controls.Button>
{
    public Button(Action<Microsoft.Maui.Controls.Button?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Button(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class ButtonExtensions
{
    public static T ContentLayout<T>(this T button, Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout)
        where T : IButton
    {
        //button.ContentLayout = contentLayout;
        button.SetProperty(Microsoft.Maui.Controls.Button.ContentLayoutProperty, contentLayout);
        return button;
    }

    public static T ContentLayout<T>(this T button, Func<Microsoft.Maui.Controls.Button.ButtonContentLayout> contentLayoutFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.ContentLayoutProperty, new PropertyValue<Microsoft.Maui.Controls.Button.ButtonContentLayout>(contentLayoutFunc, componentWithState));
        return button;
    }

    public static T Text<T>(this T button, string text)
        where T : IButton
    {
        //button.Text = text;
        button.SetProperty(Microsoft.Maui.Controls.Button.TextProperty, text);
        return button;
    }

    public static T Text<T>(this T button, Func<string> textFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.TextProperty, new PropertyValue<string>(textFunc, componentWithState));
        return button;
    }

    public static T TextColor<T>(this T button, Microsoft.Maui.Graphics.Color textColor)
        where T : IButton
    {
        //button.TextColor = textColor;
        button.SetProperty(Microsoft.Maui.Controls.Button.TextColorProperty, textColor);
        return button;
    }

    public static T TextColor<T>(this T button, Func<Microsoft.Maui.Graphics.Color> textColorFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc, componentWithState));
        return button;
    }

    public static T CharacterSpacing<T>(this T button, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        //button.CharacterSpacing = characterSpacing;
        button.SetProperty(Microsoft.Maui.Controls.Button.CharacterSpacingProperty, characterSpacing);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return button;
    }

    public static T CharacterSpacing<T>(this T button, Func<double> characterSpacingFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc, componentWithState));
        return button;
    }

    public static T FontFamily<T>(this T button, string fontFamily)
        where T : IButton
    {
        //button.FontFamily = fontFamily;
        button.SetProperty(Microsoft.Maui.Controls.Button.FontFamilyProperty, fontFamily);
        return button;
    }

    public static T FontFamily<T>(this T button, Func<string> fontFamilyFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc, componentWithState));
        return button;
    }

    public static T FontSize<T>(this T button, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        //button.FontSize = fontSize;
        button.SetProperty(Microsoft.Maui.Controls.Button.FontSizeProperty, fontSize);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return button;
    }

    public static T FontSize<T>(this T button, Func<double> fontSizeFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.FontSizeProperty, new PropertyValue<double>(fontSizeFunc, componentWithState));
        return button;
    }

    public static T TextTransform<T>(this T button, Microsoft.Maui.TextTransform textTransform)
        where T : IButton
    {
        //button.TextTransform = textTransform;
        button.SetProperty(Microsoft.Maui.Controls.Button.TextTransformProperty, textTransform);
        return button;
    }

    public static T TextTransform<T>(this T button, Func<Microsoft.Maui.TextTransform> textTransformFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.TextTransformProperty, new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc, componentWithState));
        return button;
    }

    public static T FontAttributes<T>(this T button, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IButton
    {
        //button.FontAttributes = fontAttributes;
        button.SetProperty(Microsoft.Maui.Controls.Button.FontAttributesProperty, fontAttributes);
        return button;
    }

    public static T FontAttributes<T>(this T button, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc, componentWithState));
        return button;
    }

    public static T FontAutoScalingEnabled<T>(this T button, bool fontAutoScalingEnabled)
        where T : IButton
    {
        //button.FontAutoScalingEnabled = fontAutoScalingEnabled;
        button.SetProperty(Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return button;
    }

    public static T FontAutoScalingEnabled<T>(this T button, Func<bool> fontAutoScalingEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc, componentWithState));
        return button;
    }

    public static T BorderWidth<T>(this T button, double borderWidth, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        //button.BorderWidth = borderWidth;
        button.SetProperty(Microsoft.Maui.Controls.Button.BorderWidthProperty, borderWidth);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.BorderWidthProperty, customAnimation ?? new RxDoubleAnimation(borderWidth));
        return button;
    }

    public static T BorderWidth<T>(this T button, Func<double> borderWidthFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.BorderWidthProperty, new PropertyValue<double>(borderWidthFunc, componentWithState));
        return button;
    }

    public static T BorderColor<T>(this T button, Microsoft.Maui.Graphics.Color borderColor)
        where T : IButton
    {
        //button.BorderColor = borderColor;
        button.SetProperty(Microsoft.Maui.Controls.Button.BorderColorProperty, borderColor);
        return button;
    }

    public static T BorderColor<T>(this T button, Func<Microsoft.Maui.Graphics.Color> borderColorFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.BorderColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(borderColorFunc, componentWithState));
        return button;
    }

    public static T CornerRadius<T>(this T button, int cornerRadius)
        where T : IButton
    {
        //button.CornerRadius = cornerRadius;
        button.SetProperty(Microsoft.Maui.Controls.Button.CornerRadiusProperty, cornerRadius);
        return button;
    }

    public static T CornerRadius<T>(this T button, Func<int> cornerRadiusFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.CornerRadiusProperty, new PropertyValue<int>(cornerRadiusFunc, componentWithState));
        return button;
    }

    public static T ImageSource<T>(this T button, Microsoft.Maui.Controls.ImageSource imageSource)
        where T : IButton
    {
        //button.ImageSource = imageSource;
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, imageSource);
        return button;
    }

    public static T ImageSource<T>(this T button, Func<Microsoft.Maui.Controls.ImageSource> imageSourceFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(imageSourceFunc, componentWithState));
        return button;
    }

    public static T ImageSource<T>(this T button, string file)
        where T : IButton
    {
        //button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return button;
    }

    public static T ImageSource<T>(this T button, Func<string> action)
        where T : IButton
    {
        /*button.ImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return button;
    }

    public static T ImageSource<T>(this T button, string resourceName, Assembly sourceAssembly)
        where T : IButton
    {
        //button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return button;
    }

    public static T ImageSource<T>(this T button, Uri imageUri)
        where T : IButton
    {
        //button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return button;
    }

    public static T ImageSource<T>(this T button, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IButton
    {
        //button.ImageSource = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, newValue);
        return button;
    }

    public static T ImageSource<T>(this T button, Func<Stream> imageStream)
        where T : IButton
    {
        //button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        button.SetProperty(Microsoft.Maui.Controls.Button.ImageSourceProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return button;
    }

    public static T Padding<T>(this T button, Microsoft.Maui.Thickness padding, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        //button.Padding = padding;
        button.SetProperty(Microsoft.Maui.Controls.Button.PaddingProperty, padding);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(padding));
        return button;
    }

    public static T Padding<T>(this T button, Func<Microsoft.Maui.Thickness> paddingFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.PaddingProperty, new PropertyValue<Microsoft.Maui.Thickness>(paddingFunc, componentWithState));
        return button;
    }

    public static T Padding<T>(this T button, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        //button.Padding = new Thickness(leftRight, topBottom);
        button.SetProperty(Microsoft.Maui.Controls.Button.PaddingProperty, new Thickness(leftRight, topBottom));
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(leftRight, topBottom)));
        return button;
    }

    public static T Padding<T>(this T button, double uniformSize, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        //button.Padding = new Thickness(uniformSize);
        button.SetProperty(Microsoft.Maui.Controls.Button.PaddingProperty, new Thickness(uniformSize));
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(uniformSize)));
        return button;
    }

    public static T Padding<T>(this T button, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        //button.Padding = new Thickness(left, top, right, bottom);
        button.SetProperty(Microsoft.Maui.Controls.Button.PaddingProperty, new Thickness(left, top, right, bottom));
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(left, top, right, bottom)));
        return button;
    }

    public static T LineBreakMode<T>(this T button, Microsoft.Maui.LineBreakMode lineBreakMode)
        where T : IButton
    {
        //button.LineBreakMode = lineBreakMode;
        button.SetProperty(Microsoft.Maui.Controls.Button.LineBreakModeProperty, lineBreakMode);
        return button;
    }

    public static T LineBreakMode<T>(this T button, Func<Microsoft.Maui.LineBreakMode> lineBreakModeFunc, IComponentWithState? componentWithState = null)
        where T : IButton
    {
        button.SetProperty(Microsoft.Maui.Controls.Button.LineBreakModeProperty, new PropertyValue<Microsoft.Maui.LineBreakMode>(lineBreakModeFunc, componentWithState));
        return button;
    }

    public static T OnClicked<T>(this T button, Action? clickedAction)
        where T : IButton
    {
        button.ClickedEvent = new SyncEventCommand<EventArgs>(execute: clickedAction);
        return button;
    }

    public static T OnClicked<T>(this T button, Action<EventArgs>? clickedAction)
        where T : IButton
    {
        button.ClickedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: clickedAction);
        return button;
    }

    public static T OnClicked<T>(this T button, Action<object?, EventArgs>? clickedAction)
        where T : IButton
    {
        button.ClickedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: clickedAction);
        return button;
    }

    public static T OnClicked<T>(this T button, Func<Task>? clickedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ClickedEvent = new AsyncEventCommand<EventArgs>(execute: clickedAction, runInBackground);
        return button;
    }

    public static T OnClicked<T>(this T button, Func<EventArgs, Task>? clickedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ClickedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: clickedAction, runInBackground);
        return button;
    }

    public static T OnClicked<T>(this T button, Func<object?, EventArgs, Task>? clickedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ClickedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: clickedAction, runInBackground);
        return button;
    }

    public static T OnPressed<T>(this T button, Action? pressedAction)
        where T : IButton
    {
        button.PressedEvent = new SyncEventCommand<EventArgs>(execute: pressedAction);
        return button;
    }

    public static T OnPressed<T>(this T button, Action<EventArgs>? pressedAction)
        where T : IButton
    {
        button.PressedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: pressedAction);
        return button;
    }

    public static T OnPressed<T>(this T button, Action<object?, EventArgs>? pressedAction)
        where T : IButton
    {
        button.PressedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: pressedAction);
        return button;
    }

    public static T OnPressed<T>(this T button, Func<Task>? pressedAction, bool runInBackground = false)
        where T : IButton
    {
        button.PressedEvent = new AsyncEventCommand<EventArgs>(execute: pressedAction, runInBackground);
        return button;
    }

    public static T OnPressed<T>(this T button, Func<EventArgs, Task>? pressedAction, bool runInBackground = false)
        where T : IButton
    {
        button.PressedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: pressedAction, runInBackground);
        return button;
    }

    public static T OnPressed<T>(this T button, Func<object?, EventArgs, Task>? pressedAction, bool runInBackground = false)
        where T : IButton
    {
        button.PressedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: pressedAction, runInBackground);
        return button;
    }

    public static T OnReleased<T>(this T button, Action? releasedAction)
        where T : IButton
    {
        button.ReleasedEvent = new SyncEventCommand<EventArgs>(execute: releasedAction);
        return button;
    }

    public static T OnReleased<T>(this T button, Action<EventArgs>? releasedAction)
        where T : IButton
    {
        button.ReleasedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: releasedAction);
        return button;
    }

    public static T OnReleased<T>(this T button, Action<object?, EventArgs>? releasedAction)
        where T : IButton
    {
        button.ReleasedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: releasedAction);
        return button;
    }

    public static T OnReleased<T>(this T button, Func<Task>? releasedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ReleasedEvent = new AsyncEventCommand<EventArgs>(execute: releasedAction, runInBackground);
        return button;
    }

    public static T OnReleased<T>(this T button, Func<EventArgs, Task>? releasedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ReleasedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: releasedAction, runInBackground);
        return button;
    }

    public static T OnReleased<T>(this T button, Func<object?, EventArgs, Task>? releasedAction, bool runInBackground = false)
        where T : IButton
    {
        button.ReleasedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: releasedAction, runInBackground);
        return button;
    }
}

public static partial class ButtonStyles
{
    public static Action<IButton>? Default { get; set; }
    public static Dictionary<string, Action<IButton>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IVisualElement : INavigableElement
{
    EventCommand<EventArgs>? ChildrenReorderedEvent { get; set; }

    EventCommand<FocusEventArgs>? FocusedEvent { get; set; }

    EventCommand<EventArgs>? MeasureInvalidatedEvent { get; set; }

    EventCommand<EventArgs>? SizeChangedEvent { get; set; }

    EventCommand<FocusEventArgs>? UnfocusedEvent { get; set; }

    EventCommand<EventArgs>? LoadedEvent { get; set; }

    EventCommand<EventArgs>? UnloadedEvent { get; set; }
}

public abstract partial class VisualElement<T> : NavigableElement<T>, IVisualElement where T : Microsoft.Maui.Controls.VisualElement, new()
{
    protected VisualElement(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        VisualElementStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IVisualElement.ChildrenReorderedEvent { get; set; }

    EventCommand<FocusEventArgs>? IVisualElement.FocusedEvent { get; set; }

    EventCommand<EventArgs>? IVisualElement.MeasureInvalidatedEvent { get; set; }

    EventCommand<EventArgs>? IVisualElement.SizeChangedEvent { get; set; }

    EventCommand<FocusEventArgs>? IVisualElement.UnfocusedEvent { get; set; }

    EventCommand<EventArgs>? IVisualElement.LoadedEvent { get; set; }

    EventCommand<EventArgs>? IVisualElement.UnloadedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && VisualElementStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingChildrenReorderedEvent;
    private EventCommand<FocusEventArgs>? _executingFocusedEvent;
    private EventCommand<EventArgs>? _executingMeasureInvalidatedEvent;
    private EventCommand<EventArgs>? _executingSizeChangedEvent;
    private EventCommand<FocusEventArgs>? _executingUnfocusedEvent;
    private EventCommand<EventArgs>? _executingLoadedEvent;
    private EventCommand<EventArgs>? _executingUnloadedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIVisualElement = (IVisualElement)this;
        if (thisAsIVisualElement.ChildrenReorderedEvent != null)
        {
            NativeControl.ChildrenReordered += NativeControl_ChildrenReordered;
        }

        if (thisAsIVisualElement.FocusedEvent != null)
        {
            NativeControl.Focused += NativeControl_Focused;
        }

        if (thisAsIVisualElement.MeasureInvalidatedEvent != null)
        {
            NativeControl.MeasureInvalidated += NativeControl_MeasureInvalidated;
        }

        if (thisAsIVisualElement.SizeChangedEvent != null)
        {
            NativeControl.SizeChanged += NativeControl_SizeChanged;
        }

        if (thisAsIVisualElement.UnfocusedEvent != null)
        {
            NativeControl.Unfocused += NativeControl_Unfocused;
        }

        if (thisAsIVisualElement.LoadedEvent != null)
        {
            NativeControl.Loaded += NativeControl_Loaded;
        }

        if (thisAsIVisualElement.UnloadedEvent != null)
        {
            NativeControl.Unloaded += NativeControl_Unloaded;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_ChildrenReordered(object? sender, EventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingChildrenReorderedEvent == null || _executingChildrenReorderedEvent.IsCompleted)
        {
            _executingChildrenReorderedEvent = thisAsIVisualElement.ChildrenReorderedEvent;
            _executingChildrenReorderedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Focused(object? sender, FocusEventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingFocusedEvent == null || _executingFocusedEvent.IsCompleted)
        {
            _executingFocusedEvent = thisAsIVisualElement.FocusedEvent;
            _executingFocusedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_MeasureInvalidated(object? sender, EventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingMeasureInvalidatedEvent == null || _executingMeasureInvalidatedEvent.IsCompleted)
        {
            _executingMeasureInvalidatedEvent = thisAsIVisualElement.MeasureInvalidatedEvent;
            _executingMeasureInvalidatedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_SizeChanged(object? sender, EventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingSizeChangedEvent == null || _executingSizeChangedEvent.IsCompleted)
        {
            _executingSizeChangedEvent = thisAsIVisualElement.SizeChangedEvent;
            _executingSizeChangedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Unfocused(object? sender, FocusEventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingUnfocusedEvent == null || _executingUnfocusedEvent.IsCompleted)
        {
            _executingUnfocusedEvent = thisAsIVisualElement.UnfocusedEvent;
            _executingUnfocusedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Loaded(object? sender, EventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingLoadedEvent == null || _executingLoadedEvent.IsCompleted)
        {
            _executingLoadedEvent = thisAsIVisualElement.LoadedEvent;
            _executingLoadedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Unloaded(object? sender, EventArgs e)
    {
        var thisAsIVisualElement = (IVisualElement)this;
        if (_executingUnloadedEvent == null || _executingUnloadedEvent.IsCompleted)
        {
            _executingUnloadedEvent = thisAsIVisualElement.UnloadedEvent;
            _executingUnloadedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.ChildrenReordered -= NativeControl_ChildrenReordered;
            NativeControl.Focused -= NativeControl_Focused;
            NativeControl.MeasureInvalidated -= NativeControl_MeasureInvalidated;
            NativeControl.SizeChanged -= NativeControl_SizeChanged;
            NativeControl.Unfocused -= NativeControl_Unfocused;
            NativeControl.Loaded -= NativeControl_Loaded;
            NativeControl.Unloaded -= NativeControl_Unloaded;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is VisualElement<T> @visualelement)
        {
            if (_executingChildrenReorderedEvent != null && !_executingChildrenReorderedEvent.IsCompleted)
            {
                @visualelement._executingChildrenReorderedEvent = _executingChildrenReorderedEvent;
            }

            if (_executingFocusedEvent != null && !_executingFocusedEvent.IsCompleted)
            {
                @visualelement._executingFocusedEvent = _executingFocusedEvent;
            }

            if (_executingMeasureInvalidatedEvent != null && !_executingMeasureInvalidatedEvent.IsCompleted)
            {
                @visualelement._executingMeasureInvalidatedEvent = _executingMeasureInvalidatedEvent;
            }

            if (_executingSizeChangedEvent != null && !_executingSizeChangedEvent.IsCompleted)
            {
                @visualelement._executingSizeChangedEvent = _executingSizeChangedEvent;
            }

            if (_executingUnfocusedEvent != null && !_executingUnfocusedEvent.IsCompleted)
            {
                @visualelement._executingUnfocusedEvent = _executingUnfocusedEvent;
            }

            if (_executingLoadedEvent != null && !_executingLoadedEvent.IsCompleted)
            {
                @visualelement._executingLoadedEvent = _executingLoadedEvent;
            }

            if (_executingUnloadedEvent != null && !_executingUnloadedEvent.IsCompleted)
            {
                @visualelement._executingUnloadedEvent = _executingUnloadedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class VisualElementExtensions
{
    public static T InputTransparent<T>(this T visualElement, bool inputTransparent)
        where T : IVisualElement
    {
        //visualElement.InputTransparent = inputTransparent;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, inputTransparent);
        return visualElement;
    }

    public static T InputTransparent<T>(this T visualElement, Func<bool> inputTransparentFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, new PropertyValue<bool>(inputTransparentFunc, componentWithState));
        return visualElement;
    }

    public static T IsEnabled<T>(this T visualElement, bool isEnabled)
        where T : IVisualElement
    {
        //visualElement.IsEnabled = isEnabled;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, isEnabled);
        return visualElement;
    }

    public static T IsEnabled<T>(this T visualElement, Func<bool> isEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, new PropertyValue<bool>(isEnabledFunc, componentWithState));
        return visualElement;
    }

    public static T AnchorX<T>(this T visualElement, double anchorX, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.AnchorX = anchorX;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, anchorX);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, customAnimation ?? new RxDoubleAnimation(anchorX));
        return visualElement;
    }

    public static T AnchorX<T>(this T visualElement, Func<double> anchorXFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, new PropertyValue<double>(anchorXFunc, componentWithState));
        return visualElement;
    }

    public static T AnchorY<T>(this T visualElement, double anchorY, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.AnchorY = anchorY;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, anchorY);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, customAnimation ?? new RxDoubleAnimation(anchorY));
        return visualElement;
    }

    public static T AnchorY<T>(this T visualElement, Func<double> anchorYFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, new PropertyValue<double>(anchorYFunc, componentWithState));
        return visualElement;
    }

    public static T TranslationX<T>(this T visualElement, double translationX, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.TranslationX = translationX;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, translationX);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, customAnimation ?? new RxDoubleAnimation(translationX));
        return visualElement;
    }

    public static T TranslationX<T>(this T visualElement, Func<double> translationXFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, new PropertyValue<double>(translationXFunc, componentWithState));
        return visualElement;
    }

    public static T TranslationY<T>(this T visualElement, double translationY, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.TranslationY = translationY;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, translationY);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, customAnimation ?? new RxDoubleAnimation(translationY));
        return visualElement;
    }

    public static T TranslationY<T>(this T visualElement, Func<double> translationYFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, new PropertyValue<double>(translationYFunc, componentWithState));
        return visualElement;
    }

    public static T Rotation<T>(this T visualElement, double rotation, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.Rotation = rotation;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationProperty, rotation);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.RotationProperty, customAnimation ?? new RxDoubleAnimation(rotation));
        return visualElement;
    }

    public static T Rotation<T>(this T visualElement, Func<double> rotationFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationProperty, new PropertyValue<double>(rotationFunc, componentWithState));
        return visualElement;
    }

    public static T RotationX<T>(this T visualElement, double rotationX, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.RotationX = rotationX;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationXProperty, rotationX);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.RotationXProperty, customAnimation ?? new RxDoubleAnimation(rotationX));
        return visualElement;
    }

    public static T RotationX<T>(this T visualElement, Func<double> rotationXFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationXProperty, new PropertyValue<double>(rotationXFunc, componentWithState));
        return visualElement;
    }

    public static T RotationY<T>(this T visualElement, double rotationY, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.RotationY = rotationY;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationYProperty, rotationY);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.RotationYProperty, customAnimation ?? new RxDoubleAnimation(rotationY));
        return visualElement;
    }

    public static T RotationY<T>(this T visualElement, Func<double> rotationYFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.RotationYProperty, new PropertyValue<double>(rotationYFunc, componentWithState));
        return visualElement;
    }

    public static T Scale<T>(this T visualElement, double scale, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.Scale = scale;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleProperty, scale);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.ScaleProperty, customAnimation ?? new RxDoubleAnimation(scale));
        return visualElement;
    }

    public static T Scale<T>(this T visualElement, Func<double> scaleFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleProperty, new PropertyValue<double>(scaleFunc, componentWithState));
        return visualElement;
    }

    public static T ScaleX<T>(this T visualElement, double scaleX, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.ScaleX = scaleX;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, scaleX);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, customAnimation ?? new RxDoubleAnimation(scaleX));
        return visualElement;
    }

    public static T ScaleX<T>(this T visualElement, Func<double> scaleXFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, new PropertyValue<double>(scaleXFunc, componentWithState));
        return visualElement;
    }

    public static T ScaleY<T>(this T visualElement, double scaleY, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.ScaleY = scaleY;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, scaleY);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, customAnimation ?? new RxDoubleAnimation(scaleY));
        return visualElement;
    }

    public static T ScaleY<T>(this T visualElement, Func<double> scaleYFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, new PropertyValue<double>(scaleYFunc, componentWithState));
        return visualElement;
    }

    public static T Visual<T>(this T visualElement, Microsoft.Maui.Controls.IVisual visual)
        where T : IVisualElement
    {
        //visualElement.Visual = visual;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.VisualProperty, visual);
        return visualElement;
    }

    public static T Visual<T>(this T visualElement, Func<Microsoft.Maui.Controls.IVisual> visualFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.VisualProperty, new PropertyValue<Microsoft.Maui.Controls.IVisual>(visualFunc, componentWithState));
        return visualElement;
    }

    public static T IsVisible<T>(this T visualElement, bool isVisible)
        where T : IVisualElement
    {
        //visualElement.IsVisible = isVisible;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, isVisible);
        return visualElement;
    }

    public static T IsVisible<T>(this T visualElement, Func<bool> isVisibleFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, new PropertyValue<bool>(isVisibleFunc, componentWithState));
        return visualElement;
    }

    public static T Opacity<T>(this T visualElement, double opacity, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.Opacity = opacity;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.OpacityProperty, opacity);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.OpacityProperty, customAnimation ?? new RxDoubleAnimation(opacity));
        return visualElement;
    }

    public static T Opacity<T>(this T visualElement, Func<double> opacityFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.OpacityProperty, new PropertyValue<double>(opacityFunc, componentWithState));
        return visualElement;
    }

    public static T BackgroundColor<T>(this T visualElement, Microsoft.Maui.Graphics.Color backgroundColor)
        where T : IVisualElement
    {
        //visualElement.BackgroundColor = backgroundColor;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, backgroundColor);
        return visualElement;
    }

    public static T BackgroundColor<T>(this T visualElement, Func<Microsoft.Maui.Graphics.Color> backgroundColorFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(backgroundColorFunc, componentWithState));
        return visualElement;
    }

    public static T Background<T>(this T visualElement, Microsoft.Maui.Controls.Brush background)
        where T : IVisualElement
    {
        //visualElement.Background = background;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, background);
        return visualElement;
    }

    public static T Background<T>(this T visualElement, Func<Microsoft.Maui.Controls.Brush> backgroundFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(backgroundFunc, componentWithState));
        return visualElement;
    }

    public static T WidthRequest<T>(this T visualElement, double widthRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.WidthRequest = widthRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, widthRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, customAnimation ?? new RxDoubleAnimation(widthRequest));
        return visualElement;
    }

    public static T WidthRequest<T>(this T visualElement, Func<double> widthRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, new PropertyValue<double>(widthRequestFunc, componentWithState));
        return visualElement;
    }

    public static T HeightRequest<T>(this T visualElement, double heightRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.HeightRequest = heightRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, heightRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, customAnimation ?? new RxDoubleAnimation(heightRequest));
        return visualElement;
    }

    public static T HeightRequest<T>(this T visualElement, Func<double> heightRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, new PropertyValue<double>(heightRequestFunc, componentWithState));
        return visualElement;
    }

    public static T MinimumWidthRequest<T>(this T visualElement, double minimumWidthRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.MinimumWidthRequest = minimumWidthRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, minimumWidthRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, customAnimation ?? new RxDoubleAnimation(minimumWidthRequest));
        return visualElement;
    }

    public static T MinimumWidthRequest<T>(this T visualElement, Func<double> minimumWidthRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, new PropertyValue<double>(minimumWidthRequestFunc, componentWithState));
        return visualElement;
    }

    public static T MinimumHeightRequest<T>(this T visualElement, double minimumHeightRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.MinimumHeightRequest = minimumHeightRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, minimumHeightRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, customAnimation ?? new RxDoubleAnimation(minimumHeightRequest));
        return visualElement;
    }

    public static T MinimumHeightRequest<T>(this T visualElement, Func<double> minimumHeightRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, new PropertyValue<double>(minimumHeightRequestFunc, componentWithState));
        return visualElement;
    }

    public static T MaximumWidthRequest<T>(this T visualElement, double maximumWidthRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.MaximumWidthRequest = maximumWidthRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, maximumWidthRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, customAnimation ?? new RxDoubleAnimation(maximumWidthRequest));
        return visualElement;
    }

    public static T MaximumWidthRequest<T>(this T visualElement, Func<double> maximumWidthRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, new PropertyValue<double>(maximumWidthRequestFunc, componentWithState));
        return visualElement;
    }

    public static T MaximumHeightRequest<T>(this T visualElement, double maximumHeightRequest, RxDoubleAnimation? customAnimation = null)
        where T : IVisualElement
    {
        //visualElement.MaximumHeightRequest = maximumHeightRequest;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, maximumHeightRequest);
        visualElement.AppendAnimatable(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, customAnimation ?? new RxDoubleAnimation(maximumHeightRequest));
        return visualElement;
    }

    public static T MaximumHeightRequest<T>(this T visualElement, Func<double> maximumHeightRequestFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, new PropertyValue<double>(maximumHeightRequestFunc, componentWithState));
        return visualElement;
    }

    public static T FlowDirection<T>(this T visualElement, Microsoft.Maui.FlowDirection flowDirection)
        where T : IVisualElement
    {
        //visualElement.FlowDirection = flowDirection;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, flowDirection);
        return visualElement;
    }

    public static T FlowDirection<T>(this T visualElement, Func<Microsoft.Maui.FlowDirection> flowDirectionFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, new PropertyValue<Microsoft.Maui.FlowDirection>(flowDirectionFunc, componentWithState));
        return visualElement;
    }

    public static T ZIndex<T>(this T visualElement, int zIndex)
        where T : IVisualElement
    {
        //visualElement.ZIndex = zIndex;
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, zIndex);
        return visualElement;
    }

    public static T ZIndex<T>(this T visualElement, Func<int> zIndexFunc, IComponentWithState? componentWithState = null)
        where T : IVisualElement
    {
        visualElement.SetProperty(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, new PropertyValue<int>(zIndexFunc, componentWithState));
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Action? childrenReorderedAction)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new SyncEventCommand<EventArgs>(execute: childrenReorderedAction);
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Action<EventArgs>? childrenReorderedAction)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: childrenReorderedAction);
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Action<object?, EventArgs>? childrenReorderedAction)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: childrenReorderedAction);
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Func<Task>? childrenReorderedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new AsyncEventCommand<EventArgs>(execute: childrenReorderedAction, runInBackground);
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Func<EventArgs, Task>? childrenReorderedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: childrenReorderedAction, runInBackground);
        return visualElement;
    }

    public static T OnChildrenReordered<T>(this T visualElement, Func<object?, EventArgs, Task>? childrenReorderedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.ChildrenReorderedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: childrenReorderedAction, runInBackground);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Action? focusedAction)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new SyncEventCommand<FocusEventArgs>(execute: focusedAction);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Action<FocusEventArgs>? focusedAction)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new SyncEventCommand<FocusEventArgs>(executeWithArgs: focusedAction);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Action<object?, FocusEventArgs>? focusedAction)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new SyncEventCommand<FocusEventArgs>(executeWithFullArgs: focusedAction);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Func<Task>? focusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new AsyncEventCommand<FocusEventArgs>(execute: focusedAction, runInBackground);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Func<FocusEventArgs, Task>? focusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new AsyncEventCommand<FocusEventArgs>(executeWithArgs: focusedAction, runInBackground);
        return visualElement;
    }

    public static T OnFocused<T>(this T visualElement, Func<object?, FocusEventArgs, Task>? focusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.FocusedEvent = new AsyncEventCommand<FocusEventArgs>(executeWithFullArgs: focusedAction, runInBackground);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Action? measureInvalidatedAction)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new SyncEventCommand<EventArgs>(execute: measureInvalidatedAction);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Action<EventArgs>? measureInvalidatedAction)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: measureInvalidatedAction);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Action<object?, EventArgs>? measureInvalidatedAction)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: measureInvalidatedAction);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Func<Task>? measureInvalidatedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new AsyncEventCommand<EventArgs>(execute: measureInvalidatedAction, runInBackground);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Func<EventArgs, Task>? measureInvalidatedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: measureInvalidatedAction, runInBackground);
        return visualElement;
    }

    public static T OnMeasureInvalidated<T>(this T visualElement, Func<object?, EventArgs, Task>? measureInvalidatedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.MeasureInvalidatedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: measureInvalidatedAction, runInBackground);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Action? sizeChangedAction)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new SyncEventCommand<EventArgs>(execute: sizeChangedAction);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Action<EventArgs>? sizeChangedAction)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: sizeChangedAction);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Action<object?, EventArgs>? sizeChangedAction)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: sizeChangedAction);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Func<Task>? sizeChangedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new AsyncEventCommand<EventArgs>(execute: sizeChangedAction, runInBackground);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Func<EventArgs, Task>? sizeChangedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: sizeChangedAction, runInBackground);
        return visualElement;
    }

    public static T OnSizeChanged<T>(this T visualElement, Func<object?, EventArgs, Task>? sizeChangedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.SizeChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: sizeChangedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Action? unfocusedAction)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new SyncEventCommand<FocusEventArgs>(execute: unfocusedAction);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Action<FocusEventArgs>? unfocusedAction)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new SyncEventCommand<FocusEventArgs>(executeWithArgs: unfocusedAction);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Action<object?, FocusEventArgs>? unfocusedAction)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new SyncEventCommand<FocusEventArgs>(executeWithFullArgs: unfocusedAction);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Func<Task>? unfocusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new AsyncEventCommand<FocusEventArgs>(execute: unfocusedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Func<FocusEventArgs, Task>? unfocusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new AsyncEventCommand<FocusEventArgs>(executeWithArgs: unfocusedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnfocused<T>(this T visualElement, Func<object?, FocusEventArgs, Task>? unfocusedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnfocusedEvent = new AsyncEventCommand<FocusEventArgs>(executeWithFullArgs: unfocusedAction, runInBackground);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Action? loadedAction)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new SyncEventCommand<EventArgs>(execute: loadedAction);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Action<EventArgs>? loadedAction)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: loadedAction);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Action<object?, EventArgs>? loadedAction)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: loadedAction);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Func<Task>? loadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new AsyncEventCommand<EventArgs>(execute: loadedAction, runInBackground);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Func<EventArgs, Task>? loadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: loadedAction, runInBackground);
        return visualElement;
    }

    public static T OnLoaded<T>(this T visualElement, Func<object?, EventArgs, Task>? loadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.LoadedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: loadedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Action? unloadedAction)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new SyncEventCommand<EventArgs>(execute: unloadedAction);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Action<EventArgs>? unloadedAction)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: unloadedAction);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Action<object?, EventArgs>? unloadedAction)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: unloadedAction);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Func<Task>? unloadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new AsyncEventCommand<EventArgs>(execute: unloadedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Func<EventArgs, Task>? unloadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: unloadedAction, runInBackground);
        return visualElement;
    }

    public static T OnUnloaded<T>(this T visualElement, Func<object?, EventArgs, Task>? unloadedAction, bool runInBackground = false)
        where T : IVisualElement
    {
        visualElement.UnloadedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: unloadedAction, runInBackground);
        return visualElement;
    }
}

public static partial class VisualElementStyles
{
    public static Action<IVisualElement>? Default { get; set; }
    public static Dictionary<string, Action<IVisualElement>> Themes { get; } = [];
}
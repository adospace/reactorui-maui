// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISelectableItemsView : IStructuredItemsView
{
    EventCommand<SelectionChangedEventArgs>? SelectionChangedEvent { get; set; }
}

public partial class SelectableItemsView<T> : StructuredItemsView<T>, ISelectableItemsView where T : Microsoft.Maui.Controls.SelectableItemsView, new()
{
    public SelectableItemsView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SelectableItemsViewStyles.Default?.Invoke(this);
    }

    EventCommand<SelectionChangedEventArgs>? ISelectableItemsView.SelectionChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SelectableItemsViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<SelectionChangedEventArgs>? _executingSelectionChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsISelectableItemsView = (ISelectableItemsView)this;
        if (thisAsISelectableItemsView.SelectionChangedEvent != null)
        {
            nativeControl.SelectionChanged += NativeControl_SelectionChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_SelectionChanged(object? sender, SelectionChangedEventArgs e)
    {
        var thisAsISelectableItemsView = (ISelectableItemsView)this;
        if (_executingSelectionChangedEvent == null || _executingSelectionChangedEvent.IsCompleted)
        {
            _executingSelectionChangedEvent = thisAsISelectableItemsView.SelectionChangedEvent;
            _executingSelectionChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.SelectionChanged -= NativeControl_SelectionChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SelectableItemsView<T> @selectableitemsview)
        {
            if (_executingSelectionChangedEvent != null && !_executingSelectionChangedEvent.IsCompleted)
            {
                @selectableitemsview._executingSelectionChangedEvent = _executingSelectionChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SelectableItemsView : SelectableItemsView<Microsoft.Maui.Controls.SelectableItemsView>
{
    public SelectableItemsView(Action<Microsoft.Maui.Controls.SelectableItemsView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public SelectableItemsView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SelectableItemsViewExtensions
{
    public static T SelectionMode<T>(this T selectableItemsView, Microsoft.Maui.Controls.SelectionMode selectionMode)
        where T : ISelectableItemsView
    {
        //selectableItemsView.SelectionMode = selectionMode;
        selectableItemsView.SetProperty(Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, selectionMode);
        return selectableItemsView;
    }

    public static T SelectionMode<T>(this T selectableItemsView, Func<Microsoft.Maui.Controls.SelectionMode> selectionModeFunc, IComponentWithState? componentWithState = null)
        where T : ISelectableItemsView
    {
        selectableItemsView.SetProperty(Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, new PropertyValue<Microsoft.Maui.Controls.SelectionMode>(selectionModeFunc, componentWithState));
        return selectableItemsView;
    }

    public static T SelectedItem<T>(this T selectableItemsView, object? selectedItem)
        where T : ISelectableItemsView
    {
        //selectableItemsView.SelectedItem = selectedItem;
        selectableItemsView.SetProperty(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, selectedItem);
        return selectableItemsView;
    }

    public static T SelectedItem<T>(this T selectableItemsView, Func<object?> selectedItemFunc, IComponentWithState? componentWithState = null)
        where T : ISelectableItemsView
    {
        selectableItemsView.SetProperty(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, new PropertyValue<object?>(selectedItemFunc, componentWithState));
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Action? selectionChangedAction)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new SyncEventCommand<SelectionChangedEventArgs>(execute: selectionChangedAction);
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Action<SelectionChangedEventArgs>? selectionChangedAction)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new SyncEventCommand<SelectionChangedEventArgs>(executeWithArgs: selectionChangedAction);
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Action<object?, SelectionChangedEventArgs>? selectionChangedAction)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new SyncEventCommand<SelectionChangedEventArgs>(executeWithFullArgs: selectionChangedAction);
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Func<Task>? selectionChangedAction, bool runInBackground = false)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new AsyncEventCommand<SelectionChangedEventArgs>(execute: selectionChangedAction, runInBackground);
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Func<SelectionChangedEventArgs, Task>? selectionChangedAction, bool runInBackground = false)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new AsyncEventCommand<SelectionChangedEventArgs>(executeWithArgs: selectionChangedAction, runInBackground);
        return selectableItemsView;
    }

    public static T OnSelectionChanged<T>(this T selectableItemsView, Func<object?, SelectionChangedEventArgs, Task>? selectionChangedAction, bool runInBackground = false)
        where T : ISelectableItemsView
    {
        selectableItemsView.SelectionChangedEvent = new AsyncEventCommand<SelectionChangedEventArgs>(executeWithFullArgs: selectionChangedAction, runInBackground);
        return selectableItemsView;
    }
}

public static partial class SelectableItemsViewStyles
{
    public static Action<ISelectableItemsView>? Default { get; set; }
    public static Dictionary<string, Action<ISelectableItemsView>> Themes { get; } = [];
}
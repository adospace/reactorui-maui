// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IGenericMultiPage : IPage
{
    object? SelectedItem { get; set; }

    EventCommand<EventArgs>? CurrentPageChangedEvent { get; set; }

    EventCommand<EventArgs>? PagesChangedEvent { get; set; }
}

public abstract partial class MultiPage<T, TChild> : Page<T>, IGenericMultiPage where T : Microsoft.Maui.Controls.MultiPage<TChild>, new()
    where TChild : Microsoft.Maui.Controls.Page
{
    public MultiPage(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    object? IGenericMultiPage.SelectedItem { get; set; }

    EventCommand<EventArgs>? IGenericMultiPage.CurrentPageChangedEvent { get; set; }

    EventCommand<EventArgs>? IGenericMultiPage.PagesChangedEvent { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIGenericMultiPage = (IGenericMultiPage)this;
        SetPropertyValue(nativeControl, Microsoft.Maui.Controls.MultiPage<TChild>.SelectedItemProperty, thisAsIGenericMultiPage.SelectedItem);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingCurrentPageChangedEvent;
    private EventCommand<EventArgs>? _executingPagesChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIGenericMultiPage = (IGenericMultiPage)this;
        if (thisAsIGenericMultiPage.CurrentPageChangedEvent != null)
        {
            nativeControl.CurrentPageChanged += NativeControl_CurrentPageChanged;
        }

        if (thisAsIGenericMultiPage.PagesChangedEvent != null)
        {
            nativeControl.PagesChanged += NativeControl_PagesChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_CurrentPageChanged(object? sender, EventArgs e)
    {
        var thisAsIGenericMultiPage = (IGenericMultiPage)this;
        if (_executingCurrentPageChangedEvent == null || _executingCurrentPageChangedEvent.IsCompleted)
        {
            _executingCurrentPageChangedEvent = thisAsIGenericMultiPage.CurrentPageChangedEvent;
            _executingCurrentPageChangedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PagesChanged(object? sender, EventArgs e)
    {
        var thisAsIGenericMultiPage = (IGenericMultiPage)this;
        if (_executingPagesChangedEvent == null || _executingPagesChangedEvent.IsCompleted)
        {
            _executingPagesChangedEvent = thisAsIGenericMultiPage.PagesChangedEvent;
            _executingPagesChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.CurrentPageChanged -= NativeControl_CurrentPageChanged;
            nativeControl.PagesChanged -= NativeControl_PagesChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is MultiPage<T, TChild> @multipage)
        {
            if (_executingCurrentPageChangedEvent != null && !_executingCurrentPageChangedEvent.IsCompleted)
            {
                @multipage._executingCurrentPageChangedEvent = _executingCurrentPageChangedEvent;
            }

            if (_executingPagesChangedEvent != null && !_executingPagesChangedEvent.IsCompleted)
            {
                @multipage._executingPagesChangedEvent = _executingPagesChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class MultiPageExtensions
{
    public static T SelectedItem<T>(this T multiPage, object? selectedItem)
        where T : IGenericMultiPage
    {
        //multiPage.SelectedItem = selectedItem;
        multiPage.SelectedItem = selectedItem;
        return multiPage;
    }

    public static T SelectedItem<T>(this T multiPage, Func<object?> selectedItemFunc, IComponentWithState? componentWithState = null)
        where T : IGenericMultiPage
    {
        multiPage.SelectedItem = new PropertyValue<object?>(selectedItemFunc, componentWithState);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Action? currentPageChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new SyncEventCommand<EventArgs>(execute: currentPageChangedAction);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Action<EventArgs>? currentPageChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: currentPageChangedAction);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Action<object?, EventArgs>? currentPageChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: currentPageChangedAction);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Func<Task>? currentPageChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new AsyncEventCommand<EventArgs>(execute: currentPageChangedAction, runInBackground);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Func<EventArgs, Task>? currentPageChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: currentPageChangedAction, runInBackground);
        return multiPage;
    }

    public static T OnCurrentPageChanged<T>(this T multiPage, Func<object?, EventArgs, Task>? currentPageChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.CurrentPageChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: currentPageChangedAction, runInBackground);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Action? pagesChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new SyncEventCommand<EventArgs>(execute: pagesChangedAction);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Action<EventArgs>? pagesChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: pagesChangedAction);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Action<object?, EventArgs>? pagesChangedAction)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: pagesChangedAction);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Func<Task>? pagesChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new AsyncEventCommand<EventArgs>(execute: pagesChangedAction, runInBackground);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Func<EventArgs, Task>? pagesChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: pagesChangedAction, runInBackground);
        return multiPage;
    }

    public static T OnPagesChanged<T>(this T multiPage, Func<object?, EventArgs, Task>? pagesChangedAction, bool runInBackground = false)
        where T : IGenericMultiPage
    {
        multiPage.PagesChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: pagesChangedAction, runInBackground);
        return multiPage;
    }
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISwipeItems : IElement
{
    EventCommand<EventArgs>? CollectionChangedEvent { get; set; }
}

public partial class SwipeItems<T> : Element<T>, ISwipeItems where T : Microsoft.Maui.Controls.SwipeItems, new()
{
    public SwipeItems(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        SwipeItemsStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? ISwipeItems.CollectionChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SwipeItemsStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingCollectionChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsISwipeItems = (ISwipeItems)this;
        if (thisAsISwipeItems.CollectionChangedEvent != null)
        {
            NativeControl.CollectionChanged += NativeControl_CollectionChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_CollectionChanged(object? sender, EventArgs e)
    {
        var thisAsISwipeItems = (ISwipeItems)this;
        if (_executingCollectionChangedEvent == null || _executingCollectionChangedEvent.IsCompleted)
        {
            _executingCollectionChangedEvent = thisAsISwipeItems.CollectionChangedEvent;
            _executingCollectionChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.CollectionChanged -= NativeControl_CollectionChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SwipeItems<T> @swipeitems)
        {
            if (_executingCollectionChangedEvent != null && !_executingCollectionChangedEvent.IsCompleted)
            {
                @swipeitems._executingCollectionChangedEvent = _executingCollectionChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SwipeItems : SwipeItems<Microsoft.Maui.Controls.SwipeItems>
{
    public SwipeItems(Action<Microsoft.Maui.Controls.SwipeItems?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public SwipeItems(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class SwipeItemsExtensions
{
    public static T Mode<T>(this T swipeItems, Microsoft.Maui.SwipeMode mode)
        where T : ISwipeItems
    {
        //swipeItems.Mode = mode;
        swipeItems.SetProperty(Microsoft.Maui.Controls.SwipeItems.ModeProperty, mode);
        return swipeItems;
    }

    public static T Mode<T>(this T swipeItems, Func<Microsoft.Maui.SwipeMode> modeFunc, IComponentWithState? componentWithState = null)
        where T : ISwipeItems
    {
        swipeItems.SetProperty(Microsoft.Maui.Controls.SwipeItems.ModeProperty, new PropertyValue<Microsoft.Maui.SwipeMode>(modeFunc, componentWithState));
        return swipeItems;
    }

    public static T SwipeBehaviorOnInvoked<T>(this T swipeItems, Microsoft.Maui.SwipeBehaviorOnInvoked swipeBehaviorOnInvoked)
        where T : ISwipeItems
    {
        //swipeItems.SwipeBehaviorOnInvoked = swipeBehaviorOnInvoked;
        swipeItems.SetProperty(Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty, swipeBehaviorOnInvoked);
        return swipeItems;
    }

    public static T SwipeBehaviorOnInvoked<T>(this T swipeItems, Func<Microsoft.Maui.SwipeBehaviorOnInvoked> swipeBehaviorOnInvokedFunc, IComponentWithState? componentWithState = null)
        where T : ISwipeItems
    {
        swipeItems.SetProperty(Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty, new PropertyValue<Microsoft.Maui.SwipeBehaviorOnInvoked>(swipeBehaviorOnInvokedFunc, componentWithState));
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Action? collectionChangedAction)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new SyncEventCommand<EventArgs>(execute: collectionChangedAction);
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Action<EventArgs>? collectionChangedAction)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: collectionChangedAction);
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Action<object?, EventArgs>? collectionChangedAction)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: collectionChangedAction);
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Func<Task>? collectionChangedAction, bool runInBackground = false)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new AsyncEventCommand<EventArgs>(execute: collectionChangedAction, runInBackground);
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Func<EventArgs, Task>? collectionChangedAction, bool runInBackground = false)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: collectionChangedAction, runInBackground);
        return swipeItems;
    }

    public static T OnCollectionChanged<T>(this T swipeItems, Func<object?, EventArgs, Task>? collectionChangedAction, bool runInBackground = false)
        where T : ISwipeItems
    {
        swipeItems.CollectionChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: collectionChangedAction, runInBackground);
        return swipeItems;
    }
}

public static partial class SwipeItemsStyles
{
    public static Action<ISwipeItems>? Default { get; set; }
    public static Dictionary<string, Action<ISwipeItems>> Themes { get; } = [];
}
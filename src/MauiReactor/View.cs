// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IView : IVisualElement
{
}

public abstract partial class View<T> : VisualElement<T>, IView where T : Microsoft.Maui.Controls.View, new()
{
    protected View(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ViewStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class ViewExtensions
{
    public static T VerticalOptions<T>(this T view, Microsoft.Maui.Controls.LayoutOptions verticalOptions)
        where T : IView
    {
        //view.VerticalOptions = verticalOptions;
        view.SetProperty(Microsoft.Maui.Controls.View.VerticalOptionsProperty, verticalOptions);
        return view;
    }

    public static T VerticalOptions<T>(this T view, Func<Microsoft.Maui.Controls.LayoutOptions> verticalOptionsFunc, IComponentWithState? componentWithState = null)
        where T : IView
    {
        view.SetProperty(Microsoft.Maui.Controls.View.VerticalOptionsProperty, new PropertyValue<Microsoft.Maui.Controls.LayoutOptions>(verticalOptionsFunc, componentWithState));
        return view;
    }

    public static T HorizontalOptions<T>(this T view, Microsoft.Maui.Controls.LayoutOptions horizontalOptions)
        where T : IView
    {
        //view.HorizontalOptions = horizontalOptions;
        view.SetProperty(Microsoft.Maui.Controls.View.HorizontalOptionsProperty, horizontalOptions);
        return view;
    }

    public static T HorizontalOptions<T>(this T view, Func<Microsoft.Maui.Controls.LayoutOptions> horizontalOptionsFunc, IComponentWithState? componentWithState = null)
        where T : IView
    {
        view.SetProperty(Microsoft.Maui.Controls.View.HorizontalOptionsProperty, new PropertyValue<Microsoft.Maui.Controls.LayoutOptions>(horizontalOptionsFunc, componentWithState));
        return view;
    }

    public static T Margin<T>(this T view, Microsoft.Maui.Thickness margin, RxThicknessAnimation? customAnimation = null)
        where T : IView
    {
        //view.Margin = margin;
        view.SetProperty(Microsoft.Maui.Controls.View.MarginProperty, margin);
        view.AppendAnimatable(Microsoft.Maui.Controls.View.MarginProperty, customAnimation ?? new RxSimpleThicknessAnimation(margin));
        return view;
    }

    public static T Margin<T>(this T view, Func<Microsoft.Maui.Thickness> marginFunc, IComponentWithState? componentWithState = null)
        where T : IView
    {
        view.SetProperty(Microsoft.Maui.Controls.View.MarginProperty, new PropertyValue<Microsoft.Maui.Thickness>(marginFunc, componentWithState));
        return view;
    }

    public static T Margin<T>(this T view, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null)
        where T : IView
    {
        //view.Margin = new Thickness(leftRight, topBottom);
        view.SetProperty(Microsoft.Maui.Controls.View.MarginProperty, new Thickness(leftRight, topBottom));
        view.AppendAnimatable(Microsoft.Maui.Controls.View.MarginProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(leftRight, topBottom)));
        return view;
    }

    public static T Margin<T>(this T view, double uniformSize, RxThicknessAnimation? customAnimation = null)
        where T : IView
    {
        //view.Margin = new Thickness(uniformSize);
        view.SetProperty(Microsoft.Maui.Controls.View.MarginProperty, new Thickness(uniformSize));
        view.AppendAnimatable(Microsoft.Maui.Controls.View.MarginProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(uniformSize)));
        return view;
    }

    public static T Margin<T>(this T view, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null)
        where T : IView
    {
        //view.Margin = new Thickness(left, top, right, bottom);
        view.SetProperty(Microsoft.Maui.Controls.View.MarginProperty, new Thickness(left, top, right, bottom));
        view.AppendAnimatable(Microsoft.Maui.Controls.View.MarginProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(left, top, right, bottom)));
        return view;
    }
}

public static partial class ViewStyles
{
    public static Action<IView>? Default { get; set; }
    public static Dictionary<string, Action<IView>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IPicker : IView
{
    EventCommand<EventArgs>? SelectedIndexChangedEvent { get; set; }
}

public partial class Picker<T> : View<T>, IPicker where T : Microsoft.Maui.Controls.Picker, new()
{
    public Picker(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        PickerStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IPicker.SelectedIndexChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PickerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingSelectedIndexChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIPicker = (IPicker)this;
        if (thisAsIPicker.SelectedIndexChangedEvent != null)
        {
            nativeControl.SelectedIndexChanged += NativeControl_SelectedIndexChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_SelectedIndexChanged(object? sender, EventArgs e)
    {
        var thisAsIPicker = (IPicker)this;
        if (_executingSelectedIndexChangedEvent == null || _executingSelectedIndexChangedEvent.IsCompleted)
        {
            _executingSelectedIndexChangedEvent = thisAsIPicker.SelectedIndexChangedEvent;
            _executingSelectedIndexChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.SelectedIndexChanged -= NativeControl_SelectedIndexChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Picker<T> @picker)
        {
            if (_executingSelectedIndexChangedEvent != null && !_executingSelectedIndexChangedEvent.IsCompleted)
            {
                @picker._executingSelectedIndexChangedEvent = _executingSelectedIndexChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Picker : Picker<Microsoft.Maui.Controls.Picker>
{
    public Picker(Action<Microsoft.Maui.Controls.Picker?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public Picker(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class PickerExtensions
{
    public static T TextColor<T>(this T picker, Microsoft.Maui.Graphics.Color textColor)
        where T : IPicker
    {
        //picker.TextColor = textColor;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TextColorProperty, textColor);
        return picker;
    }

    public static T TextColor<T>(this T picker, Func<Microsoft.Maui.Graphics.Color> textColorFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc, componentWithState));
        return picker;
    }

    public static T CharacterSpacing<T>(this T picker, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IPicker
    {
        //picker.CharacterSpacing = characterSpacing;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.CharacterSpacingProperty, characterSpacing);
        picker.AppendAnimatable(Microsoft.Maui.Controls.Picker.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return picker;
    }

    public static T CharacterSpacing<T>(this T picker, Func<double> characterSpacingFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc, componentWithState));
        return picker;
    }

    public static T Title<T>(this T picker, string title)
        where T : IPicker
    {
        //picker.Title = title;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TitleProperty, title);
        return picker;
    }

    public static T Title<T>(this T picker, Func<string> titleFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TitleProperty, new PropertyValue<string>(titleFunc, componentWithState));
        return picker;
    }

    public static T TitleColor<T>(this T picker, Microsoft.Maui.Graphics.Color titleColor)
        where T : IPicker
    {
        //picker.TitleColor = titleColor;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TitleColorProperty, titleColor);
        return picker;
    }

    public static T TitleColor<T>(this T picker, Func<Microsoft.Maui.Graphics.Color> titleColorFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.TitleColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(titleColorFunc, componentWithState));
        return picker;
    }

    public static T SelectedIndex<T>(this T picker, int selectedIndex)
        where T : IPicker
    {
        //picker.SelectedIndex = selectedIndex;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.SelectedIndexProperty, selectedIndex);
        return picker;
    }

    public static T SelectedIndex<T>(this T picker, Func<int> selectedIndexFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.SelectedIndexProperty, new PropertyValue<int>(selectedIndexFunc, componentWithState));
        return picker;
    }

    public static T FontFamily<T>(this T picker, string fontFamily)
        where T : IPicker
    {
        //picker.FontFamily = fontFamily;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontFamilyProperty, fontFamily);
        return picker;
    }

    public static T FontFamily<T>(this T picker, Func<string> fontFamilyFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc, componentWithState));
        return picker;
    }

    public static T FontSize<T>(this T picker, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IPicker
    {
        //picker.FontSize = fontSize;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontSizeProperty, fontSize);
        picker.AppendAnimatable(Microsoft.Maui.Controls.Picker.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return picker;
    }

    public static T FontSize<T>(this T picker, Func<double> fontSizeFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontSizeProperty, new PropertyValue<double>(fontSizeFunc, componentWithState));
        return picker;
    }

    public static T FontAttributes<T>(this T picker, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IPicker
    {
        //picker.FontAttributes = fontAttributes;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontAttributesProperty, fontAttributes);
        return picker;
    }

    public static T FontAttributes<T>(this T picker, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc, componentWithState));
        return picker;
    }

    public static T FontAutoScalingEnabled<T>(this T picker, bool fontAutoScalingEnabled)
        where T : IPicker
    {
        //picker.FontAutoScalingEnabled = fontAutoScalingEnabled;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return picker;
    }

    public static T FontAutoScalingEnabled<T>(this T picker, Func<bool> fontAutoScalingEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc, componentWithState));
        return picker;
    }

    public static T HorizontalTextAlignment<T>(this T picker, Microsoft.Maui.TextAlignment horizontalTextAlignment)
        where T : IPicker
    {
        //picker.HorizontalTextAlignment = horizontalTextAlignment;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.HorizontalTextAlignmentProperty, horizontalTextAlignment);
        return picker;
    }

    public static T HorizontalTextAlignment<T>(this T picker, Func<Microsoft.Maui.TextAlignment> horizontalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.HorizontalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc, componentWithState));
        return picker;
    }

    public static T VerticalTextAlignment<T>(this T picker, Microsoft.Maui.TextAlignment verticalTextAlignment)
        where T : IPicker
    {
        //picker.VerticalTextAlignment = verticalTextAlignment;
        picker.SetProperty(Microsoft.Maui.Controls.Picker.VerticalTextAlignmentProperty, verticalTextAlignment);
        return picker;
    }

    public static T VerticalTextAlignment<T>(this T picker, Func<Microsoft.Maui.TextAlignment> verticalTextAlignmentFunc, IComponentWithState? componentWithState = null)
        where T : IPicker
    {
        picker.SetProperty(Microsoft.Maui.Controls.Picker.VerticalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc, componentWithState));
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Action? selectedIndexChangedAction)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new SyncEventCommand<EventArgs>(execute: selectedIndexChangedAction);
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Action<EventArgs>? selectedIndexChangedAction)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: selectedIndexChangedAction);
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Action<object?, EventArgs>? selectedIndexChangedAction)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: selectedIndexChangedAction);
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Func<Task>? selectedIndexChangedAction, bool runInBackground = false)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new AsyncEventCommand<EventArgs>(execute: selectedIndexChangedAction, runInBackground);
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Func<EventArgs, Task>? selectedIndexChangedAction, bool runInBackground = false)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: selectedIndexChangedAction, runInBackground);
        return picker;
    }

    public static T OnSelectedIndexChanged<T>(this T picker, Func<object?, EventArgs, Task>? selectedIndexChangedAction, bool runInBackground = false)
        where T : IPicker
    {
        picker.SelectedIndexChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: selectedIndexChangedAction, runInBackground);
        return picker;
    }
}

public static partial class PickerStyles
{
    public static Action<IPicker>? Default { get; set; }
    public static Dictionary<string, Action<IPicker>> Themes { get; } = [];
}
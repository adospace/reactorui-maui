// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IPanGestureRecognizer : IGestureRecognizer
{
    EventCommand<PanUpdatedEventArgs>? PanUpdatedEvent { get; set; }
}

public partial class PanGestureRecognizer<T> : GestureRecognizer<T>, IPanGestureRecognizer where T : Microsoft.Maui.Controls.PanGestureRecognizer, new()
{
    public PanGestureRecognizer(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        PanGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<PanUpdatedEventArgs>? IPanGestureRecognizer.PanUpdatedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PanGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<PanUpdatedEventArgs>? _executingPanUpdatedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIPanGestureRecognizer = (IPanGestureRecognizer)this;
        if (thisAsIPanGestureRecognizer.PanUpdatedEvent != null)
        {
            nativeControl.PanUpdated += NativeControl_PanUpdated;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_PanUpdated(object? sender, PanUpdatedEventArgs e)
    {
        var thisAsIPanGestureRecognizer = (IPanGestureRecognizer)this;
        if (_executingPanUpdatedEvent == null || _executingPanUpdatedEvent.IsCompleted)
        {
            _executingPanUpdatedEvent = thisAsIPanGestureRecognizer.PanUpdatedEvent;
            _executingPanUpdatedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.PanUpdated -= NativeControl_PanUpdated;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is PanGestureRecognizer<T> @pangesturerecognizer)
        {
            if (_executingPanUpdatedEvent != null && !_executingPanUpdatedEvent.IsCompleted)
            {
                @pangesturerecognizer._executingPanUpdatedEvent = _executingPanUpdatedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class PanGestureRecognizer : PanGestureRecognizer<Microsoft.Maui.Controls.PanGestureRecognizer>
{
    public PanGestureRecognizer(Action<Microsoft.Maui.Controls.PanGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public PanGestureRecognizer(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class PanGestureRecognizerExtensions
{
    public static T TouchPoints<T>(this T panGestureRecognizer, int touchPoints)
        where T : IPanGestureRecognizer
    {
        //panGestureRecognizer.TouchPoints = touchPoints;
        panGestureRecognizer.SetProperty(Microsoft.Maui.Controls.PanGestureRecognizer.TouchPointsProperty, touchPoints);
        return panGestureRecognizer;
    }

    public static T TouchPoints<T>(this T panGestureRecognizer, Func<int> touchPointsFunc, IComponentWithState? componentWithState = null)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.SetProperty(Microsoft.Maui.Controls.PanGestureRecognizer.TouchPointsProperty, new PropertyValue<int>(touchPointsFunc, componentWithState));
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Action? panUpdatedAction)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new SyncEventCommand<PanUpdatedEventArgs>(execute: panUpdatedAction);
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Action<PanUpdatedEventArgs>? panUpdatedAction)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new SyncEventCommand<PanUpdatedEventArgs>(executeWithArgs: panUpdatedAction);
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Action<object?, PanUpdatedEventArgs>? panUpdatedAction)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new SyncEventCommand<PanUpdatedEventArgs>(executeWithFullArgs: panUpdatedAction);
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Func<Task>? panUpdatedAction, bool runInBackground = false)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new AsyncEventCommand<PanUpdatedEventArgs>(execute: panUpdatedAction, runInBackground);
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Func<PanUpdatedEventArgs, Task>? panUpdatedAction, bool runInBackground = false)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new AsyncEventCommand<PanUpdatedEventArgs>(executeWithArgs: panUpdatedAction, runInBackground);
        return panGestureRecognizer;
    }

    public static T OnPanUpdated<T>(this T panGestureRecognizer, Func<object?, PanUpdatedEventArgs, Task>? panUpdatedAction, bool runInBackground = false)
        where T : IPanGestureRecognizer
    {
        panGestureRecognizer.PanUpdatedEvent = new AsyncEventCommand<PanUpdatedEventArgs>(executeWithFullArgs: panUpdatedAction, runInBackground);
        return panGestureRecognizer;
    }
}

public static partial class PanGestureRecognizerStyles
{
    public static Action<IPanGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<IPanGestureRecognizer>> Themes { get; } = [];
}
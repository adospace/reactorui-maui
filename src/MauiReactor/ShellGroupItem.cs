// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IShellGroupItem : IBaseShellItem
{
}

public partial class ShellGroupItem<T> : BaseShellItem<T>, IShellGroupItem where T : Microsoft.Maui.Controls.ShellGroupItem, new()
{
    public ShellGroupItem(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ShellGroupItemStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ShellGroupItemStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class ShellGroupItem : ShellGroupItem<Microsoft.Maui.Controls.ShellGroupItem>
{
    public ShellGroupItem(Action<Microsoft.Maui.Controls.ShellGroupItem?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public ShellGroupItem(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class ShellGroupItemExtensions
{
    public static T FlyoutDisplayOptions<T>(this T shellGroupItem, Microsoft.Maui.Controls.FlyoutDisplayOptions flyoutDisplayOptions)
        where T : IShellGroupItem
    {
        //shellGroupItem.FlyoutDisplayOptions = flyoutDisplayOptions;
        shellGroupItem.SetProperty(Microsoft.Maui.Controls.ShellGroupItem.FlyoutDisplayOptionsProperty, flyoutDisplayOptions);
        return shellGroupItem;
    }

    public static T FlyoutDisplayOptions<T>(this T shellGroupItem, Func<Microsoft.Maui.Controls.FlyoutDisplayOptions> flyoutDisplayOptionsFunc, IComponentWithState? componentWithState = null)
        where T : IShellGroupItem
    {
        shellGroupItem.SetProperty(Microsoft.Maui.Controls.ShellGroupItem.FlyoutDisplayOptionsProperty, new PropertyValue<Microsoft.Maui.Controls.FlyoutDisplayOptions>(flyoutDisplayOptionsFunc, componentWithState));
        return shellGroupItem;
    }
}

public static partial class ShellGroupItemStyles
{
    public static Action<IShellGroupItem>? Default { get; set; }
    public static Dictionary<string, Action<IShellGroupItem>> Themes { get; } = [];
}
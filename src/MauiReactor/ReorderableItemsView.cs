// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IReorderableItemsView : IGroupableItemsView
{
    EventCommand<EventArgs>? ReorderCompletedEvent { get; set; }
}

public partial class ReorderableItemsView<T> : GroupableItemsView<T>, IReorderableItemsView where T : Microsoft.Maui.Controls.ReorderableItemsView, new()
{
    public ReorderableItemsView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ReorderableItemsViewStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IReorderableItemsView.ReorderCompletedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ReorderableItemsViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingReorderCompletedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIReorderableItemsView = (IReorderableItemsView)this;
        if (thisAsIReorderableItemsView.ReorderCompletedEvent != null)
        {
            NativeControl.ReorderCompleted += NativeControl_ReorderCompleted;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_ReorderCompleted(object? sender, EventArgs e)
    {
        var thisAsIReorderableItemsView = (IReorderableItemsView)this;
        if (_executingReorderCompletedEvent == null || _executingReorderCompletedEvent.IsCompleted)
        {
            _executingReorderCompletedEvent = thisAsIReorderableItemsView.ReorderCompletedEvent;
            _executingReorderCompletedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.ReorderCompleted -= NativeControl_ReorderCompleted;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is ReorderableItemsView<T> @reorderableitemsview)
        {
            if (_executingReorderCompletedEvent != null && !_executingReorderCompletedEvent.IsCompleted)
            {
                @reorderableitemsview._executingReorderCompletedEvent = _executingReorderCompletedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class ReorderableItemsView : ReorderableItemsView<Microsoft.Maui.Controls.ReorderableItemsView>
{
    public ReorderableItemsView(Action<Microsoft.Maui.Controls.ReorderableItemsView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public ReorderableItemsView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class ReorderableItemsViewExtensions
{
    public static T CanMixGroups<T>(this T reorderableItemsView, bool canMixGroups)
        where T : IReorderableItemsView
    {
        //reorderableItemsView.CanMixGroups = canMixGroups;
        reorderableItemsView.SetProperty(Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty, canMixGroups);
        return reorderableItemsView;
    }

    public static T CanMixGroups<T>(this T reorderableItemsView, Func<bool> canMixGroupsFunc, IComponentWithState? componentWithState = null)
        where T : IReorderableItemsView
    {
        reorderableItemsView.SetProperty(Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty, new PropertyValue<bool>(canMixGroupsFunc, componentWithState));
        return reorderableItemsView;
    }

    public static T CanReorderItems<T>(this T reorderableItemsView, bool canReorderItems)
        where T : IReorderableItemsView
    {
        //reorderableItemsView.CanReorderItems = canReorderItems;
        reorderableItemsView.SetProperty(Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty, canReorderItems);
        return reorderableItemsView;
    }

    public static T CanReorderItems<T>(this T reorderableItemsView, Func<bool> canReorderItemsFunc, IComponentWithState? componentWithState = null)
        where T : IReorderableItemsView
    {
        reorderableItemsView.SetProperty(Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty, new PropertyValue<bool>(canReorderItemsFunc, componentWithState));
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Action? reorderCompletedAction)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new SyncEventCommand<EventArgs>(execute: reorderCompletedAction);
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Action<EventArgs>? reorderCompletedAction)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: reorderCompletedAction);
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Action<object?, EventArgs>? reorderCompletedAction)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: reorderCompletedAction);
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Func<Task>? reorderCompletedAction, bool runInBackground = false)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new AsyncEventCommand<EventArgs>(execute: reorderCompletedAction, runInBackground);
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Func<EventArgs, Task>? reorderCompletedAction, bool runInBackground = false)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: reorderCompletedAction, runInBackground);
        return reorderableItemsView;
    }

    public static T OnReorderCompleted<T>(this T reorderableItemsView, Func<object?, EventArgs, Task>? reorderCompletedAction, bool runInBackground = false)
        where T : IReorderableItemsView
    {
        reorderableItemsView.ReorderCompletedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: reorderCompletedAction, runInBackground);
        return reorderableItemsView;
    }
}

public static partial class ReorderableItemsViewStyles
{
    public static Action<IReorderableItemsView>? Default { get; set; }
    public static Dictionary<string, Action<IReorderableItemsView>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IPinchGestureRecognizer : IGestureRecognizer
{
    EventCommand<PinchGestureUpdatedEventArgs>? PinchUpdatedEvent { get; set; }
}

public sealed partial class PinchGestureRecognizer : GestureRecognizer<Microsoft.Maui.Controls.PinchGestureRecognizer>, IPinchGestureRecognizer
{
    public PinchGestureRecognizer(Action<Microsoft.Maui.Controls.PinchGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
        PinchGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<PinchGestureUpdatedEventArgs>? IPinchGestureRecognizer.PinchUpdatedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PinchGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<PinchGestureUpdatedEventArgs>? _executingPinchUpdatedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIPinchGestureRecognizer = (IPinchGestureRecognizer)this;
        if (thisAsIPinchGestureRecognizer.PinchUpdatedEvent != null)
        {
            nativeControl.PinchUpdated += NativeControl_PinchUpdated;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_PinchUpdated(object? sender, PinchGestureUpdatedEventArgs e)
    {
        var thisAsIPinchGestureRecognizer = (IPinchGestureRecognizer)this;
        if (_executingPinchUpdatedEvent == null || _executingPinchUpdatedEvent.IsCompleted)
        {
            _executingPinchUpdatedEvent = thisAsIPinchGestureRecognizer.PinchUpdatedEvent;
            _executingPinchUpdatedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.PinchUpdated -= NativeControl_PinchUpdated;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is PinchGestureRecognizer @pinchgesturerecognizer)
        {
            if (_executingPinchUpdatedEvent != null && !_executingPinchUpdatedEvent.IsCompleted)
            {
                @pinchgesturerecognizer._executingPinchUpdatedEvent = _executingPinchUpdatedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class PinchGestureRecognizerExtensions
{
    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Action? pinchUpdatedAction)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new SyncEventCommand<PinchGestureUpdatedEventArgs>(execute: pinchUpdatedAction);
        return pinchGestureRecognizer;
    }

    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Action<PinchGestureUpdatedEventArgs>? pinchUpdatedAction)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new SyncEventCommand<PinchGestureUpdatedEventArgs>(executeWithArgs: pinchUpdatedAction);
        return pinchGestureRecognizer;
    }

    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Action<object?, PinchGestureUpdatedEventArgs>? pinchUpdatedAction)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new SyncEventCommand<PinchGestureUpdatedEventArgs>(executeWithFullArgs: pinchUpdatedAction);
        return pinchGestureRecognizer;
    }

    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Func<Task>? pinchUpdatedAction, bool runInBackground = false)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new AsyncEventCommand<PinchGestureUpdatedEventArgs>(execute: pinchUpdatedAction, runInBackground);
        return pinchGestureRecognizer;
    }

    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Func<PinchGestureUpdatedEventArgs, Task>? pinchUpdatedAction, bool runInBackground = false)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new AsyncEventCommand<PinchGestureUpdatedEventArgs>(executeWithArgs: pinchUpdatedAction, runInBackground);
        return pinchGestureRecognizer;
    }

    public static T OnPinchUpdated<T>(this T pinchGestureRecognizer, Func<object?, PinchGestureUpdatedEventArgs, Task>? pinchUpdatedAction, bool runInBackground = false)
        where T : IPinchGestureRecognizer
    {
        pinchGestureRecognizer.PinchUpdatedEvent = new AsyncEventCommand<PinchGestureUpdatedEventArgs>(executeWithFullArgs: pinchUpdatedAction, runInBackground);
        return pinchGestureRecognizer;
    }
}

public static partial class PinchGestureRecognizerStyles
{
    public static Action<IPinchGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<IPinchGestureRecognizer>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IFlyoutPage : IPage
{
    EventCommand<EventArgs>? IsPresentedChangedEvent { get; set; }
}

public partial class FlyoutPage<T> : Page<T>, IFlyoutPage where T : Microsoft.Maui.Controls.FlyoutPage, new()
{
    public FlyoutPage(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        FlyoutPageStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IFlyoutPage.IsPresentedChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && FlyoutPageStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingIsPresentedChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIFlyoutPage = (IFlyoutPage)this;
        if (thisAsIFlyoutPage.IsPresentedChangedEvent != null)
        {
            NativeControl.IsPresentedChanged += NativeControl_IsPresentedChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_IsPresentedChanged(object? sender, EventArgs e)
    {
        var thisAsIFlyoutPage = (IFlyoutPage)this;
        if (_executingIsPresentedChangedEvent == null || _executingIsPresentedChangedEvent.IsCompleted)
        {
            _executingIsPresentedChangedEvent = thisAsIFlyoutPage.IsPresentedChangedEvent;
            _executingIsPresentedChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.IsPresentedChanged -= NativeControl_IsPresentedChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is FlyoutPage<T> @flyoutpage)
        {
            if (_executingIsPresentedChangedEvent != null && !_executingIsPresentedChangedEvent.IsCompleted)
            {
                @flyoutpage._executingIsPresentedChangedEvent = _executingIsPresentedChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class FlyoutPage : FlyoutPage<Microsoft.Maui.Controls.FlyoutPage>
{
    public FlyoutPage(Action<Microsoft.Maui.Controls.FlyoutPage?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public FlyoutPage(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class FlyoutPageExtensions
{
    public static T IsGestureEnabled<T>(this T flyoutPage, bool isGestureEnabled)
        where T : IFlyoutPage
    {
        //flyoutPage.IsGestureEnabled = isGestureEnabled;
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty, isGestureEnabled);
        return flyoutPage;
    }

    public static T IsGestureEnabled<T>(this T flyoutPage, Func<bool> isGestureEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IFlyoutPage
    {
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty, new PropertyValue<bool>(isGestureEnabledFunc, componentWithState));
        return flyoutPage;
    }

    public static T IsPresented<T>(this T flyoutPage, bool isPresented)
        where T : IFlyoutPage
    {
        //flyoutPage.IsPresented = isPresented;
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty, isPresented);
        return flyoutPage;
    }

    public static T IsPresented<T>(this T flyoutPage, Func<bool> isPresentedFunc, IComponentWithState? componentWithState = null)
        where T : IFlyoutPage
    {
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty, new PropertyValue<bool>(isPresentedFunc, componentWithState));
        return flyoutPage;
    }

    public static T FlyoutLayoutBehavior<T>(this T flyoutPage, Microsoft.Maui.Controls.FlyoutLayoutBehavior flyoutLayoutBehavior)
        where T : IFlyoutPage
    {
        //flyoutPage.FlyoutLayoutBehavior = flyoutLayoutBehavior;
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty, flyoutLayoutBehavior);
        return flyoutPage;
    }

    public static T FlyoutLayoutBehavior<T>(this T flyoutPage, Func<Microsoft.Maui.Controls.FlyoutLayoutBehavior> flyoutLayoutBehaviorFunc, IComponentWithState? componentWithState = null)
        where T : IFlyoutPage
    {
        flyoutPage.SetProperty(Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty, new PropertyValue<Microsoft.Maui.Controls.FlyoutLayoutBehavior>(flyoutLayoutBehaviorFunc, componentWithState));
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Action? isPresentedChangedAction)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new SyncEventCommand<EventArgs>(execute: isPresentedChangedAction);
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Action<EventArgs>? isPresentedChangedAction)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: isPresentedChangedAction);
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Action<object?, EventArgs>? isPresentedChangedAction)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: isPresentedChangedAction);
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Func<Task>? isPresentedChangedAction, bool runInBackground = false)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new AsyncEventCommand<EventArgs>(execute: isPresentedChangedAction, runInBackground);
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Func<EventArgs, Task>? isPresentedChangedAction, bool runInBackground = false)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: isPresentedChangedAction, runInBackground);
        return flyoutPage;
    }

    public static T OnIsPresentedChanged<T>(this T flyoutPage, Func<object?, EventArgs, Task>? isPresentedChangedAction, bool runInBackground = false)
        where T : IFlyoutPage
    {
        flyoutPage.IsPresentedChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: isPresentedChangedAction, runInBackground);
        return flyoutPage;
    }
}

public static partial class FlyoutPageStyles
{
    public static Action<IFlyoutPage>? Default { get; set; }
    public static Dictionary<string, Action<IFlyoutPage>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor
{
    public partial interface IPointerGestureRecognizer : IGestureRecognizer
    {
        Action? PointerEnteredAction { get; set; }

        Action<object?, PointerEventArgs>? PointerEnteredActionWithArgs { get; set; }

        Action? PointerExitedAction { get; set; }

        Action<object?, PointerEventArgs>? PointerExitedActionWithArgs { get; set; }

        Action? PointerMovedAction { get; set; }

        Action<object?, PointerEventArgs>? PointerMovedActionWithArgs { get; set; }
    }

    public sealed partial class PointerGestureRecognizer : GestureRecognizer<Microsoft.Maui.Controls.PointerGestureRecognizer>, IPointerGestureRecognizer
    {
        public PointerGestureRecognizer()
        {
        }

        public PointerGestureRecognizer(Action<Microsoft.Maui.Controls.PointerGestureRecognizer?> componentRefAction) : base(componentRefAction)
        {
        }

        Action? IPointerGestureRecognizer.PointerEnteredAction { get; set; }

        Action<object?, PointerEventArgs>? IPointerGestureRecognizer.PointerEnteredActionWithArgs { get; set; }

        Action? IPointerGestureRecognizer.PointerExitedAction { get; set; }

        Action<object?, PointerEventArgs>? IPointerGestureRecognizer.PointerExitedActionWithArgs { get; set; }

        Action? IPointerGestureRecognizer.PointerMovedAction { get; set; }

        Action<object?, PointerEventArgs>? IPointerGestureRecognizer.PointerMovedActionWithArgs { get; set; }

        protected override void OnUpdate()
        {
            OnBeginUpdate();
            base.OnUpdate();
            OnEndUpdate();
        }

        partial void OnBeginUpdate();
        partial void OnEndUpdate();
        partial void OnAttachingNativeEvents();
        partial void OnDetachingNativeEvents();
        protected override void OnAttachNativeEvents()
        {
            Validate.EnsureNotNull(NativeControl);
            var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
            if (thisAsIPointerGestureRecognizer.PointerEnteredAction != null || thisAsIPointerGestureRecognizer.PointerEnteredActionWithArgs != null)
            {
                NativeControl.PointerEntered += NativeControl_PointerEntered;
            }

            if (thisAsIPointerGestureRecognizer.PointerExitedAction != null || thisAsIPointerGestureRecognizer.PointerExitedActionWithArgs != null)
            {
                NativeControl.PointerExited += NativeControl_PointerExited;
            }

            if (thisAsIPointerGestureRecognizer.PointerMovedAction != null || thisAsIPointerGestureRecognizer.PointerMovedActionWithArgs != null)
            {
                NativeControl.PointerMoved += NativeControl_PointerMoved;
            }

            OnAttachingNativeEvents();
            base.OnAttachNativeEvents();
        }

        private void NativeControl_PointerEntered(object? sender, PointerEventArgs e)
        {
            var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
            thisAsIPointerGestureRecognizer.PointerEnteredAction?.Invoke();
            thisAsIPointerGestureRecognizer.PointerEnteredActionWithArgs?.Invoke(sender, e);
        }

        private void NativeControl_PointerExited(object? sender, PointerEventArgs e)
        {
            var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
            thisAsIPointerGestureRecognizer.PointerExitedAction?.Invoke();
            thisAsIPointerGestureRecognizer.PointerExitedActionWithArgs?.Invoke(sender, e);
        }

        private void NativeControl_PointerMoved(object? sender, PointerEventArgs e)
        {
            var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
            thisAsIPointerGestureRecognizer.PointerMovedAction?.Invoke();
            thisAsIPointerGestureRecognizer.PointerMovedActionWithArgs?.Invoke(sender, e);
        }

        protected override void OnDetachNativeEvents()
        {
            if (NativeControl != null)
            {
                NativeControl.PointerEntered -= NativeControl_PointerEntered;
                NativeControl.PointerExited -= NativeControl_PointerExited;
                NativeControl.PointerMoved -= NativeControl_PointerMoved;
            }

            OnDetachingNativeEvents();
            base.OnDetachNativeEvents();
        }
    }

    public static partial class PointerGestureRecognizerExtensions
    {
        public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Action? pointerEnteredAction)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerEnteredAction = pointerEnteredAction;
            return pointerGestureRecognizer;
        }

        public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerEnteredActionWithArgs)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerEnteredActionWithArgs = pointerEnteredActionWithArgs;
            return pointerGestureRecognizer;
        }

        public static T OnPointerExited<T>(this T pointerGestureRecognizer, Action? pointerExitedAction)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerExitedAction = pointerExitedAction;
            return pointerGestureRecognizer;
        }

        public static T OnPointerExited<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerExitedActionWithArgs)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerExitedActionWithArgs = pointerExitedActionWithArgs;
            return pointerGestureRecognizer;
        }

        public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Action? pointerMovedAction)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerMovedAction = pointerMovedAction;
            return pointerGestureRecognizer;
        }

        public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerMovedActionWithArgs)
            where T : IPointerGestureRecognizer
        {
            pointerGestureRecognizer.PointerMovedActionWithArgs = pointerMovedActionWithArgs;
            return pointerGestureRecognizer;
        }
    }
}
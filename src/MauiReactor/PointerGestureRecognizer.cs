// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IPointerGestureRecognizer : IGestureRecognizer
{
    EventCommand<PointerEventArgs>? PointerEnteredEvent { get; set; }

    EventCommand<PointerEventArgs>? PointerExitedEvent { get; set; }

    EventCommand<PointerEventArgs>? PointerMovedEvent { get; set; }

    EventCommand<PointerEventArgs>? PointerPressedEvent { get; set; }

    EventCommand<PointerEventArgs>? PointerReleasedEvent { get; set; }
}

public sealed partial class PointerGestureRecognizer : GestureRecognizer<Microsoft.Maui.Controls.PointerGestureRecognizer>, IPointerGestureRecognizer
{
    public PointerGestureRecognizer(Action<Microsoft.Maui.Controls.PointerGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
        PointerGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<PointerEventArgs>? IPointerGestureRecognizer.PointerEnteredEvent { get; set; }

    EventCommand<PointerEventArgs>? IPointerGestureRecognizer.PointerExitedEvent { get; set; }

    EventCommand<PointerEventArgs>? IPointerGestureRecognizer.PointerMovedEvent { get; set; }

    EventCommand<PointerEventArgs>? IPointerGestureRecognizer.PointerPressedEvent { get; set; }

    EventCommand<PointerEventArgs>? IPointerGestureRecognizer.PointerReleasedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PointerGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<PointerEventArgs>? _executingPointerEnteredEvent;
    private EventCommand<PointerEventArgs>? _executingPointerExitedEvent;
    private EventCommand<PointerEventArgs>? _executingPointerMovedEvent;
    private EventCommand<PointerEventArgs>? _executingPointerPressedEvent;
    private EventCommand<PointerEventArgs>? _executingPointerReleasedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (thisAsIPointerGestureRecognizer.PointerEnteredEvent != null)
        {
            nativeControl.PointerEntered += NativeControl_PointerEntered;
        }

        if (thisAsIPointerGestureRecognizer.PointerExitedEvent != null)
        {
            nativeControl.PointerExited += NativeControl_PointerExited;
        }

        if (thisAsIPointerGestureRecognizer.PointerMovedEvent != null)
        {
            nativeControl.PointerMoved += NativeControl_PointerMoved;
        }

        if (thisAsIPointerGestureRecognizer.PointerPressedEvent != null)
        {
            nativeControl.PointerPressed += NativeControl_PointerPressed;
        }

        if (thisAsIPointerGestureRecognizer.PointerReleasedEvent != null)
        {
            nativeControl.PointerReleased += NativeControl_PointerReleased;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_PointerEntered(object? sender, PointerEventArgs e)
    {
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (_executingPointerEnteredEvent == null || _executingPointerEnteredEvent.IsCompleted)
        {
            _executingPointerEnteredEvent = thisAsIPointerGestureRecognizer.PointerEnteredEvent;
            _executingPointerEnteredEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PointerExited(object? sender, PointerEventArgs e)
    {
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (_executingPointerExitedEvent == null || _executingPointerExitedEvent.IsCompleted)
        {
            _executingPointerExitedEvent = thisAsIPointerGestureRecognizer.PointerExitedEvent;
            _executingPointerExitedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PointerMoved(object? sender, PointerEventArgs e)
    {
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (_executingPointerMovedEvent == null || _executingPointerMovedEvent.IsCompleted)
        {
            _executingPointerMovedEvent = thisAsIPointerGestureRecognizer.PointerMovedEvent;
            _executingPointerMovedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PointerPressed(object? sender, PointerEventArgs e)
    {
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (_executingPointerPressedEvent == null || _executingPointerPressedEvent.IsCompleted)
        {
            _executingPointerPressedEvent = thisAsIPointerGestureRecognizer.PointerPressedEvent;
            _executingPointerPressedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PointerReleased(object? sender, PointerEventArgs e)
    {
        var thisAsIPointerGestureRecognizer = (IPointerGestureRecognizer)this;
        if (_executingPointerReleasedEvent == null || _executingPointerReleasedEvent.IsCompleted)
        {
            _executingPointerReleasedEvent = thisAsIPointerGestureRecognizer.PointerReleasedEvent;
            _executingPointerReleasedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.PointerEntered -= NativeControl_PointerEntered;
            nativeControl.PointerExited -= NativeControl_PointerExited;
            nativeControl.PointerMoved -= NativeControl_PointerMoved;
            nativeControl.PointerPressed -= NativeControl_PointerPressed;
            nativeControl.PointerReleased -= NativeControl_PointerReleased;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is PointerGestureRecognizer @pointergesturerecognizer)
        {
            if (_executingPointerEnteredEvent != null && !_executingPointerEnteredEvent.IsCompleted)
            {
                @pointergesturerecognizer._executingPointerEnteredEvent = _executingPointerEnteredEvent;
            }

            if (_executingPointerExitedEvent != null && !_executingPointerExitedEvent.IsCompleted)
            {
                @pointergesturerecognizer._executingPointerExitedEvent = _executingPointerExitedEvent;
            }

            if (_executingPointerMovedEvent != null && !_executingPointerMovedEvent.IsCompleted)
            {
                @pointergesturerecognizer._executingPointerMovedEvent = _executingPointerMovedEvent;
            }

            if (_executingPointerPressedEvent != null && !_executingPointerPressedEvent.IsCompleted)
            {
                @pointergesturerecognizer._executingPointerPressedEvent = _executingPointerPressedEvent;
            }

            if (_executingPointerReleasedEvent != null && !_executingPointerReleasedEvent.IsCompleted)
            {
                @pointergesturerecognizer._executingPointerReleasedEvent = _executingPointerReleasedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class PointerGestureRecognizerExtensions
{
    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Action? pointerEnteredAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new SyncEventCommand<PointerEventArgs>(execute: pointerEnteredAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Action<PointerEventArgs>? pointerEnteredAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new SyncEventCommand<PointerEventArgs>(executeWithArgs: pointerEnteredAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerEnteredAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new SyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerEnteredAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Func<Task>? pointerEnteredAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new AsyncEventCommand<PointerEventArgs>(execute: pointerEnteredAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Func<PointerEventArgs, Task>? pointerEnteredAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new AsyncEventCommand<PointerEventArgs>(executeWithArgs: pointerEnteredAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerEntered<T>(this T pointerGestureRecognizer, Func<object?, PointerEventArgs, Task>? pointerEnteredAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerEnteredEvent = new AsyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerEnteredAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Action? pointerExitedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new SyncEventCommand<PointerEventArgs>(execute: pointerExitedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Action<PointerEventArgs>? pointerExitedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new SyncEventCommand<PointerEventArgs>(executeWithArgs: pointerExitedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerExitedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new SyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerExitedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Func<Task>? pointerExitedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new AsyncEventCommand<PointerEventArgs>(execute: pointerExitedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Func<PointerEventArgs, Task>? pointerExitedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithArgs: pointerExitedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerExited<T>(this T pointerGestureRecognizer, Func<object?, PointerEventArgs, Task>? pointerExitedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerExitedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerExitedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Action? pointerMovedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new SyncEventCommand<PointerEventArgs>(execute: pointerMovedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Action<PointerEventArgs>? pointerMovedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new SyncEventCommand<PointerEventArgs>(executeWithArgs: pointerMovedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerMovedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new SyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerMovedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Func<Task>? pointerMovedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new AsyncEventCommand<PointerEventArgs>(execute: pointerMovedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Func<PointerEventArgs, Task>? pointerMovedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithArgs: pointerMovedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerMoved<T>(this T pointerGestureRecognizer, Func<object?, PointerEventArgs, Task>? pointerMovedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerMovedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerMovedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Action? pointerPressedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new SyncEventCommand<PointerEventArgs>(execute: pointerPressedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Action<PointerEventArgs>? pointerPressedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new SyncEventCommand<PointerEventArgs>(executeWithArgs: pointerPressedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerPressedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new SyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerPressedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Func<Task>? pointerPressedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new AsyncEventCommand<PointerEventArgs>(execute: pointerPressedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Func<PointerEventArgs, Task>? pointerPressedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithArgs: pointerPressedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerPressed<T>(this T pointerGestureRecognizer, Func<object?, PointerEventArgs, Task>? pointerPressedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerPressedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerPressedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Action? pointerReleasedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new SyncEventCommand<PointerEventArgs>(execute: pointerReleasedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Action<PointerEventArgs>? pointerReleasedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new SyncEventCommand<PointerEventArgs>(executeWithArgs: pointerReleasedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Action<object?, PointerEventArgs>? pointerReleasedAction)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new SyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerReleasedAction);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Func<Task>? pointerReleasedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new AsyncEventCommand<PointerEventArgs>(execute: pointerReleasedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Func<PointerEventArgs, Task>? pointerReleasedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithArgs: pointerReleasedAction, runInBackground);
        return pointerGestureRecognizer;
    }

    public static T OnPointerReleased<T>(this T pointerGestureRecognizer, Func<object?, PointerEventArgs, Task>? pointerReleasedAction, bool runInBackground = false)
        where T : IPointerGestureRecognizer
    {
        pointerGestureRecognizer.PointerReleasedEvent = new AsyncEventCommand<PointerEventArgs>(executeWithFullArgs: pointerReleasedAction, runInBackground);
        return pointerGestureRecognizer;
    }
}

public static partial class PointerGestureRecognizerStyles
{
    public static Action<IPointerGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<IPointerGestureRecognizer>> Themes { get; } = [];
}
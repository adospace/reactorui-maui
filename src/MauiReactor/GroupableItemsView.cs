// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IGroupableItemsView : ISelectableItemsView
{
}

public partial class GroupableItemsView<T> : SelectableItemsView<T>, IGroupableItemsView where T : Microsoft.Maui.Controls.GroupableItemsView, new()
{
    public GroupableItemsView(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        GroupableItemsViewStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && GroupableItemsViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class GroupableItemsView : GroupableItemsView<Microsoft.Maui.Controls.GroupableItemsView>
{
    public GroupableItemsView(Action<Microsoft.Maui.Controls.GroupableItemsView?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public GroupableItemsView(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class GroupableItemsViewExtensions
{
    public static T IsGrouped<T>(this T groupableItemsView, bool isGrouped)
        where T : IGroupableItemsView
    {
        //groupableItemsView.IsGrouped = isGrouped;
        groupableItemsView.SetProperty(Microsoft.Maui.Controls.GroupableItemsView.IsGroupedProperty, isGrouped);
        return groupableItemsView;
    }

    public static T IsGrouped<T>(this T groupableItemsView, Func<bool> isGroupedFunc, IComponentWithState? componentWithState = null)
        where T : IGroupableItemsView
    {
        groupableItemsView.SetProperty(Microsoft.Maui.Controls.GroupableItemsView.IsGroupedProperty, new PropertyValue<bool>(isGroupedFunc, componentWithState));
        return groupableItemsView;
    }
}

public static partial class GroupableItemsViewStyles
{
    public static Action<IGroupableItemsView>? Default { get; set; }
    public static Dictionary<string, Action<IGroupableItemsView>> Themes { get; } = [];
}
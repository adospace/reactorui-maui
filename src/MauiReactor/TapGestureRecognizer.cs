// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ITapGestureRecognizer : IGestureRecognizer
{
    EventCommand<TappedEventArgs>? TappedEvent { get; set; }
}

public sealed partial class TapGestureRecognizer : GestureRecognizer<Microsoft.Maui.Controls.TapGestureRecognizer>, ITapGestureRecognizer
{
    public TapGestureRecognizer(Action<Microsoft.Maui.Controls.TapGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
        TapGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<TappedEventArgs>? ITapGestureRecognizer.TappedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && TapGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<TappedEventArgs>? _executingTappedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsITapGestureRecognizer = (ITapGestureRecognizer)this;
        if (thisAsITapGestureRecognizer.TappedEvent != null)
        {
            NativeControl.Tapped += NativeControl_Tapped;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Tapped(object? sender, TappedEventArgs e)
    {
        var thisAsITapGestureRecognizer = (ITapGestureRecognizer)this;
        if (_executingTappedEvent == null || _executingTappedEvent.IsCompleted)
        {
            _executingTappedEvent = thisAsITapGestureRecognizer.TappedEvent;
            _executingTappedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Tapped -= NativeControl_Tapped;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is TapGestureRecognizer @tapgesturerecognizer)
        {
            if (_executingTappedEvent != null && !_executingTappedEvent.IsCompleted)
            {
                @tapgesturerecognizer._executingTappedEvent = _executingTappedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class TapGestureRecognizerExtensions
{
    public static T NumberOfTapsRequired<T>(this T tapGestureRecognizer, int numberOfTapsRequired)
        where T : ITapGestureRecognizer
    {
        //tapGestureRecognizer.NumberOfTapsRequired = numberOfTapsRequired;
        tapGestureRecognizer.SetProperty(Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty, numberOfTapsRequired);
        return tapGestureRecognizer;
    }

    public static T NumberOfTapsRequired<T>(this T tapGestureRecognizer, Func<int> numberOfTapsRequiredFunc, IComponentWithState? componentWithState = null)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.SetProperty(Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty, new PropertyValue<int>(numberOfTapsRequiredFunc, componentWithState));
        return tapGestureRecognizer;
    }

    public static T Buttons<T>(this T tapGestureRecognizer, Microsoft.Maui.Controls.ButtonsMask buttons)
        where T : ITapGestureRecognizer
    {
        //tapGestureRecognizer.Buttons = buttons;
        tapGestureRecognizer.SetProperty(Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty, buttons);
        return tapGestureRecognizer;
    }

    public static T Buttons<T>(this T tapGestureRecognizer, Func<Microsoft.Maui.Controls.ButtonsMask> buttonsFunc, IComponentWithState? componentWithState = null)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.SetProperty(Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty, new PropertyValue<Microsoft.Maui.Controls.ButtonsMask>(buttonsFunc, componentWithState));
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Action? tappedAction)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new SyncEventCommand<TappedEventArgs>(execute: tappedAction);
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Action<TappedEventArgs>? tappedAction)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new SyncEventCommand<TappedEventArgs>(executeWithArgs: tappedAction);
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Action<object?, TappedEventArgs>? tappedAction)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new SyncEventCommand<TappedEventArgs>(executeWithFullArgs: tappedAction);
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Func<Task>? tappedAction, bool runInBackground = false)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new AsyncEventCommand<TappedEventArgs>(execute: tappedAction, runInBackground);
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Func<TappedEventArgs, Task>? tappedAction, bool runInBackground = false)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new AsyncEventCommand<TappedEventArgs>(executeWithArgs: tappedAction, runInBackground);
        return tapGestureRecognizer;
    }

    public static T OnTapped<T>(this T tapGestureRecognizer, Func<object?, TappedEventArgs, Task>? tappedAction, bool runInBackground = false)
        where T : ITapGestureRecognizer
    {
        tapGestureRecognizer.TappedEvent = new AsyncEventCommand<TappedEventArgs>(executeWithFullArgs: tappedAction, runInBackground);
        return tapGestureRecognizer;
    }
}

public static partial class TapGestureRecognizerStyles
{
    public static Action<ITapGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<ITapGestureRecognizer>> Themes { get; } = [];
}
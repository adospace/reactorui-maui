// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes
{
    public partial interface ILineGeometry : Shapes.IGeometry
    {
        PropertyValue<Microsoft.Maui.Graphics.Point>? StartPoint { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Point>? EndPoint { get; set; }
    }

    public partial class LineGeometry<T> : Shapes.Geometry<T>, ILineGeometry where T : Microsoft.Maui.Controls.Shapes.LineGeometry, new()
    {
        public LineGeometry()
        {
        }

        public LineGeometry(Action<T?> componentRefAction) : base(componentRefAction)
        {
        }

        PropertyValue<Microsoft.Maui.Graphics.Point>? ILineGeometry.StartPoint { get; set; }

        PropertyValue<Microsoft.Maui.Graphics.Point>? ILineGeometry.EndPoint { get; set; }

        protected override void OnUpdate()
        {
            OnBeginUpdate();
            Validate.EnsureNotNull(NativeControl);
            var thisAsILineGeometry = (ILineGeometry)this;
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, thisAsILineGeometry.StartPoint);
            SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, thisAsILineGeometry.EndPoint);
            base.OnUpdate();
            OnEndUpdate();
        }

        protected override void OnAnimate()
        {
            //Validate.EnsureNotNull(NativeControl);
            var thisAsILineGeometry = (ILineGeometry)this;
            AnimateProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, thisAsILineGeometry.StartPoint);
            AnimateProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, thisAsILineGeometry.EndPoint);
            base.OnAnimate();
        }

        partial void OnBeginUpdate();
        partial void OnEndUpdate();
    }

    public partial class LineGeometry : LineGeometry<Microsoft.Maui.Controls.Shapes.LineGeometry>
    {
        public LineGeometry()
        {
        }

        public LineGeometry(Action<Microsoft.Maui.Controls.Shapes.LineGeometry?> componentRefAction) : base(componentRefAction)
        {
        }
    }

    public static partial class LineGeometryExtensions
    {
        public static T StartPoint<T>(this T lineGeometry, Microsoft.Maui.Graphics.Point startPoint, RxPointAnimation? customAnimation = null)
            where T : ILineGeometry
        {
            lineGeometry.StartPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(startPoint);
            lineGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, customAnimation ?? new RxSimplePointAnimation(startPoint), v => lineGeometry.StartPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(v.CurrentValue()));
            return lineGeometry;
        }

        public static T StartPoint<T>(this T lineGeometry, Func<Microsoft.Maui.Graphics.Point> startPointFunc)
            where T : ILineGeometry
        {
            lineGeometry.StartPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(startPointFunc);
            return lineGeometry;
        }

        public static T StartPoint<T>(this T lineGeometry, double x, double y)
            where T : ILineGeometry
        {
            lineGeometry.StartPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(new Microsoft.Maui.Graphics.Point(x, y));
            return lineGeometry;
        }

        public static T EndPoint<T>(this T lineGeometry, Microsoft.Maui.Graphics.Point endPoint, RxPointAnimation? customAnimation = null)
            where T : ILineGeometry
        {
            lineGeometry.EndPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(endPoint);
            lineGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, customAnimation ?? new RxSimplePointAnimation(endPoint), v => lineGeometry.EndPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(v.CurrentValue()));
            return lineGeometry;
        }

        public static T EndPoint<T>(this T lineGeometry, Func<Microsoft.Maui.Graphics.Point> endPointFunc)
            where T : ILineGeometry
        {
            lineGeometry.EndPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(endPointFunc);
            return lineGeometry;
        }

        public static T EndPoint<T>(this T lineGeometry, double x, double y)
            where T : ILineGeometry
        {
            lineGeometry.EndPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(new Microsoft.Maui.Graphics.Point(x, y));
            return lineGeometry;
        }
    }
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IRectangle : Shapes.IShape
{
}

public sealed partial class Rectangle : Shapes.Shape<Microsoft.Maui.Controls.Shapes.Rectangle>, IRectangle
{
    public Rectangle(Action<Microsoft.Maui.Controls.Shapes.Rectangle?>? componentRefAction = null) : base(componentRefAction)
    {
        RectangleStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && RectangleStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class RectangleExtensions
{
    public static T RadiusX<T>(this T rectangle, double radiusX, RxDoubleAnimation? customAnimation = null)
        where T : IRectangle
    {
        //rectangle.RadiusX = radiusX;
        rectangle.SetProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, radiusX);
        rectangle.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, customAnimation ?? new RxDoubleAnimation(radiusX));
        return rectangle;
    }

    public static T RadiusX<T>(this T rectangle, Func<double> radiusXFunc, IComponentWithState? componentWithState = null)
        where T : IRectangle
    {
        rectangle.SetProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, new PropertyValue<double>(radiusXFunc, componentWithState));
        return rectangle;
    }

    public static T RadiusY<T>(this T rectangle, double radiusY, RxDoubleAnimation? customAnimation = null)
        where T : IRectangle
    {
        //rectangle.RadiusY = radiusY;
        rectangle.SetProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, radiusY);
        rectangle.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, customAnimation ?? new RxDoubleAnimation(radiusY));
        return rectangle;
    }

    public static T RadiusY<T>(this T rectangle, Func<double> radiusYFunc, IComponentWithState? componentWithState = null)
        where T : IRectangle
    {
        rectangle.SetProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, new PropertyValue<double>(radiusYFunc, componentWithState));
        return rectangle;
    }
}

public static partial class RectangleStyles
{
    public static Action<IRectangle>? Default { get; set; }
    public static Dictionary<string, Action<IRectangle>> Themes { get; } = [];
}
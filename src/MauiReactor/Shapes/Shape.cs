// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IShape : IView
{
}

public abstract partial class Shape<T> : View<T>, IShape where T : Microsoft.Maui.Controls.Shapes.Shape, new()
{
    protected Shape(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        ShapeStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ShapeStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class ShapeExtensions
{
    public static T Fill<T>(this T shape, Microsoft.Maui.Controls.Brush fill)
        where T : IShape
    {
        //shape.Fill = fill;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.FillProperty, fill);
        return shape;
    }

    public static T Fill<T>(this T shape, Func<Microsoft.Maui.Controls.Brush> fillFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.FillProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(fillFunc, componentWithState));
        return shape;
    }

    public static T Stroke<T>(this T shape, Microsoft.Maui.Controls.Brush stroke)
        where T : IShape
    {
        //shape.Stroke = stroke;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeProperty, stroke);
        return shape;
    }

    public static T Stroke<T>(this T shape, Func<Microsoft.Maui.Controls.Brush> strokeFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(strokeFunc, componentWithState));
        return shape;
    }

    public static T StrokeThickness<T>(this T shape, double strokeThickness, RxDoubleAnimation? customAnimation = null)
        where T : IShape
    {
        //shape.StrokeThickness = strokeThickness;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeThicknessProperty, strokeThickness);
        shape.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Shape.StrokeThicknessProperty, customAnimation ?? new RxDoubleAnimation(strokeThickness));
        return shape;
    }

    public static T StrokeThickness<T>(this T shape, Func<double> strokeThicknessFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeThicknessProperty, new PropertyValue<double>(strokeThicknessFunc, componentWithState));
        return shape;
    }

    public static T StrokeDashArray<T>(this T shape, Microsoft.Maui.Controls.DoubleCollection strokeDashArray)
        where T : IShape
    {
        //shape.StrokeDashArray = strokeDashArray;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeDashArrayProperty, strokeDashArray);
        return shape;
    }

    public static T StrokeDashArray<T>(this T shape, Func<Microsoft.Maui.Controls.DoubleCollection> strokeDashArrayFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeDashArrayProperty, new PropertyValue<Microsoft.Maui.Controls.DoubleCollection>(strokeDashArrayFunc, componentWithState));
        return shape;
    }

    public static T StrokeDashOffset<T>(this T shape, double strokeDashOffset, RxDoubleAnimation? customAnimation = null)
        where T : IShape
    {
        //shape.StrokeDashOffset = strokeDashOffset;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeDashOffsetProperty, strokeDashOffset);
        shape.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Shape.StrokeDashOffsetProperty, customAnimation ?? new RxDoubleAnimation(strokeDashOffset));
        return shape;
    }

    public static T StrokeDashOffset<T>(this T shape, Func<double> strokeDashOffsetFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeDashOffsetProperty, new PropertyValue<double>(strokeDashOffsetFunc, componentWithState));
        return shape;
    }

    public static T StrokeLineCap<T>(this T shape, Microsoft.Maui.Controls.Shapes.PenLineCap strokeLineCap)
        where T : IShape
    {
        //shape.StrokeLineCap = strokeLineCap;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeLineCapProperty, strokeLineCap);
        return shape;
    }

    public static T StrokeLineCap<T>(this T shape, Func<Microsoft.Maui.Controls.Shapes.PenLineCap> strokeLineCapFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeLineCapProperty, new PropertyValue<Microsoft.Maui.Controls.Shapes.PenLineCap>(strokeLineCapFunc, componentWithState));
        return shape;
    }

    public static T StrokeLineJoin<T>(this T shape, Microsoft.Maui.Controls.Shapes.PenLineJoin strokeLineJoin)
        where T : IShape
    {
        //shape.StrokeLineJoin = strokeLineJoin;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeLineJoinProperty, strokeLineJoin);
        return shape;
    }

    public static T StrokeLineJoin<T>(this T shape, Func<Microsoft.Maui.Controls.Shapes.PenLineJoin> strokeLineJoinFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeLineJoinProperty, new PropertyValue<Microsoft.Maui.Controls.Shapes.PenLineJoin>(strokeLineJoinFunc, componentWithState));
        return shape;
    }

    public static T StrokeMiterLimit<T>(this T shape, double strokeMiterLimit, RxDoubleAnimation? customAnimation = null)
        where T : IShape
    {
        //shape.StrokeMiterLimit = strokeMiterLimit;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeMiterLimitProperty, strokeMiterLimit);
        shape.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Shape.StrokeMiterLimitProperty, customAnimation ?? new RxDoubleAnimation(strokeMiterLimit));
        return shape;
    }

    public static T StrokeMiterLimit<T>(this T shape, Func<double> strokeMiterLimitFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.StrokeMiterLimitProperty, new PropertyValue<double>(strokeMiterLimitFunc, componentWithState));
        return shape;
    }

    public static T Aspect<T>(this T shape, Microsoft.Maui.Controls.Stretch aspect)
        where T : IShape
    {
        //shape.Aspect = aspect;
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.AspectProperty, aspect);
        return shape;
    }

    public static T Aspect<T>(this T shape, Func<Microsoft.Maui.Controls.Stretch> aspectFunc, IComponentWithState? componentWithState = null)
        where T : IShape
    {
        shape.SetProperty(Microsoft.Maui.Controls.Shapes.Shape.AspectProperty, new PropertyValue<Microsoft.Maui.Controls.Stretch>(aspectFunc, componentWithState));
        return shape;
    }
}

public static partial class ShapeStyles
{
    public static Action<IShape>? Default { get; set; }
    public static Dictionary<string, Action<IShape>> Themes { get; } = [];
}
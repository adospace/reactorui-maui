// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IRectangleGeometry : Shapes.IGeometry
{
}

public partial class RectangleGeometry<T> : Shapes.Geometry<T>, IRectangleGeometry where T : Microsoft.Maui.Controls.Shapes.RectangleGeometry, new()
{
    public RectangleGeometry(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        RectangleGeometryStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && RectangleGeometryStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class RectangleGeometry : RectangleGeometry<Microsoft.Maui.Controls.Shapes.RectangleGeometry>
{
    public RectangleGeometry(Action<Microsoft.Maui.Controls.Shapes.RectangleGeometry?>? componentRefAction = null) : base(componentRefAction)
    {
    }
}

public static partial class RectangleGeometryExtensions
{
    public static T Rect<T>(this T rectangleGeometry, Microsoft.Maui.Graphics.Rect rect, RxRectAnimation? customAnimation = null)
        where T : IRectangleGeometry
    {
        //rectangleGeometry.Rect = rect;
        rectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RectangleGeometry.RectProperty, rect);
        rectangleGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.RectangleGeometry.RectProperty, customAnimation ?? new RxSimpleRectAnimation(rect));
        return rectangleGeometry;
    }

    public static T Rect<T>(this T rectangleGeometry, Func<Microsoft.Maui.Graphics.Rect> rectFunc, IComponentWithState? componentWithState = null)
        where T : IRectangleGeometry
    {
        rectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RectangleGeometry.RectProperty, new PropertyValue<Microsoft.Maui.Graphics.Rect>(rectFunc, componentWithState));
        return rectangleGeometry;
    }
}

public static partial class RectangleGeometryStyles
{
    public static Action<IRectangleGeometry>? Default { get; set; }
    public static Dictionary<string, Action<IRectangleGeometry>> Themes { get; } = [];
}
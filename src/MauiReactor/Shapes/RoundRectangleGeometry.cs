// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IRoundRectangleGeometry : Shapes.IGeometryGroup
{
}

public partial class RoundRectangleGeometry<T> : Shapes.GeometryGroup<T>, IRoundRectangleGeometry where T : Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry, new()
{
    public RoundRectangleGeometry(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        RoundRectangleGeometryStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && RoundRectangleGeometryStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class RoundRectangleGeometry : RoundRectangleGeometry<Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry>
{
    public RoundRectangleGeometry(Action<Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry?>? componentRefAction = null) : base(componentRefAction)
    {
    }
}

public static partial class RoundRectangleGeometryExtensions
{
    public static T Rect<T>(this T roundRectangleGeometry, Microsoft.Maui.Graphics.Rect rect, RxRectAnimation? customAnimation = null)
        where T : IRoundRectangleGeometry
    {
        //roundRectangleGeometry.Rect = rect;
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.RectProperty, rect);
        roundRectangleGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.RectProperty, customAnimation ?? new RxSimpleRectAnimation(rect));
        return roundRectangleGeometry;
    }

    public static T Rect<T>(this T roundRectangleGeometry, Func<Microsoft.Maui.Graphics.Rect> rectFunc, IComponentWithState? componentWithState = null)
        where T : IRoundRectangleGeometry
    {
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.RectProperty, new PropertyValue<Microsoft.Maui.Graphics.Rect>(rectFunc, componentWithState));
        return roundRectangleGeometry;
    }

    public static T CornerRadius<T>(this T roundRectangleGeometry, Microsoft.Maui.CornerRadius cornerRadius, RxCornerRadiusAnimation? customAnimation = null)
        where T : IRoundRectangleGeometry
    {
        //roundRectangleGeometry.CornerRadius = cornerRadius;
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, cornerRadius);
        roundRectangleGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, customAnimation ?? new RxSimpleCornerRadiusAnimation(cornerRadius));
        return roundRectangleGeometry;
    }

    public static T CornerRadius<T>(this T roundRectangleGeometry, Func<Microsoft.Maui.CornerRadius> cornerRadiusFunc, IComponentWithState? componentWithState = null)
        where T : IRoundRectangleGeometry
    {
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, new PropertyValue<Microsoft.Maui.CornerRadius>(cornerRadiusFunc, componentWithState));
        return roundRectangleGeometry;
    }

    public static T CornerRadius<T>(this T roundRectangleGeometry, double uniformRadius, RxCornerRadiusAnimation? customAnimation = null)
        where T : IRoundRectangleGeometry
    {
        //roundRectangleGeometry.CornerRadius = new CornerRadius(uniformRadius);
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, new CornerRadius(uniformRadius));
        roundRectangleGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(uniformRadius)));
        return roundRectangleGeometry;
    }

    public static T CornerRadius<T>(this T roundRectangleGeometry, double topLeft, double topRight, double bottomLeft, double bottomRight, RxCornerRadiusAnimation? customAnimation = null)
        where T : IRoundRectangleGeometry
    {
        //roundRectangleGeometry.CornerRadius = new CornerRadius(topLeft, topRight, bottomLeft, bottomRight);
        roundRectangleGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, new CornerRadius(topLeft, topRight, bottomLeft, bottomRight));
        roundRectangleGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry.CornerRadiusProperty, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(topLeft, topRight, bottomLeft, bottomRight)));
        return roundRectangleGeometry;
    }
}

public static partial class RoundRectangleGeometryStyles
{
    public static Action<IRoundRectangleGeometry>? Default { get; set; }
    public static Dictionary<string, Action<IRoundRectangleGeometry>> Themes { get; } = [];
}
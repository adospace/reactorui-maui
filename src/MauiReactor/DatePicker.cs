// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IDatePicker : IView
{
    EventCommand<DateChangedEventArgs>? DateSelectedEvent { get; set; }
}

public partial class DatePicker<T> : View<T>, IDatePicker where T : Microsoft.Maui.Controls.DatePicker, new()
{
    public DatePicker(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        DatePickerStyles.Default?.Invoke(this);
    }

    EventCommand<DateChangedEventArgs>? IDatePicker.DateSelectedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && DatePickerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<DateChangedEventArgs>? _executingDateSelectedEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIDatePicker = (IDatePicker)this;
        if (thisAsIDatePicker.DateSelectedEvent != null)
        {
            nativeControl.DateSelected += NativeControl_DateSelected;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_DateSelected(object? sender, DateChangedEventArgs e)
    {
        var thisAsIDatePicker = (IDatePicker)this;
        if (_executingDateSelectedEvent == null || _executingDateSelectedEvent.IsCompleted)
        {
            _executingDateSelectedEvent = thisAsIDatePicker.DateSelectedEvent;
            _executingDateSelectedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.DateSelected -= NativeControl_DateSelected;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is DatePicker<T> @datepicker)
        {
            if (_executingDateSelectedEvent != null && !_executingDateSelectedEvent.IsCompleted)
            {
                @datepicker._executingDateSelectedEvent = _executingDateSelectedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class DatePicker : DatePicker<Microsoft.Maui.Controls.DatePicker>
{
    public DatePicker(Action<Microsoft.Maui.Controls.DatePicker?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public DatePicker(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class DatePickerExtensions
{
    public static T Format<T>(this T datePicker, string format)
        where T : IDatePicker
    {
        //datePicker.Format = format;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FormatProperty, format);
        return datePicker;
    }

    public static T Format<T>(this T datePicker, Func<string> formatFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FormatProperty, new PropertyValue<string>(formatFunc, componentWithState));
        return datePicker;
    }

    public static T Date<T>(this T datePicker, System.DateTime date)
        where T : IDatePicker
    {
        //datePicker.Date = date;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.DateProperty, date);
        return datePicker;
    }

    public static T Date<T>(this T datePicker, Func<System.DateTime> dateFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.DateProperty, new PropertyValue<System.DateTime>(dateFunc, componentWithState));
        return datePicker;
    }

    public static T MinimumDate<T>(this T datePicker, System.DateTime minimumDate)
        where T : IDatePicker
    {
        //datePicker.MinimumDate = minimumDate;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, minimumDate);
        return datePicker;
    }

    public static T MinimumDate<T>(this T datePicker, Func<System.DateTime> minimumDateFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, new PropertyValue<System.DateTime>(minimumDateFunc, componentWithState));
        return datePicker;
    }

    public static T MaximumDate<T>(this T datePicker, System.DateTime maximumDate)
        where T : IDatePicker
    {
        //datePicker.MaximumDate = maximumDate;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, maximumDate);
        return datePicker;
    }

    public static T MaximumDate<T>(this T datePicker, Func<System.DateTime> maximumDateFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, new PropertyValue<System.DateTime>(maximumDateFunc, componentWithState));
        return datePicker;
    }

    public static T TextColor<T>(this T datePicker, Microsoft.Maui.Graphics.Color textColor)
        where T : IDatePicker
    {
        //datePicker.TextColor = textColor;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.TextColorProperty, textColor);
        return datePicker;
    }

    public static T TextColor<T>(this T datePicker, Func<Microsoft.Maui.Graphics.Color> textColorFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc, componentWithState));
        return datePicker;
    }

    public static T CharacterSpacing<T>(this T datePicker, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IDatePicker
    {
        //datePicker.CharacterSpacing = characterSpacing;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, characterSpacing);
        datePicker.AppendAnimatable(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return datePicker;
    }

    public static T CharacterSpacing<T>(this T datePicker, Func<double> characterSpacingFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc, componentWithState));
        return datePicker;
    }

    public static T FontFamily<T>(this T datePicker, string fontFamily)
        where T : IDatePicker
    {
        //datePicker.FontFamily = fontFamily;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, fontFamily);
        return datePicker;
    }

    public static T FontFamily<T>(this T datePicker, Func<string> fontFamilyFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc, componentWithState));
        return datePicker;
    }

    public static T FontSize<T>(this T datePicker, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IDatePicker
    {
        //datePicker.FontSize = fontSize;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, fontSize);
        datePicker.AppendAnimatable(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return datePicker;
    }

    public static T FontSize<T>(this T datePicker, Func<double> fontSizeFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, new PropertyValue<double>(fontSizeFunc, componentWithState));
        return datePicker;
    }

    public static T FontAttributes<T>(this T datePicker, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IDatePicker
    {
        //datePicker.FontAttributes = fontAttributes;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, fontAttributes);
        return datePicker;
    }

    public static T FontAttributes<T>(this T datePicker, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc, componentWithState));
        return datePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T datePicker, bool fontAutoScalingEnabled)
        where T : IDatePicker
    {
        //datePicker.FontAutoScalingEnabled = fontAutoScalingEnabled;
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return datePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T datePicker, Func<bool> fontAutoScalingEnabledFunc, IComponentWithState? componentWithState = null)
        where T : IDatePicker
    {
        datePicker.SetProperty(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc, componentWithState));
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Action? dateSelectedAction)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new SyncEventCommand<DateChangedEventArgs>(execute: dateSelectedAction);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Action<DateChangedEventArgs>? dateSelectedAction)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new SyncEventCommand<DateChangedEventArgs>(executeWithArgs: dateSelectedAction);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Action<object?, DateChangedEventArgs>? dateSelectedAction)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new SyncEventCommand<DateChangedEventArgs>(executeWithFullArgs: dateSelectedAction);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Func<Task>? dateSelectedAction, bool runInBackground = false)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new AsyncEventCommand<DateChangedEventArgs>(execute: dateSelectedAction, runInBackground);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Func<DateChangedEventArgs, Task>? dateSelectedAction, bool runInBackground = false)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new AsyncEventCommand<DateChangedEventArgs>(executeWithArgs: dateSelectedAction, runInBackground);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Func<object?, DateChangedEventArgs, Task>? dateSelectedAction, bool runInBackground = false)
        where T : IDatePicker
    {
        datePicker.DateSelectedEvent = new AsyncEventCommand<DateChangedEventArgs>(executeWithFullArgs: dateSelectedAction, runInBackground);
        return datePicker;
    }
}

public static partial class DatePickerStyles
{
    public static Action<IDatePicker>? Default { get; set; }
    public static Dictionary<string, Action<IDatePicker>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface INavigationPage : IPage
{
    EventCommand<NavigationEventArgs>? PoppedEvent { get; set; }

    EventCommand<NavigationEventArgs>? PoppedToRootEvent { get; set; }

    EventCommand<NavigationEventArgs>? PushedEvent { get; set; }
}

public partial class NavigationPage<T> : Page<T>, INavigationPage where T : Microsoft.Maui.Controls.NavigationPage, new()
{
    public NavigationPage(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        NavigationPageStyles.Default?.Invoke(this);
    }

    EventCommand<NavigationEventArgs>? INavigationPage.PoppedEvent { get; set; }

    EventCommand<NavigationEventArgs>? INavigationPage.PoppedToRootEvent { get; set; }

    EventCommand<NavigationEventArgs>? INavigationPage.PushedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && NavigationPageStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<NavigationEventArgs>? _executingPoppedEvent;
    private EventCommand<NavigationEventArgs>? _executingPoppedToRootEvent;
    private EventCommand<NavigationEventArgs>? _executingPushedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsINavigationPage = (INavigationPage)this;
        if (thisAsINavigationPage.PoppedEvent != null)
        {
            NativeControl.Popped += NativeControl_Popped;
        }

        if (thisAsINavigationPage.PoppedToRootEvent != null)
        {
            NativeControl.PoppedToRoot += NativeControl_PoppedToRoot;
        }

        if (thisAsINavigationPage.PushedEvent != null)
        {
            NativeControl.Pushed += NativeControl_Pushed;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Popped(object? sender, NavigationEventArgs e)
    {
        var thisAsINavigationPage = (INavigationPage)this;
        if (_executingPoppedEvent == null || _executingPoppedEvent.IsCompleted)
        {
            _executingPoppedEvent = thisAsINavigationPage.PoppedEvent;
            _executingPoppedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PoppedToRoot(object? sender, NavigationEventArgs e)
    {
        var thisAsINavigationPage = (INavigationPage)this;
        if (_executingPoppedToRootEvent == null || _executingPoppedToRootEvent.IsCompleted)
        {
            _executingPoppedToRootEvent = thisAsINavigationPage.PoppedToRootEvent;
            _executingPoppedToRootEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Pushed(object? sender, NavigationEventArgs e)
    {
        var thisAsINavigationPage = (INavigationPage)this;
        if (_executingPushedEvent == null || _executingPushedEvent.IsCompleted)
        {
            _executingPushedEvent = thisAsINavigationPage.PushedEvent;
            _executingPushedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Popped -= NativeControl_Popped;
            NativeControl.PoppedToRoot -= NativeControl_PoppedToRoot;
            NativeControl.Pushed -= NativeControl_Pushed;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is NavigationPage<T> @navigationpage)
        {
            if (_executingPoppedEvent != null && !_executingPoppedEvent.IsCompleted)
            {
                @navigationpage._executingPoppedEvent = _executingPoppedEvent;
            }

            if (_executingPoppedToRootEvent != null && !_executingPoppedToRootEvent.IsCompleted)
            {
                @navigationpage._executingPoppedToRootEvent = _executingPoppedToRootEvent;
            }

            if (_executingPushedEvent != null && !_executingPushedEvent.IsCompleted)
            {
                @navigationpage._executingPushedEvent = _executingPushedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class NavigationPage : NavigationPage<Microsoft.Maui.Controls.NavigationPage>
{
    public NavigationPage(Action<Microsoft.Maui.Controls.NavigationPage?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public NavigationPage(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class NavigationPageExtensions
{
    public static T BarBackgroundColor<T>(this T navigationPage, Microsoft.Maui.Graphics.Color barBackgroundColor)
        where T : INavigationPage
    {
        //navigationPage.BarBackgroundColor = barBackgroundColor;
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty, barBackgroundColor);
        return navigationPage;
    }

    public static T BarBackgroundColor<T>(this T navigationPage, Func<Microsoft.Maui.Graphics.Color> barBackgroundColorFunc, IComponentWithState? componentWithState = null)
        where T : INavigationPage
    {
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(barBackgroundColorFunc, componentWithState));
        return navigationPage;
    }

    public static T BarBackground<T>(this T navigationPage, Microsoft.Maui.Controls.Brush barBackground)
        where T : INavigationPage
    {
        //navigationPage.BarBackground = barBackground;
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty, barBackground);
        return navigationPage;
    }

    public static T BarBackground<T>(this T navigationPage, Func<Microsoft.Maui.Controls.Brush> barBackgroundFunc, IComponentWithState? componentWithState = null)
        where T : INavigationPage
    {
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty, new PropertyValue<Microsoft.Maui.Controls.Brush>(barBackgroundFunc, componentWithState));
        return navigationPage;
    }

    public static T BarTextColor<T>(this T navigationPage, Microsoft.Maui.Graphics.Color barTextColor)
        where T : INavigationPage
    {
        //navigationPage.BarTextColor = barTextColor;
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty, barTextColor);
        return navigationPage;
    }

    public static T BarTextColor<T>(this T navigationPage, Func<Microsoft.Maui.Graphics.Color> barTextColorFunc, IComponentWithState? componentWithState = null)
        where T : INavigationPage
    {
        navigationPage.SetProperty(Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(barTextColorFunc, componentWithState));
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Action? poppedAction)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new SyncEventCommand<NavigationEventArgs>(execute: poppedAction);
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Action<NavigationEventArgs>? poppedAction)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new SyncEventCommand<NavigationEventArgs>(executeWithArgs: poppedAction);
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Action<object?, NavigationEventArgs>? poppedAction)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new SyncEventCommand<NavigationEventArgs>(executeWithFullArgs: poppedAction);
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Func<Task>? poppedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new AsyncEventCommand<NavigationEventArgs>(execute: poppedAction, runInBackground);
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Func<NavigationEventArgs, Task>? poppedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithArgs: poppedAction, runInBackground);
        return navigationPage;
    }

    public static T OnPopped<T>(this T navigationPage, Func<object?, NavigationEventArgs, Task>? poppedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithFullArgs: poppedAction, runInBackground);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Action? poppedToRootAction)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new SyncEventCommand<NavigationEventArgs>(execute: poppedToRootAction);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Action<NavigationEventArgs>? poppedToRootAction)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new SyncEventCommand<NavigationEventArgs>(executeWithArgs: poppedToRootAction);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Action<object?, NavigationEventArgs>? poppedToRootAction)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new SyncEventCommand<NavigationEventArgs>(executeWithFullArgs: poppedToRootAction);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Func<Task>? poppedToRootAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new AsyncEventCommand<NavigationEventArgs>(execute: poppedToRootAction, runInBackground);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Func<NavigationEventArgs, Task>? poppedToRootAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithArgs: poppedToRootAction, runInBackground);
        return navigationPage;
    }

    public static T OnPoppedToRoot<T>(this T navigationPage, Func<object?, NavigationEventArgs, Task>? poppedToRootAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PoppedToRootEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithFullArgs: poppedToRootAction, runInBackground);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Action? pushedAction)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new SyncEventCommand<NavigationEventArgs>(execute: pushedAction);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Action<NavigationEventArgs>? pushedAction)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new SyncEventCommand<NavigationEventArgs>(executeWithArgs: pushedAction);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Action<object?, NavigationEventArgs>? pushedAction)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new SyncEventCommand<NavigationEventArgs>(executeWithFullArgs: pushedAction);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Func<Task>? pushedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new AsyncEventCommand<NavigationEventArgs>(execute: pushedAction, runInBackground);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Func<NavigationEventArgs, Task>? pushedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithArgs: pushedAction, runInBackground);
        return navigationPage;
    }

    public static T OnPushed<T>(this T navigationPage, Func<object?, NavigationEventArgs, Task>? pushedAction, bool runInBackground = false)
        where T : INavigationPage
    {
        navigationPage.PushedEvent = new AsyncEventCommand<NavigationEventArgs>(executeWithFullArgs: pushedAction, runInBackground);
        return navigationPage;
    }
}

public static partial class NavigationPageStyles
{
    public static Action<INavigationPage>? Default { get; set; }
    public static Dictionary<string, Action<INavigationPage>> Themes { get; } = [];
}
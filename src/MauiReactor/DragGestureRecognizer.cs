// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IDragGestureRecognizer : IGestureRecognizer
{
    EventCommand<DropCompletedEventArgs>? DropCompletedEvent { get; set; }

    EventCommand<DragStartingEventArgs>? DragStartingEvent { get; set; }
}

public partial class DragGestureRecognizer<T> : GestureRecognizer<T>, IDragGestureRecognizer where T : Microsoft.Maui.Controls.DragGestureRecognizer, new()
{
    public DragGestureRecognizer(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        DragGestureRecognizerStyles.Default?.Invoke(this);
    }

    EventCommand<DropCompletedEventArgs>? IDragGestureRecognizer.DropCompletedEvent { get; set; }

    EventCommand<DragStartingEventArgs>? IDragGestureRecognizer.DragStartingEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && DragGestureRecognizerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<DropCompletedEventArgs>? _executingDropCompletedEvent;
    private EventCommand<DragStartingEventArgs>? _executingDragStartingEvent;
    protected override void OnAttachNativeEvents()
    {
        var nativeControl = NativeControl.EnsureNotNull();
        var thisAsIDragGestureRecognizer = (IDragGestureRecognizer)this;
        if (thisAsIDragGestureRecognizer.DropCompletedEvent != null)
        {
            nativeControl.DropCompleted += NativeControl_DropCompleted;
        }

        if (thisAsIDragGestureRecognizer.DragStartingEvent != null)
        {
            nativeControl.DragStarting += NativeControl_DragStarting;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_DropCompleted(object? sender, DropCompletedEventArgs e)
    {
        var thisAsIDragGestureRecognizer = (IDragGestureRecognizer)this;
        if (_executingDropCompletedEvent == null || _executingDropCompletedEvent.IsCompleted)
        {
            _executingDropCompletedEvent = thisAsIDragGestureRecognizer.DropCompletedEvent;
            _executingDropCompletedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_DragStarting(object? sender, DragStartingEventArgs e)
    {
        var thisAsIDragGestureRecognizer = (IDragGestureRecognizer)this;
        if (_executingDragStartingEvent == null || _executingDragStartingEvent.IsCompleted)
        {
            _executingDragStartingEvent = thisAsIDragGestureRecognizer.DragStartingEvent;
            _executingDragStartingEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        var nativeControl = NativeControl;
        if (nativeControl != null)
        {
            nativeControl.DropCompleted -= NativeControl_DropCompleted;
            nativeControl.DragStarting -= NativeControl_DragStarting;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is DragGestureRecognizer<T> @draggesturerecognizer)
        {
            if (_executingDropCompletedEvent != null && !_executingDropCompletedEvent.IsCompleted)
            {
                @draggesturerecognizer._executingDropCompletedEvent = _executingDropCompletedEvent;
            }

            if (_executingDragStartingEvent != null && !_executingDragStartingEvent.IsCompleted)
            {
                @draggesturerecognizer._executingDragStartingEvent = _executingDragStartingEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class DragGestureRecognizer : DragGestureRecognizer<Microsoft.Maui.Controls.DragGestureRecognizer>
{
    public DragGestureRecognizer(Action<Microsoft.Maui.Controls.DragGestureRecognizer?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public DragGestureRecognizer(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class DragGestureRecognizerExtensions
{
    public static T CanDrag<T>(this T dragGestureRecognizer, bool canDrag)
        where T : IDragGestureRecognizer
    {
        //dragGestureRecognizer.CanDrag = canDrag;
        dragGestureRecognizer.SetProperty(Microsoft.Maui.Controls.DragGestureRecognizer.CanDragProperty, canDrag);
        return dragGestureRecognizer;
    }

    public static T CanDrag<T>(this T dragGestureRecognizer, Func<bool> canDragFunc, IComponentWithState? componentWithState = null)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.SetProperty(Microsoft.Maui.Controls.DragGestureRecognizer.CanDragProperty, new PropertyValue<bool>(canDragFunc, componentWithState));
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Action? dropCompletedAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new SyncEventCommand<DropCompletedEventArgs>(execute: dropCompletedAction);
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Action<DropCompletedEventArgs>? dropCompletedAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new SyncEventCommand<DropCompletedEventArgs>(executeWithArgs: dropCompletedAction);
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Action<object?, DropCompletedEventArgs>? dropCompletedAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new SyncEventCommand<DropCompletedEventArgs>(executeWithFullArgs: dropCompletedAction);
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Func<Task>? dropCompletedAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new AsyncEventCommand<DropCompletedEventArgs>(execute: dropCompletedAction, runInBackground);
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Func<DropCompletedEventArgs, Task>? dropCompletedAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new AsyncEventCommand<DropCompletedEventArgs>(executeWithArgs: dropCompletedAction, runInBackground);
        return dragGestureRecognizer;
    }

    public static T OnDropCompleted<T>(this T dragGestureRecognizer, Func<object?, DropCompletedEventArgs, Task>? dropCompletedAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DropCompletedEvent = new AsyncEventCommand<DropCompletedEventArgs>(executeWithFullArgs: dropCompletedAction, runInBackground);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Action? dragStartingAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new SyncEventCommand<DragStartingEventArgs>(execute: dragStartingAction);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Action<DragStartingEventArgs>? dragStartingAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new SyncEventCommand<DragStartingEventArgs>(executeWithArgs: dragStartingAction);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Action<object?, DragStartingEventArgs>? dragStartingAction)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new SyncEventCommand<DragStartingEventArgs>(executeWithFullArgs: dragStartingAction);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Func<Task>? dragStartingAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new AsyncEventCommand<DragStartingEventArgs>(execute: dragStartingAction, runInBackground);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Func<DragStartingEventArgs, Task>? dragStartingAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new AsyncEventCommand<DragStartingEventArgs>(executeWithArgs: dragStartingAction, runInBackground);
        return dragGestureRecognizer;
    }

    public static T OnDragStarting<T>(this T dragGestureRecognizer, Func<object?, DragStartingEventArgs, Task>? dragStartingAction, bool runInBackground = false)
        where T : IDragGestureRecognizer
    {
        dragGestureRecognizer.DragStartingEvent = new AsyncEventCommand<DragStartingEventArgs>(executeWithFullArgs: dragStartingAction, runInBackground);
        return dragGestureRecognizer;
    }
}

public static partial class DragGestureRecognizerStyles
{
    public static Action<IDragGestureRecognizer>? Default { get; set; }
    public static Dictionary<string, Action<IDragGestureRecognizer>> Themes { get; } = [];
}
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ITextCell : ICell
{
}

public partial class TextCell<T> : Cell<T>, ITextCell where T : Microsoft.Maui.Controls.TextCell, new()
{
    public TextCell(Action<T?>? componentRefAction = null) : base(componentRefAction)
    {
        TextCellStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && TextCellStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class TextCell : TextCell<Microsoft.Maui.Controls.TextCell>
{
    public TextCell(Action<Microsoft.Maui.Controls.TextCell?>? componentRefAction = null) : base(componentRefAction)
    {
    }

    public TextCell(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class TextCellExtensions
{
    public static T Text<T>(this T textCell, string text)
        where T : ITextCell
    {
        //textCell.Text = text;
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.TextProperty, text);
        return textCell;
    }

    public static T Text<T>(this T textCell, Func<string> textFunc, IComponentWithState? componentWithState = null)
        where T : ITextCell
    {
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.TextProperty, new PropertyValue<string>(textFunc, componentWithState));
        return textCell;
    }

    public static T Detail<T>(this T textCell, string detail)
        where T : ITextCell
    {
        //textCell.Detail = detail;
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.DetailProperty, detail);
        return textCell;
    }

    public static T Detail<T>(this T textCell, Func<string> detailFunc, IComponentWithState? componentWithState = null)
        where T : ITextCell
    {
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.DetailProperty, new PropertyValue<string>(detailFunc, componentWithState));
        return textCell;
    }

    public static T TextColor<T>(this T textCell, Microsoft.Maui.Graphics.Color textColor)
        where T : ITextCell
    {
        //textCell.TextColor = textColor;
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.TextColorProperty, textColor);
        return textCell;
    }

    public static T TextColor<T>(this T textCell, Func<Microsoft.Maui.Graphics.Color> textColorFunc, IComponentWithState? componentWithState = null)
        where T : ITextCell
    {
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc, componentWithState));
        return textCell;
    }

    public static T DetailColor<T>(this T textCell, Microsoft.Maui.Graphics.Color detailColor)
        where T : ITextCell
    {
        //textCell.DetailColor = detailColor;
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.DetailColorProperty, detailColor);
        return textCell;
    }

    public static T DetailColor<T>(this T textCell, Func<Microsoft.Maui.Graphics.Color> detailColorFunc, IComponentWithState? componentWithState = null)
        where T : ITextCell
    {
        textCell.SetProperty(Microsoft.Maui.Controls.TextCell.DetailColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(detailColorFunc, componentWithState));
        return textCell;
    }
}

public static partial class TextCellStyles
{
    public static Action<ITextCell>? Default { get; set; }
    public static Dictionary<string, Action<ITextCell>> Themes { get; } = [];
}
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable

namespace <#= Namespace() #>;

<# if (IsBaseGenericType()) { #>
public partial interface <#= InterfaceName() #> : IGeneric<#= BaseTypeName() #>
<# } else { #>
public partial interface <#= InterfaceName() #> : <#= BaseInterfaceName() #>
<# } #>
{
<# if (IsGenericType()) { #>
<# foreach (var property in Properties) { #>
    object? <#= property.Name #> { get; set; }
<# } #>
<# } #>

<# foreach (var ev in Events) { 
var genericArgs = ev.EventHandlerType.GetGenericArguments();
#>
    EventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? <#= ev.Name #>Event { get; set; }
<# } #>

}

<# if (IsBaseGenericType()) { #>
public abstract partial class <#= TypeName() #><T> : <#= BaseTypeName() #><T, <#= GenericArgumentBaseFullBaseTypeName() #>>, <#= InterfaceName() #> where T : <#= FullTypeName() #>, new()
{
    public <#= TypeName() #>(Action<T?>? componentRefAction = null)
        : base(componentRefAction)
    {
        <#= TypeName() #>Styles.Default?.Invoke(this);
    }
<# } else if (IsGenericType()) { #>
public abstract partial class <#= TypeName() #><T, TChild> : <#= BaseTypeName() #><T>, <#= InterfaceName() #> where T : <#= FullTypeName() #><TChild>, new() where TChild : <#= GenericArgumentBaseFullTypeName() #>
{
    public <#= TypeName() #>(Action<T?>? componentRefAction = null)
        : base(componentRefAction)
    {
    }
<# } else if (IsTypeSealed()) { #>
public sealed partial class <#= TypeName() #> : <#= BaseTypeName() #><<#= FullTypeName() #>>, <#= InterfaceName() #>
{
    public <#= TypeName() #>(Action<<#= FullTypeName() #>?>? componentRefAction = null)
        : base(componentRefAction)
    {
        <#= TypeName() #>Styles.Default?.Invoke(this);
    }
<# } else if (IsTypeNotAbstractWithEmptyConstructor()) { #>
public partial class <#= TypeName() #><T> : <#= BaseTypeName() #><T>, <#= InterfaceName() #> where T : <#= FullTypeName() #>, new()
{
    public <#= TypeName() #>(Action<T?>? componentRefAction = null)
        : base(componentRefAction)
    {
        <#= TypeName() #>Styles.Default?.Invoke(this);
    }
<# } else { #>
public abstract partial class <#= TypeName() #><T> : <#= BaseTypeName() #><T>, <#= InterfaceName() #> where T : <#= FullTypeName() #>, new()
{
    protected <#= TypeName() #>(Action<T?>? componentRefAction = null)
        : base(componentRefAction)
    {
        <#= TypeName() #>Styles.Default?.Invoke(this);
    }    
<# } #>

    <# if (IsGenericType()) { #>

    <# foreach (var property in Properties) { #>
    object? <#= InterfaceName() #>.<#= property.Name #> { get; set; }
    <# } #>

    <# } #>

    <# foreach (var ev in Events) {
    var genericArgs = ev.EventHandlerType.GetGenericArguments(); #>
    EventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? <#= InterfaceName() #>.<#= ev.Name #>Event { get; set; }
    <# } #>

    <# if (IsGenericType()) { #>
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        <# if (Properties.Any()) { #>

        Validate.EnsureNotNull(NativeControl);
        var thisAs<#= InterfaceName() #> = (<#= InterfaceName() #>)this;
        <# foreach (var property in Properties) { #>
        <# if (IsGenericType()) { #>
        SetPropertyValue(NativeControl, <#= FullTypeName() #><TChild>.<#= property.Name #>Property, thisAs<#= InterfaceName() #>.<#= property.Name #>);
        <# } #>
        <# } #>

        <# } #>

        base.OnUpdate();

        OnEndUpdate();
    }
    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    <# } #>

    partial void OnBeginAnimate();
    partial void OnEndAnimate();

    <# if (!IsGenericType()) { #>
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && <#= TypeName() #>Styles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
    <# } #>

    <# if (Events.Any()) { #>

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();

    <# foreach (var ev in Events) { 
    var genericArgs = ev.EventHandlerType.GetGenericArguments(); #>
    private EventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? _executing<#= ev.Name #>Event;
    <# } #>

    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);

        var thisAs<#= InterfaceName() #> = (<#= InterfaceName() #>)this;
        <# foreach (var ev in Events) { #>
        if (thisAs<#= InterfaceName() #>.<#= ev.Name #>Event != null)
        {
            NativeControl.<#= ev.Name #> += NativeControl_<#= ev.Name #>;
        }
        <# } #>

        OnAttachingNativeEvents();

        base.OnAttachNativeEvents();
    }

    <# foreach (var ev in Events) { 
    var genericArgs = ev.EventHandlerType.GetGenericArguments();
    #>
    private void NativeControl_<#= ev.Name #>(object? sender, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #> e)
    {
        var thisAs<#= InterfaceName() #> = (<#= InterfaceName() #>)this;
        if (_executing<#= ev.Name #>Event == null || _executing<#= ev.Name #>Event.IsCompleted)
        {
            _executing<#= ev.Name #>Event = thisAs<#= InterfaceName() #>.<#= ev.Name #>Event;
            _executing<#= ev.Name #>Event?.Execute(sender, e);
        }
    }
    <# } #>

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
        <# foreach (var ev in Events) { #>
        NativeControl.<#= ev.Name #> -= NativeControl_<#= ev.Name #>;
        <# } #>
        }

        OnDetachingNativeEvents();

        base.OnDetachNativeEvents();
    }
    <# } #>


    partial void Migrated(VisualNode newNode);

    protected override void OnMigrated(VisualNode newNode)
    {
        <# if (Events.Any()) { #>
        if (newNode is <#= TypeNameWithGenericArguments() #> @<#= TypeName().ToLower() #>)
        {
            <# foreach (var ev in Events) { #>
            if (_executing<#= ev.Name #>Event != null &&
                !_executing<#= ev.Name #>Event.IsCompleted)
            {
                @<#= TypeName().ToLower() #>._executing<#= ev.Name #>Event = _executing<#= ev.Name #>Event;
            }
            <# } #>        
        }
        <# } #>

        Migrated(newNode);

        base.OnMigrated(newNode);
    }
}

<# if (IsTypeNotAbstractWithEmptyConstructor() && !IsTypeSealed()) { #>
public partial class <#= TypeName() #> : <#= TypeName() #><<#= FullTypeName() #>>
{
    public <#= TypeName() #>(Action<<#= FullTypeName() #>?>? componentRefAction = null)
        : base(componentRefAction)
    {

    }

    <# if (typeof(Element).IsAssignableFrom(_typeToScaffold)) { #>
    public <#= TypeName() #>(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
    <# } #>
}
<# } #>

public static partial class <#= TypeName() #>Extensions
{
    <# foreach (var property in Properties) { #>
    <# if (property.PropertyType == typeof(double)) { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxDoubleAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxDoubleAnimation(<#= property.Name.CamelCase() #>));
        return <#= TypeName().ToLocalVariableName() #>;
    }        
    <# } else if (property.PropertyType == typeof(Rect)) { #>

    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxRectAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleRectAnimation(<#= property.Name.CamelCase() #>));
        return <#= TypeName().ToLocalVariableName() #>;
    }        
    <# } else if (property.PropertyType == typeof(Point)) { #>

    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxPointAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimplePointAnimation(<#= property.Name.CamelCase() #>));
        return <#= TypeName().ToLocalVariableName() #>;
    }        
    <# } else if (property.PropertyType == typeof(Thickness)) { #>
        
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(<#= property.Name.CamelCase() #>));
        return <#= TypeName().ToLocalVariableName() #>;
    }          
    <# } else if (property.PropertyType == typeof(CornerRadius)) { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(<#= property.Name.CamelCase() #>));
        return <#= TypeName().ToLocalVariableName() #>;
    }      
    <# } else { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, <#= property.Name.CamelCase() #>);
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }       
    <# } #>

    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>> <#= property.Name.CamelCase() #>Func, IComponentWithState? componentWithState = null) where T : <#= InterfaceName() #>
    {
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>Func, componentWithState);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>Func, componentWithState));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    <# if (property.PropertyType.Name == "Thickness") { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(leftRight, topBottom);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(leftRight, topBottom);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new Thickness(leftRight, topBottom));
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(leftRight, topBottom)));
        return <#= TypeName().ToLocalVariableName() #>;
    }

    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double uniformSize, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(uniformSize);
        <# if (IsGenericType()) { #>
       <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(uniformSize);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new Thickness(uniformSize));
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(uniformSize)));
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(left, top, right, bottom);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Thickness(left, top, right, bottom);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new Thickness(left, top, right, bottom));
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(left, top, right, bottom)));
        return <#= TypeName().ToLocalVariableName() #>;
    }
    <# } #>
    <# if (property.PropertyType.FullName == "Microsoft.Maui.Graphics.Point") { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double x, double y) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Graphics.Point(x, y);
        <# if (IsGenericType()) { #>
       <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Graphics.Point(x, y);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new Microsoft.Maui.Graphics.Point(x, y));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    <# } #>
        

    <# if (property.PropertyType.Name == "CornerRadius") { #>
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double uniformRadius, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(uniformRadius);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(uniformRadius);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new CornerRadius(uniformRadius));
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(uniformRadius)));
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double topLeft, double topRight, double bottomLeft, double bottomRight, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(topLeft, topRight, bottomLeft, bottomRight);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(topLeft, topRight, bottomLeft, bottomRight);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new CornerRadius(topLeft, topRight, bottomLeft, bottomRight));
        <# } #>
        <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(topLeft, topRight, bottomLeft, bottomRight)));
        return <#= TypeName().ToLocalVariableName() #>;
    }
    <# } #>
    <# if (property.PropertyType.Name == "ImageSource") { 
    var propertyName = property.Name; #>
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, string file) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<string> action)
        where T : <#= InterfaceName() #>
    {
        /*<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, string resourceName, Assembly sourceAssembly) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Uri imageUri) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = newValue;
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, newValue);
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<Stream> imageStream) where T : <#= InterfaceName() #>
    {
        //<#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        <# if (IsGenericType()) { #>
        <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        <# } else { #>
        <#= TypeName().ToLocalVariableName() #>.SetProperty(<#= FullTypeName() #>.<#= property.Name #>Property, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        <# } #>
        return <#= TypeName().ToLocalVariableName() #>;
    }
    <# } #>

    <# } #>
        
    <# foreach (var ev in Events) {
    var genericArgs = ev.EventHandlerType.GetGenericArguments();
    #>
    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Action? <#= ev.Name.ToLocalVariableName() #>Action) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new SyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(execute: <#= ev.Name.ToLocalVariableName() #>Action);
        return <#= TypeName().ToLocalVariableName() #>;
    }

    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Action<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? <#= ev.Name.ToLocalVariableName() #>Action) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new SyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(executeWithArgs: <#= ev.Name.ToLocalVariableName() #>Action);
        return <#= TypeName().ToLocalVariableName() #>;
    }

    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Action<object?, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? <#= ev.Name.ToLocalVariableName() #>Action) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new SyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(executeWithFullArgs: <#= ev.Name.ToLocalVariableName() #>Action);
        return <#= TypeName().ToLocalVariableName() #>;
    }


    
    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<Task>? <#= ev.Name.ToLocalVariableName() #>Action, bool runInBackground = false) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new AsyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(execute: <#= ev.Name.ToLocalVariableName() #>Action, runInBackground);
        return <#= TypeName().ToLocalVariableName() #>;
    }

    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>, Task>? <#= ev.Name.ToLocalVariableName() #>Action, bool runInBackground = false) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new AsyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(executeWithArgs: <#= ev.Name.ToLocalVariableName() #>Action, runInBackground);
        return <#= TypeName().ToLocalVariableName() #>;
    }

    public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<object?, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>, Task>? <#= ev.Name.ToLocalVariableName() #>Action, bool runInBackground = false) where T : <#= InterfaceName() #>
    {
        <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Event = new AsyncEventCommand<<#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>(executeWithFullArgs: <#= ev.Name.ToLocalVariableName() #>Action, runInBackground);
        return <#= TypeName().ToLocalVariableName() #>;
    }

    <# } #>
}

<# if (!IsGenericType()) { #>
public static partial class <#= TypeName() #>Styles
{

    public static Action<<#= InterfaceName() #>>? Default { get; set; }

    public static Dictionary<string, Action<<#= InterfaceName() #>>> Themes { get; } = [];
}
<# } #>
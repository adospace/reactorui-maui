using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace MauiReactor.XamlConverterTool;


public class MauiReactorCodeBuilder(XDocument xamlDocument)
{
    private readonly XDocument _xamlDocument = xamlDocument;

    public string GenerateCode()
    {
        var documentNode = new MauiCodeComponentNode(_xamlDocument);

        var generatedCode = documentNode.GenerateCode();

        return Prettify(generatedCode);
    }

    public string Prettify(string sourceCode)
    {
        var tree = CSharpSyntaxTree.ParseText(sourceCode);
        var root = tree.GetRoot().NormalizeWhitespace();
        var ret = root.ToFullString();
        return $"// <auto-generated />{Environment.NewLine}{ret}";
    }
}

public abstract class MauiCodeNode
{
    private List<MauiCodeVisualNode>? _children;

    public IReadOnlyList<MauiCodeVisualNode> Children
    {
        get
        {
            _children ??= GetChildren().ToList();

            return _children;
        }
    }

    public abstract IEnumerable<MauiCodeVisualNode> GetChildren();

    public abstract string GenerateCode();
}

public class MauiCodeComponentNode : MauiCodeNode
{
    private readonly XDocument _xamlDocument;

    public MauiCodeComponentNode(XDocument xamlDocument)
    {
        _xamlDocument = xamlDocument;
    }

    public override IEnumerable<MauiCodeVisualNode> GetChildren()
    {
        return _xamlDocument.Root?.Elements().Select(MauiCodeVisualNode.Create) ?? [];
    }

    public override string GenerateCode()
    {
        if (Children.Count == 0 || _xamlDocument.Root == null) 
        {
            return "error-no-component-found";
        }

        return $$"""
            class {{_xamlDocument.Root.Name.LocalName}} : Component
            {
                public override VisualNode Render()
                {
                    return {{Children[0].GenerateCode()}};
                }
            }
            """;
    }
}

public abstract class MauiCodeVisualNode(XElement xamlElement) : MauiCodeNode
{
    private readonly XElement _xamlElement = xamlElement;
    private readonly Dictionary<string, (string FullTypeName, bool IsEnum)> _properties = new();

    internal static MauiCodeVisualNode Create(XElement element)
    {
        //http://schemas.microsoft.com/dotnet/2021/maui
        var typeName = $"MauiReactor.XamlConverterTool.MauiCode{element.Name.LocalName}";
        return (MauiCodeVisualNode?)Assembly.GetExecutingAssembly().CreateInstance(typeName, false, BindingFlags.Default, null, new[] { element }, null, null) ?? throw new InvalidOperationException($"Unable to create the converter node {typeName}");
    }

    protected void RegisterProperty(string propertyName, string propertyType, bool isEnum = false)
    {
        _properties.Add(propertyName, (propertyType, isEnum));
    }

    protected virtual string? GenerateCodeForProperty(string propertyName, string propertyValue)
    {
        bool bindingMarkup = propertyValue.Trim().StartsWith("{");
        if (bindingMarkup)
        {
            return null;
        }

        if (_properties.TryGetValue(propertyName, out (string FullTypeName, bool IsEnum) property))
        {
            if (property.FullTypeName == "string" ||
                property.FullTypeName == "Microsoft.Maui.Controls.ImageSource")
            {
                return $".{propertyName}(\"{propertyValue.Replace(Environment.NewLine, string.Empty)}\")";
            }
            else if (property.FullTypeName.StartsWith("Microsoft.Maui.Controls."))
            {
                return $".{propertyName}({property.FullTypeName.Replace("Microsoft.Maui.Controls.", string.Empty)}.{propertyValue})";
            }
            else if (property.FullTypeName.StartsWith("Microsoft.Maui.") && property.IsEnum)
            {
                return $".{propertyName}({property.FullTypeName}.{propertyValue})";
            }

            return $".{propertyName}({propertyValue})";
        }

        return string.Empty;
    }

    protected virtual string GeneratePropertiesCode()
    {
        return string.Join(Environment.NewLine, _xamlElement
            .Attributes()
            .Select(_ => GenerateCodeForProperty(_.Name.LocalName, _.Value))
            .Where(_ => _ != null));
    }

    public override string GenerateCode()
    {
        if (Children.Count == 0)
        {
            return $$"""
            new {{_xamlElement.Name.LocalName}}()
            {{GeneratePropertiesCode()}}
            """;
        }
        
        return $$"""
            new {{_xamlElement.Name.LocalName}}
            {
                {{string.Join($",{Environment.NewLine}", Children.Select(_=>_.GenerateCode()))}}
            }
            {{GeneratePropertiesCode()}}
            """;
    }

    public override IEnumerable<MauiCodeVisualNode> GetChildren()
    {
        return _xamlElement.Elements().Select(Create) ?? [];
    }

}
